{
	"info": {
		"_postman_id": "6a2fe57e-79c8-45d3-b4c3-681e0c3a96df",
		"name": "SNST SDS API Test",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "45915566",
		"_collection_link": "https://ishan-7912389.postman.co/workspace/ISHAN's-Workspace~eea11ce4-9cd0-4080-8f33-0c7ddafe2877/collection/45915566-6a2fe57e-79c8-45d3-b4c3-681e0c3a96df?action=share&source=collection_link&creator=45915566"
	},
	"item": [
		{
			"name": "Administrator",
			"item": [
				{
					"name": "Role Update",
					"item": [
						{
							"name": "roles Code-200",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url_userApi}}{{user_federatedId}}/roles",
									"host": [
										"{{url_userApi}}{{user_federatedId}}"
									],
									"path": [
										"roles"
									]
								}
							},
							"response": []
						},
						{
							"name": "role Code-204",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// let selected = {\r",
											"//     firmware: \"https://dit-sds-users-webapp.azurewebsites.net/api/users\",\r",
											"//     federatedId : \"SESA823251\",\r",
											"//     roles: \"roles\",\r",
											"//     userroles:\"SoftwareManager\"\r",
											"\r",
											"\r",
											"// };\r",
											"\r",
											"// pm.collectionVariables.set(\"federatedId \", selected.federatedId );\r",
											"// pm.collectionVariables.set(\"roles\", selected.roles);\r",
											"// pm.collectionVariables.set(\"userroles\", selected.userroles);\r",
											"\r",
											"\r",
											"// // Optional: Log to console\r",
											"// console.log(\"Selected User:\", selected.federatedId , selected.roles, selected.userroles);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{url_userApi}}{{user_federatedId}}/roles/{{Role_admin_role}}",
									"host": [
										"{{url_userApi}}{{user_federatedId}}"
									],
									"path": [
										"roles",
										"{{Role_admin_role}}"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"packages": {},
								"exec": [
									"(function () {\r",
									"    const selectedRole = pm.collectionVariables.get(\"userroles\") || pm.collectionVariables.get(\"userroles\");\r",
									"\r",
									"    // const allowedRoles = [\r",
									"    //     \"UserRolesReader\",\r",
									"    //     \"Administrator\",\r",
									"    //     \"SoftwareManager\",\r",
									"    //     \"FirmwareManager\",\r",
									"    //     \"FirmwareReleaseManager\",\r",
									"    //     \"SoftwareReleaseManager\"\r",
									"    // ];\r",
									"\r",
									"    // if (!allowedRoles.includes(selectedRole)) {\r",
									"    //     throw new Error(`Invalid role selected: ${selectedRole}. Allowed roles are: ${allowedRoles.join(\", \")}`);\r",
									"    // }\r",
									"\r",
									"    console.log(\" Validated role:\", selectedRole);\r",
									"})();\r",
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"packages": {},
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "Test Suite",
					"item": [
						{
							"name": "User API",
							"item": [
								{
									"name": "ApiKeys all Code-200",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{Url_apikeys}}",
											"host": [
												"{{Url_apikeys}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "roles Code-200",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url_userApi}}{{user_federatedId}}/roles",
											"host": [
												"{{url_userApi}}{{user_federatedId}}"
											],
											"path": [
												"roles"
											]
										}
									},
									"response": []
								},
								{
									"name": "role Code-204",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// let selected = {\r",
													"//     firmware: \"https://dit-sds-users-webapp.azurewebsites.net/api/users\",\r",
													"//     federatedId : \"SESA823251\",\r",
													"//     roles: \"roles\",\r",
													"//     userroles:\"SoftwareManager\"\r",
													"\r",
													"\r",
													"// };\r",
													"\r",
													"// pm.collectionVariables.set(\"federatedId \", selected.federatedId );\r",
													"// pm.collectionVariables.set(\"roles\", selected.roles);\r",
													"// pm.collectionVariables.set(\"userroles\", selected.userroles);\r",
													"\r",
													"\r",
													"// // Optional: Log to console\r",
													"// console.log(\"Selected User:\", selected.federatedId , selected.roles, selected.userroles);"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 204\", function () {\r",
													"    pm.response.to.have.status(204);\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{url_userApi}}{{user_federatedId}}/roles/{{Role_UserRolesReader}}",
											"host": [
												"{{url_userApi}}{{user_federatedId}}"
											],
											"path": [
												"roles",
												"{{Role_UserRolesReader}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "role Code-204",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 204\", function () {\r",
													"    pm.response.to.have.status(204);\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{url_userApi}}{{user_federatedId}}/roles/{{Role_UserRolesReader}}",
											"host": [
												"{{url_userApi}}{{user_federatedId}}"
											],
											"path": [
												"roles",
												"{{Role_UserRolesReader}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Device API",
							"item": [
								{
									"name": "PUT Device Details Code-204",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"let requestId = pm.response.headers.get('Request-Id');\r",
													"pm.environment.set('requestId', requestId);\r",
													"\r",
													"pm.test(\"Status code is 204\", function () {\r",
													"    pm.response.to.have.status(204);\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "[\r\n  {\r\n    \"mac\": \"282986484D84\",\r\n    \"serialNumber\": \"ZA2108005674\",\r\n    \"encryptionKey\": \"a1b2c3d4e5f60718293a4b5c6d7e8f90\"\r\n  }\r\n]"
										},
										"url": {
											"raw": "{{url_devices}}devices",
											"host": [
												"{{url_devices}}devices"
											]
										}
									},
									"response": []
								},
								{
									"name": "PUT Upload Devices Code-202",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let requestId1 = pm.response.headers.get('Request-Id');",
													"pm.environment.set('requestId1', requestId1);",
													"",
													"pm.test(\"Status code is 202\", function () {",
													"    pm.response.to.have.status(202);",
													"});",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "multipart/form-data",
												"type": "text"
											}
										],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "file",
													"type": "file",
													"src": "postman-cloud:///1f04c2db-79af-4330-abbf-52f49b7814aa"
												}
											]
										},
										"url": {
											"raw": "{{url_devices}}/devices/upload",
											"host": [
												"{{url_devices}}"
											],
											"path": [
												"devices",
												"upload"
											]
										}
									},
									"response": []
								},
								{
									"name": "GET Request Status Code-200",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url_devices}}status?requestId={{requestId}}",
											"host": [
												"{{url_devices}}status"
											],
											"query": [
												{
													"key": "requestId",
													"value": "{{requestId}}"
												}
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"packages": {},
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"packages": {},
										"exec": [
											""
										]
									}
								}
							]
						},
						{
							"name": "Firmware API",
							"item": [
								{
									"name": "Firmware API_su",
									"item": [
										{
											"name": "firmware Code-201",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"// Try to get values from the response first\r",
															"try {\r",
															"    const response = pm.response.json();\r",
															"    if (response.appName) {\r",
															"        pm.environment.set(\"appName\", response.appName);\r",
															"    }\r",
															"    if (response.appVersion) {\r",
															"        pm.environment.set(\"appVersion\", response.appVersion);\r",
															"    }\r",
															"} catch (e) {\r",
															"    console.warn(\"No JSON response or missing fields.\");\r",
															"}\r",
															"\r",
															"// Fallback: get values from the request body if not already set\r",
															"if (!pm.environment.get(\"appName\") || !pm.environment.get(\"appVersion\")) {\r",
															"    try {\r",
															"        const requestBody = pm.request.body.raw ? JSON.parse(pm.request.body.raw) : {};\r",
															"        if (requestBody.appName) {\r",
															"            pm.environment.set(\"appName\", requestBody.appName);\r",
															"        }\r",
															"        if (requestBody.appVersion) {\r",
															"            pm.environment.set(\"appVersion\", requestBody.appVersion);\r",
															"        }\r",
															"    } catch (e) {\r",
															"        console.warn(\"Failed to parse request body.\");\r",
															"    }\r",
															"}\r",
															"\r",
															"pm.test(\"Status code is 201\", function () {\r",
															"    pm.response.to.have.status(201);\r",
															"});\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "formdata",
													"formdata": [
														{
															"key": "Criticality",
															"value": "{{criticality_Recommended}}",
															"type": "text"
														},
														{
															"key": "Description",
															"value": "{{Description}}",
															"type": "text"
														},
														{
															"key": "ReleaseNotesUrl",
															"value": "{{ReleaseNotesUrl}}",
															"type": "text"
														},
														{
															"key": "file",
															"type": "file",
															"src": "apc_hw21_su_3-3-0-8.nmc3"
														}
													]
												},
												"url": {
													"raw": "{{Url_firmwareApi}}",
													"host": [
														"{{Url_firmwareApi}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "get-all Code-200",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"// pm.test(\"Status code is 200\", function () {\r",
															"//     pm.response.to.have.status(200);\r",
															"// });\r",
															"\r",
															"// // // Parse response\r",
															"// // let firmwareList = pm.response.json();\r",
															"\r",
															"// // // Randomly select one firmware entry\r",
															"// // let selected = firmwareList[Math.floor(Math.random() * firmwareList.length)];\r",
															"\r",
															"// // // Set variables for next request\r",
															"// // pm.collectionVariables.set(\"appName\", selected.appName);\r",
															"// // pm.collectionVariables.set(\"appVersion\", selected.appVersion);\r",
															"\r",
															"// // console.log(\"Selected firmware:\", selected.appName, selected.appVersion);\r",
															"\r",
															"// let firmwareList = pm.response.json();\r",
															"\r",
															"// // Filter entries that have valid appName and appVersion\r",
															"// let validEntries = firmwareList.filter(fw => fw.appName && fw.appVersion);\r",
															"\r",
															"// // Randomly select one\r",
															"// let selected = validEntries[Math.floor(Math.random() * validEntries.length)];\r",
															"\r",
															"// pm.collectionVariables.set(\"appName\", selected.appName);\r",
															"// pm.collectionVariables.set(\"appVersion\", selected.appVersion);\r",
															"\r",
															"// console.log(\"Selected firmware:\", selected.appName, selected.appVersion);\r",
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{Url_firmwareApi}}",
													"host": [
														"{{Url_firmwareApi}}"
													],
													"query": [
														{
															"key": "snst",
															"value": null,
															"disabled": true
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "get-single Code-200",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{Url_firmwareApi}}/{{appName}}/{{appVersion}}",
													"host": [
														"{{Url_firmwareApi}}"
													],
													"path": [
														"{{appName}}",
														"{{appVersion}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Updating Code-204",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"if (!pm.collectionVariables.get(\"appName\") || !pm.collectionVariables.get(\"appVersion\")) {\r",
															"    throw new Error(\"appName or appVersion is missing. Please run the GET request first.\");\r",
															"}\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 204\", function () {\r",
															"    pm.response.to.have.status(204);\r",
															"});\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"criticality\": \"{{criticality_Optional}}\",\r\n  \"description\": \"{{Description}}\",\r\n  \"releaseNotesUrl\": \"{{ReleaseNotesUrl}}\"\r\n}\r\n\r\n",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{Url_firmwareApi}}/{{appName}}/{{appVersion}}",
													"host": [
														"{{Url_firmwareApi}}"
													],
													"path": [
														"{{appName}}",
														"{{appVersion}}"
													],
													"query": [
														{
															"key": "appName",
															"value": "su",
															"disabled": true
														},
														{
															"key": "appVersion",
															"value": "2.5.5.1",
															"disabled": true
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "get-single Copy 1 Code-200",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{Url_firmwareApi}}/{{appName}}/{{appVersion}}",
													"host": [
														"{{Url_firmwareApi}}"
													],
													"path": [
														"{{appName}}",
														"{{appVersion}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Updating Code-204",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"if (!pm.collectionVariables.get(\"appName\") || !pm.collectionVariables.get(\"appVersion\")) {\r",
															"    throw new Error(\"appName or appVersion is missing. Please run the GET request first.\");\r",
															"}\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 204\", function () {\r",
															"    pm.response.to.have.status(204);\r",
															"});\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"criticality\": \"{{criticality_Optional}}\",\r\n  \"description\": \"{{Description}}\",\r\n  \"releaseNotesUrl\": \"{{ReleaseNotesUrl}}\"\r\n}\r\n\r\n",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{Url_firmwareApi}}/{{appName}}/{{appVersion}}",
													"host": [
														"{{Url_firmwareApi}}"
													],
													"path": [
														"{{appName}}",
														"{{appVersion}}"
													],
													"query": [
														{
															"key": "appName",
															"value": "su",
															"disabled": true
														},
														{
															"key": "appVersion",
															"value": "2.5.5.1",
															"disabled": true
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "get-single Copy2 Code-200",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{Url_firmwareApi}}/{{appName}}/{{appVersion}}",
													"host": [
														"{{Url_firmwareApi}}"
													],
													"path": [
														"{{appName}}",
														"{{appVersion}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Release Code-204",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 204\", function () {\r",
															"    pm.response.to.have.status(204);\r",
															"});\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"release\": true,\r\n  \"releaseDate\": \"2025-06-26T06:48:50.080876Z\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{Url_firmwareApi}}/{{appName}}/{{appVersion}}/release",
													"host": [
														"{{Url_firmwareApi}}"
													],
													"path": [
														"{{appName}}",
														"{{appVersion}}",
														"release"
													]
												}
											},
											"response": []
										},
										{
											"name": "get-single Copy3 Code-200",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{Url_firmwareApi}}/{{appName}}/{{appVersion}}",
													"host": [
														"{{Url_firmwareApi}}"
													],
													"path": [
														"{{appName}}",
														"{{appVersion}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "generate Code-200",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"console.log(`Resolved URL: ${pm.variables.get(\"Url_firmwareApi\")}/${pm.collectionVariables.get(\"appName\")}/${pm.collectionVariables.get(\"appVersion\")}/generate`);\r",
															"\r",
															"\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"console.log(\"Response Body:\", pm.response.text());\r",
															"// console.log(\"Response Headers:\", pm.response.headers.toJSON());\r",
															"\r",
															"\r",
															"if (pm.response.code === 404) {\r",
															"    pm.visualizer.set(`<p>No firmware found for the selected version.</p>`);\r",
															"} else {\r",
															"    // existing logic for Content-Disposition\r",
															"}\r",
															"\r",
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"deviceIds\": [\r\n    \"2829866CDE70\"\r\n  ]\r\n}\r\n",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{Url_firmwareApi}}/{{appName}}/{{appVersion}}/generate",
													"host": [
														"{{Url_firmwareApi}}"
													],
													"path": [
														"{{appName}}",
														"{{appVersion}}",
														"generate"
													]
												}
											},
											"response": []
										},
										{
											"name": "stagged Code-204",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 204\", function () {\r",
															"    pm.response.to.have.status(204);\r",
															"});\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"release\": false\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{Url_firmwareApi}}/{{appName}}/{{appVersion}}/release",
													"host": [
														"{{Url_firmwareApi}}"
													],
													"path": [
														"{{appName}}",
														"{{appVersion}}",
														"release"
													]
												}
											},
											"response": []
										},
										{
											"name": "get-single Copy4 Code-200",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{Url_firmwareApi}}/{{appName}}/{{appVersion}}",
													"host": [
														"{{Url_firmwareApi}}"
													],
													"path": [
														"{{appName}}",
														"{{appVersion}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Deleting Code-204",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"if (!pm.collectionVariables.get(\"appName\") || !pm.collectionVariables.get(\"appVersion\")) {\r",
															"    throw new Error(\"appName or appVersion is missing. Please run the GET request first.\");\r",
															"}\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 204\", function () {\r",
															"    pm.response.to.have.status(204);\r",
															"});\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [],
												"url": {
													"raw": "{{Url_firmwareApi}}/{{appName}}/{{appVersion}}",
													"host": [
														"{{Url_firmwareApi}}"
													],
													"path": [
														"{{appName}}",
														"{{appVersion}}"
													],
													"query": [
														{
															"key": "appName",
															"value": "su",
															"disabled": true
														},
														{
															"key": "appVersion",
															"value": "2.5.5.1",
															"disabled": true
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "get-single Copy5 Code-404",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 404\", function () {\r",
															"    pm.response.to.have.status(404);\r",
															"});\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{Url_firmwareApi}}/{{appName}}/{{appVersion}}",
													"host": [
														"{{Url_firmwareApi}}"
													],
													"path": [
														"{{appName}}",
														"{{appVersion}}"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Firmware API_sy",
									"item": [
										{
											"name": "firmware Code-201",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"// Try to get values from the response first\r",
															"try {\r",
															"    const response = pm.response.json();\r",
															"    if (response.appName) {\r",
															"        pm.environment.set(\"appName\", response.appName);\r",
															"    }\r",
															"    if (response.appVersion) {\r",
															"        pm.environment.set(\"appVersion\", response.appVersion);\r",
															"    }\r",
															"} catch (e) {\r",
															"    console.warn(\"No JSON response or missing fields.\");\r",
															"}\r",
															"\r",
															"// Fallback: get values from the request body if not already set\r",
															"if (!pm.environment.get(\"appName\") || !pm.environment.get(\"appVersion\")) {\r",
															"    try {\r",
															"        const requestBody = pm.request.body.raw ? JSON.parse(pm.request.body.raw) : {};\r",
															"        if (requestBody.appName) {\r",
															"            pm.environment.set(\"appName\", requestBody.appName);\r",
															"        }\r",
															"        if (requestBody.appVersion) {\r",
															"            pm.environment.set(\"appVersion\", requestBody.appVersion);\r",
															"        }\r",
															"    } catch (e) {\r",
															"        console.warn(\"Failed to parse request body.\");\r",
															"    }\r",
															"}\r",
															"\r",
															"pm.test(\"Status code is 201\", function () {\r",
															"    pm.response.to.have.status(201);\r",
															"});\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "formdata",
													"formdata": [
														{
															"key": "Criticality",
															"value": "{{criticality_Recommended}}",
															"type": "text"
														},
														{
															"key": "Description",
															"value": "{{Description}}",
															"type": "text"
														},
														{
															"key": "ReleaseNotesUrl",
															"value": "{{ReleaseNotesUrl}}",
															"type": "text"
														},
														{
															"key": "file",
															"type": "file",
															"src": "apc_hw21_sy_2-5-0-3.nmc3"
														}
													]
												},
												"url": {
													"raw": "{{Url_firmwareApi}}",
													"host": [
														"{{Url_firmwareApi}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "get-all Code-200",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"// pm.test(\"Status code is 200\", function () {\r",
															"//     pm.response.to.have.status(200);\r",
															"// });\r",
															"\r",
															"// // // Parse response\r",
															"// // let firmwareList = pm.response.json();\r",
															"\r",
															"// // // Randomly select one firmware entry\r",
															"// // let selected = firmwareList[Math.floor(Math.random() * firmwareList.length)];\r",
															"\r",
															"// // // Set variables for next request\r",
															"// // pm.collectionVariables.set(\"appName\", selected.appName);\r",
															"// // pm.collectionVariables.set(\"appVersion\", selected.appVersion);\r",
															"\r",
															"// // console.log(\"Selected firmware:\", selected.appName, selected.appVersion);\r",
															"\r",
															"// let firmwareList = pm.response.json();\r",
															"\r",
															"// // Filter entries that have valid appName and appVersion\r",
															"// let validEntries = firmwareList.filter(fw => fw.appName && fw.appVersion);\r",
															"\r",
															"// // Randomly select one\r",
															"// let selected = validEntries[Math.floor(Math.random() * validEntries.length)];\r",
															"\r",
															"// pm.collectionVariables.set(\"appName\", selected.appName);\r",
															"// pm.collectionVariables.set(\"appVersion\", selected.appVersion);\r",
															"\r",
															"// console.log(\"Selected firmware:\", selected.appName, selected.appVersion);\r",
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{Url_firmwareApi}}",
													"host": [
														"{{Url_firmwareApi}}"
													],
													"query": [
														{
															"key": "snst",
															"value": null,
															"disabled": true
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "get-single Code-200",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{Url_firmwareApi}}/{{appName}}/{{appVersion}}",
													"host": [
														"{{Url_firmwareApi}}"
													],
													"path": [
														"{{appName}}",
														"{{appVersion}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Updating Code-204",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"if (!pm.collectionVariables.get(\"appName\") || !pm.collectionVariables.get(\"appVersion\")) {\r",
															"    throw new Error(\"appName or appVersion is missing. Please run the GET request first.\");\r",
															"}\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 204\", function () {\r",
															"    pm.response.to.have.status(204);\r",
															"});\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"criticality\": \"{{criticality_Optional}}\",\r\n  \"description\": \"{{Description}}\",\r\n  \"releaseNotesUrl\": \"{{ReleaseNotesUrl}}\"\r\n}\r\n\r\n",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{Url_firmwareApi}}/{{appName}}/{{appVersion}}",
													"host": [
														"{{Url_firmwareApi}}"
													],
													"path": [
														"{{appName}}",
														"{{appVersion}}"
													],
													"query": [
														{
															"key": "appName",
															"value": "su",
															"disabled": true
														},
														{
															"key": "appVersion",
															"value": "2.5.5.1",
															"disabled": true
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "get-single Copy1 Code-200",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{Url_firmwareApi}}/{{appName}}/{{appVersion}}",
													"host": [
														"{{Url_firmwareApi}}"
													],
													"path": [
														"{{appName}}",
														"{{appVersion}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Updating Code-204",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"if (!pm.collectionVariables.get(\"appName\") || !pm.collectionVariables.get(\"appVersion\")) {\r",
															"    throw new Error(\"appName or appVersion is missing. Please run the GET request first.\");\r",
															"}\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 204\", function () {\r",
															"    pm.response.to.have.status(204);\r",
															"});\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"criticality\": \"{{criticality_Optional}}\",\r\n  \"description\": \"{{Description}}\",\r\n  \"releaseNotesUrl\": \"{{ReleaseNotesUrl}}\"\r\n}\r\n\r\n",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{Url_firmwareApi}}/{{appName}}/{{appVersion}}",
													"host": [
														"{{Url_firmwareApi}}"
													],
													"path": [
														"{{appName}}",
														"{{appVersion}}"
													],
													"query": [
														{
															"key": "appName",
															"value": "su",
															"disabled": true
														},
														{
															"key": "appVersion",
															"value": "2.5.5.1",
															"disabled": true
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "get-single Copy2 Code-200",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{Url_firmwareApi}}/{{appName}}/{{appVersion}}",
													"host": [
														"{{Url_firmwareApi}}"
													],
													"path": [
														"{{appName}}",
														"{{appVersion}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Release Code-200",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 204\", function () {\r",
															"    pm.response.to.have.status(204);\r",
															"});\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"release\": true,\r\n  \"releaseDate\": \"2025-06-26T06:48:50.080876Z\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{Url_firmwareApi}}/{{appName}}/{{appVersion}}/release",
													"host": [
														"{{Url_firmwareApi}}"
													],
													"path": [
														"{{appName}}",
														"{{appVersion}}",
														"release"
													]
												}
											},
											"response": []
										},
										{
											"name": "get-single Copy3 Code-200",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{Url_firmwareApi}}/{{appName}}/{{appVersion}}",
													"host": [
														"{{Url_firmwareApi}}"
													],
													"path": [
														"{{appName}}",
														"{{appVersion}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "generate Code-200",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"console.log(`Resolved URL: ${pm.variables.get(\"Url_firmwareApi\")}/${pm.collectionVariables.get(\"appName\")}/${pm.collectionVariables.get(\"appVersion\")}/generate`);\r",
															"\r",
															"\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"console.log(\"Response Body:\", pm.response.text());\r",
															"// console.log(\"Response Headers:\", pm.response.headers.toJSON());\r",
															"\r",
															"\r",
															"if (pm.response.code === 404) {\r",
															"    pm.visualizer.set(`<p>No firmware found for the selected version.</p>`);\r",
															"} else {\r",
															"    // existing logic for Content-Disposition\r",
															"}\r",
															"\r",
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"deviceIds\": [\r\n    \"2829866CDE70\"\r\n  ]\r\n}\r\n",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{Url_firmwareApi}}/{{appName}}/{{appVersion}}/generate",
													"host": [
														"{{Url_firmwareApi}}"
													],
													"path": [
														"{{appName}}",
														"{{appVersion}}",
														"generate"
													]
												}
											},
											"response": []
										},
										{
											"name": "stagged Code-204",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 204\", function () {\r",
															"    pm.response.to.have.status(204);\r",
															"});\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"release\": false\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{Url_firmwareApi}}/{{appName}}/{{appVersion}}/release",
													"host": [
														"{{Url_firmwareApi}}"
													],
													"path": [
														"{{appName}}",
														"{{appVersion}}",
														"release"
													]
												}
											},
											"response": []
										},
										{
											"name": "get-single Copy4 Code-200",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{Url_firmwareApi}}/{{appName}}/{{appVersion}}",
													"host": [
														"{{Url_firmwareApi}}"
													],
													"path": [
														"{{appName}}",
														"{{appVersion}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Deleting Code-204",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"if (!pm.collectionVariables.get(\"appName\") || !pm.collectionVariables.get(\"appVersion\")) {\r",
															"    throw new Error(\"appName or appVersion is missing. Please run the GET request first.\");\r",
															"}\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 204\", function () {\r",
															"    pm.response.to.have.status(204);\r",
															"});\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"criticality\": \"Optional\",\r\n  \"description\": \"tester\",\r\n  \"releaseNotesUrl\": \"https://sus.com\"\r\n}\r\n\r\n",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{Url_firmwareApi}}/{{appName}}/{{appVersion}}",
													"host": [
														"{{Url_firmwareApi}}"
													],
													"path": [
														"{{appName}}",
														"{{appVersion}}"
													],
													"query": [
														{
															"key": "appName",
															"value": "su",
															"disabled": true
														},
														{
															"key": "appVersion",
															"value": "2.5.5.1",
															"disabled": true
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "get-single Copy5 Code-404",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 404\", function () {\r",
															"    pm.response.to.have.status(404);\r",
															"});\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{Url_firmwareApi}}/{{appName}}/{{appVersion}}",
													"host": [
														"{{Url_firmwareApi}}"
													],
													"path": [
														"{{appName}}",
														"{{appVersion}}"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Firmware API_sucan",
									"item": [
										{
											"name": "Firmware Code-201",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"// Try to get values from the response first\r",
															"try {\r",
															"    const response = pm.response.json();\r",
															"    if (response.appName) {\r",
															"        pm.environment.set(\"appName\", response.appName);\r",
															"    }\r",
															"    if (response.appVersion) {\r",
															"        pm.environment.set(\"appVersion\", response.appVersion);\r",
															"    }\r",
															"} catch (e) {\r",
															"    console.warn(\"No JSON response or missing fields.\");\r",
															"}\r",
															"\r",
															"// Fallback: get values from the request body if not already set\r",
															"if (!pm.environment.get(\"appName\") || !pm.environment.get(\"appVersion\")) {\r",
															"    try {\r",
															"        const requestBody = pm.request.body.raw ? JSON.parse(pm.request.body.raw) : {};\r",
															"        if (requestBody.appName) {\r",
															"            pm.environment.set(\"appName\", requestBody.appName);\r",
															"        }\r",
															"        if (requestBody.appVersion) {\r",
															"            pm.environment.set(\"appVersion\", requestBody.appVersion);\r",
															"        }\r",
															"    } catch (e) {\r",
															"        console.warn(\"Failed to parse request body.\");\r",
															"    }\r",
															"}\r",
															"\r",
															"pm.test(\"Status code is 201\", function () {\r",
															"    pm.response.to.have.status(201);\r",
															"});\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "formdata",
													"formdata": [
														{
															"key": "Criticality",
															"value": "{{criticality_Recommended}}",
															"type": "text"
														},
														{
															"key": "Description",
															"value": "{{Description}}",
															"type": "text"
														},
														{
															"key": "ReleaseNotesUrl",
															"value": "{{ReleaseNotesUrl}}",
															"type": "text"
														},
														{
															"key": "file",
															"type": "file",
															"src": "apc_hw21_sucan_3-3-0-3.nmc3"
														}
													]
												},
												"url": {
													"raw": "{{Url_firmwareApi}}",
													"host": [
														"{{Url_firmwareApi}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "get-all Code-200",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"// pm.test(\"Status code is 200\", function () {\r",
															"//     pm.response.to.have.status(200);\r",
															"// });\r",
															"\r",
															"// // // Parse response\r",
															"// // let firmwareList = pm.response.json();\r",
															"\r",
															"// // // Randomly select one firmware entry\r",
															"// // let selected = firmwareList[Math.floor(Math.random() * firmwareList.length)];\r",
															"\r",
															"// // // Set variables for next request\r",
															"// // pm.collectionVariables.set(\"appName\", selected.appName);\r",
															"// // pm.collectionVariables.set(\"appVersion\", selected.appVersion);\r",
															"\r",
															"// // console.log(\"Selected firmware:\", selected.appName, selected.appVersion);\r",
															"\r",
															"// let firmwareList = pm.response.json();\r",
															"\r",
															"// // Filter entries that have valid appName and appVersion\r",
															"// let validEntries = firmwareList.filter(fw => fw.appName && fw.appVersion);\r",
															"\r",
															"// // Randomly select one\r",
															"// let selected = validEntries[Math.floor(Math.random() * validEntries.length)];\r",
															"\r",
															"// pm.collectionVariables.set(\"appName\", selected.appName);\r",
															"// pm.collectionVariables.set(\"appVersion\", selected.appVersion);\r",
															"\r",
															"// console.log(\"Selected firmware:\", selected.appName, selected.appVersion);\r",
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{Url_firmwareApi}}",
													"host": [
														"{{Url_firmwareApi}}"
													],
													"query": [
														{
															"key": "snst",
															"value": null,
															"disabled": true
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "get-single Code-200",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{Url_firmwareApi}}/{{appName}}/{{appVersion}}",
													"host": [
														"{{Url_firmwareApi}}"
													],
													"path": [
														"{{appName}}",
														"{{appVersion}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Updating Code-204",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"if (!pm.collectionVariables.get(\"appName\") || !pm.collectionVariables.get(\"appVersion\")) {\r",
															"    throw new Error(\"appName or appVersion is missing. Please run the GET request first.\");\r",
															"}\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 204\", function () {\r",
															"    pm.response.to.have.status(204);\r",
															"});\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"criticality\": \"{{criticality_Optional}}\",\r\n  \"description\": \"{{Description}}\",\r\n  \"releaseNotesUrl\": \"{{ReleaseNotesUrl}}\"\r\n}\r\n\r\n",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{Url_firmwareApi}}/{{appName}}/{{appVersion}}",
													"host": [
														"{{Url_firmwareApi}}"
													],
													"path": [
														"{{appName}}",
														"{{appVersion}}"
													],
													"query": [
														{
															"key": "appName",
															"value": "su",
															"disabled": true
														},
														{
															"key": "appVersion",
															"value": "2.5.5.1",
															"disabled": true
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "get-single Copy Code-200",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{Url_firmwareApi}}/{{appName}}/{{appVersion}}",
													"host": [
														"{{Url_firmwareApi}}"
													],
													"path": [
														"{{appName}}",
														"{{appVersion}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Updating Code-204",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"if (!pm.collectionVariables.get(\"appName\") || !pm.collectionVariables.get(\"appVersion\")) {\r",
															"    throw new Error(\"appName or appVersion is missing. Please run the GET request first.\");\r",
															"}\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 204\", function () {\r",
															"    pm.response.to.have.status(204);\r",
															"});\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"criticality\": \"{{criticality_Optional}}\",\r\n  \"description\": \"{{Description}}\",\r\n  \"releaseNotesUrl\": \"{{ReleaseNotesUrl}}\"\r\n}\r\n\r\n",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{Url_firmwareApi}}/{{appName}}/{{appVersion}}",
													"host": [
														"{{Url_firmwareApi}}"
													],
													"path": [
														"{{appName}}",
														"{{appVersion}}"
													],
													"query": [
														{
															"key": "appName",
															"value": "su",
															"disabled": true
														},
														{
															"key": "appVersion",
															"value": "2.5.5.1",
															"disabled": true
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "get-single Copy2 Code-200",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{Url_firmwareApi}}/{{appName}}/{{appVersion}}",
													"host": [
														"{{Url_firmwareApi}}"
													],
													"path": [
														"{{appName}}",
														"{{appVersion}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Release Code-204",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 204\", function () {\r",
															"    pm.response.to.have.status(204);\r",
															"});\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"release\": true,\r\n  \"releaseDate\": \"{{ReleaseDate}}\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{Url_firmwareApi}}/{{appName}}/{{appVersion}}/release",
													"host": [
														"{{Url_firmwareApi}}"
													],
													"path": [
														"{{appName}}",
														"{{appVersion}}",
														"release"
													]
												}
											},
											"response": []
										},
										{
											"name": "get-single Copy3 Code-200",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{Url_firmwareApi}}/{{appName}}/{{appVersion}}",
													"host": [
														"{{Url_firmwareApi}}"
													],
													"path": [
														"{{appName}}",
														"{{appVersion}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "generate Code-200",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"console.log(`Resolved URL: ${pm.variables.get(\"Url_firmwareApi\")}/${pm.collectionVariables.get(\"appName\")}/${pm.collectionVariables.get(\"appVersion\")}/generate`);\r",
															"\r",
															"\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"console.log(\"Response Body:\", pm.response.text());\r",
															"// console.log(\"Response Headers:\", pm.response.headers.toJSON());\r",
															"\r",
															"\r",
															"if (pm.response.code === 404) {\r",
															"    pm.visualizer.set(`<p>No firmware found for the selected version.</p>`);\r",
															"} else {\r",
															"    // existing logic for Content-Disposition\r",
															"}\r",
															"\r",
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"deviceIds\": [\r\n    \"2829866CDE70\"\r\n  ]\r\n}\r\n",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{Url_firmwareApi}}/{{appName}}/{{appVersion}}/generate",
													"host": [
														"{{Url_firmwareApi}}"
													],
													"path": [
														"{{appName}}",
														"{{appVersion}}",
														"generate"
													]
												}
											},
											"response": []
										},
										{
											"name": "Release Copy 204",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 204\", function () {\r",
															"    pm.response.to.have.status(204);\r",
															"});\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"release\": false\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{Url_firmwareApi}}/{{appName}}/{{appVersion}}/release",
													"host": [
														"{{Url_firmwareApi}}"
													],
													"path": [
														"{{appName}}",
														"{{appVersion}}",
														"release"
													]
												}
											},
											"response": []
										},
										{
											"name": "get-single Copy4 Code-200",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{Url_firmwareApi}}/{{appName}}/{{appVersion}}",
													"host": [
														"{{Url_firmwareApi}}"
													],
													"path": [
														"{{appName}}",
														"{{appVersion}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Deleting Copy Code-204",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"if (!pm.collectionVariables.get(\"appName\") || !pm.collectionVariables.get(\"appVersion\")) {\r",
															"    throw new Error(\"appName or appVersion is missing. Please run the GET request first.\");\r",
															"}\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 204\", function () {\r",
															"    pm.response.to.have.status(204);\r",
															"});\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"criticality\": \"Optional\",\r\n  \"description\": \"tester\",\r\n  \"releaseNotesUrl\": \"https://sus.com\"\r\n}\r\n\r\n",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{Url_firmwareApi}}/{{appName}}/{{appVersion}}",
													"host": [
														"{{Url_firmwareApi}}"
													],
													"path": [
														"{{appName}}",
														"{{appVersion}}"
													],
													"query": [
														{
															"key": "appName",
															"value": "su",
															"disabled": true
														},
														{
															"key": "appVersion",
															"value": "2.5.5.1",
															"disabled": true
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "get-single Copy5 Code-404",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 404\", function () {\r",
															"    pm.response.to.have.status(404);\r",
															"});\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{Url_firmwareApi}}/{{appName}}/{{appVersion}}",
													"host": [
														"{{Url_firmwareApi}}"
													],
													"path": [
														"{{appName}}",
														"{{appVersion}}"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Firmware API_rpdu2g",
									"item": [
										{
											"name": "firmware Code-201",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"// Try to get values from the response first\r",
															"try {\r",
															"    const response = pm.response.json();\r",
															"    if (response.appName) {\r",
															"        pm.environment.set(\"appName\", response.appName);\r",
															"    }\r",
															"    if (response.appVersion) {\r",
															"        pm.environment.set(\"appVersion\", response.appVersion);\r",
															"    }\r",
															"} catch (e) {\r",
															"    console.warn(\"No JSON response or missing fields.\");\r",
															"}\r",
															"\r",
															"// Fallback: get values from the request body if not already set\r",
															"if (!pm.environment.get(\"appName\") || !pm.environment.get(\"appVersion\")) {\r",
															"    try {\r",
															"        const requestBody = pm.request.body.raw ? JSON.parse(pm.request.body.raw) : {};\r",
															"        if (requestBody.appName) {\r",
															"            pm.environment.set(\"appName\", requestBody.appName);\r",
															"        }\r",
															"        if (requestBody.appVersion) {\r",
															"            pm.environment.set(\"appVersion\", requestBody.appVersion);\r",
															"        }\r",
															"    } catch (e) {\r",
															"        console.warn(\"Failed to parse request body.\");\r",
															"    }\r",
															"}\r",
															"\r",
															"pm.test(\"Status code is 201\", function () {\r",
															"    pm.response.to.have.status(201);\r",
															"});\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "formdata",
													"formdata": [
														{
															"key": "Criticality",
															"value": "{{criticality_Recommended}}",
															"type": "text"
														},
														{
															"key": "Description",
															"value": "{{Description}}",
															"type": "text"
														},
														{
															"key": "ReleaseNotesUrl",
															"value": "{{ReleaseNotesUrl}}",
															"type": "text"
														},
														{
															"key": "file",
															"type": "file",
															"src": "apc_hw21_rpdu2g_3-2-1-2.nmc3"
														}
													]
												},
												"url": {
													"raw": "{{Url_firmwareApi}}",
													"host": [
														"{{Url_firmwareApi}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "get-all Code-200",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"// pm.test(\"Status code is 200\", function () {\r",
															"//     pm.response.to.have.status(200);\r",
															"// });\r",
															"\r",
															"// // // Parse response\r",
															"// // let firmwareList = pm.response.json();\r",
															"\r",
															"// // // Randomly select one firmware entry\r",
															"// // let selected = firmwareList[Math.floor(Math.random() * firmwareList.length)];\r",
															"\r",
															"// // // Set variables for next request\r",
															"// // pm.collectionVariables.set(\"appName\", selected.appName);\r",
															"// // pm.collectionVariables.set(\"appVersion\", selected.appVersion);\r",
															"\r",
															"// // console.log(\"Selected firmware:\", selected.appName, selected.appVersion);\r",
															"\r",
															"// let firmwareList = pm.response.json();\r",
															"\r",
															"// // Filter entries that have valid appName and appVersion\r",
															"// let validEntries = firmwareList.filter(fw => fw.appName && fw.appVersion);\r",
															"\r",
															"// // Randomly select one\r",
															"// let selected = validEntries[Math.floor(Math.random() * validEntries.length)];\r",
															"\r",
															"// pm.collectionVariables.set(\"appName\", selected.appName);\r",
															"// pm.collectionVariables.set(\"appVersion\", selected.appVersion);\r",
															"\r",
															"// console.log(\"Selected firmware:\", selected.appName, selected.appVersion);\r",
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{Url_firmwareApi}}",
													"host": [
														"{{Url_firmwareApi}}"
													],
													"query": [
														{
															"key": "snst",
															"value": null,
															"disabled": true
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "get-single Code-200",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{Url_firmwareApi}}/{{appName}}/{{appVersion}}",
													"host": [
														"{{Url_firmwareApi}}"
													],
													"path": [
														"{{appName}}",
														"{{appVersion}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Updating Code-204",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"if (!pm.collectionVariables.get(\"appName\") || !pm.collectionVariables.get(\"appVersion\")) {\r",
															"    throw new Error(\"appName or appVersion is missing. Please run the GET request first.\");\r",
															"}\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 204\", function () {\r",
															"    pm.response.to.have.status(204);\r",
															"});\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"criticality\": \"{{criticality_Optional}}\",\r\n  \"description\": \"{{Description}}\",\r\n  \"releaseNotesUrl\": \"{{ReleaseNotesUrl}}\"\r\n}\r\n\r\n",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{Url_firmwareApi}}/{{appName}}/{{appVersion}}",
													"host": [
														"{{Url_firmwareApi}}"
													],
													"path": [
														"{{appName}}",
														"{{appVersion}}"
													],
													"query": [
														{
															"key": "appName",
															"value": "su",
															"disabled": true
														},
														{
															"key": "appVersion",
															"value": "2.5.5.1",
															"disabled": true
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "get-single Copy1 Code-200",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{Url_firmwareApi}}/{{appName}}/{{appVersion}}",
													"host": [
														"{{Url_firmwareApi}}"
													],
													"path": [
														"{{appName}}",
														"{{appVersion}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Updating Code-200",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"if (!pm.collectionVariables.get(\"appName\") || !pm.collectionVariables.get(\"appVersion\")) {\r",
															"    throw new Error(\"appName or appVersion is missing. Please run the GET request first.\");\r",
															"}\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 204\", function () {\r",
															"    pm.response.to.have.status(204);\r",
															"});\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"criticality\": \"{{criticality_Optional}}\",\r\n  \"description\": \"{{Description}}\",\r\n  \"releaseNotesUrl\": \"{{ReleaseNotesUrl}}\"\r\n}\r\n\r\n",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{Url_firmwareApi}}/{{appName}}/{{appVersion}}",
													"host": [
														"{{Url_firmwareApi}}"
													],
													"path": [
														"{{appName}}",
														"{{appVersion}}"
													],
													"query": [
														{
															"key": "appName",
															"value": "su",
															"disabled": true
														},
														{
															"key": "appVersion",
															"value": "2.5.5.1",
															"disabled": true
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "get-single Copy2 Code-200",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{Url_firmwareApi}}/{{appName}}/{{appVersion}}",
													"host": [
														"{{Url_firmwareApi}}"
													],
													"path": [
														"{{appName}}",
														"{{appVersion}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Release Code-204",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 204\", function () {\r",
															"    pm.response.to.have.status(204);\r",
															"});\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"release\": true,\r\n  \"releaseDate\": \"2025-06-26T06:48:50.080876Z\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{Url_firmwareApi}}/{{appName}}/{{appVersion}}/release",
													"host": [
														"{{Url_firmwareApi}}"
													],
													"path": [
														"{{appName}}",
														"{{appVersion}}",
														"release"
													]
												}
											},
											"response": []
										},
										{
											"name": "get-single Copy3 Code-200",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{Url_firmwareApi}}/{{appName}}/{{appVersion}}",
													"host": [
														"{{Url_firmwareApi}}"
													],
													"path": [
														"{{appName}}",
														"{{appVersion}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "generate Code-200",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"console.log(`Resolved URL: ${pm.variables.get(\"Url_firmwareApi\")}/${pm.collectionVariables.get(\"appName\")}/${pm.collectionVariables.get(\"appVersion\")}/generate`);\r",
															"\r",
															"\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"console.log(\"Response Body:\", pm.response.text());\r",
															"// console.log(\"Response Headers:\", pm.response.headers.toJSON());\r",
															"\r",
															"\r",
															"if (pm.response.code === 404) {\r",
															"    pm.visualizer.set(`<p>No firmware found for the selected version.</p>`);\r",
															"} else {\r",
															"    // existing logic for Content-Disposition\r",
															"}\r",
															"\r",
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"deviceIds\": [\r\n    \"2829866CDE70\"\r\n  ]\r\n}\r\n",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{Url_firmwareApi}}/{{appName}}/{{appVersion}}/generate",
													"host": [
														"{{Url_firmwareApi}}"
													],
													"path": [
														"{{appName}}",
														"{{appVersion}}",
														"generate"
													]
												}
											},
											"response": []
										},
										{
											"name": "Release Copy Code-204",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 204\", function () {\r",
															"    pm.response.to.have.status(204);\r",
															"});\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"release\": false\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{Url_firmwareApi}}/{{appName}}/{{appVersion}}/release",
													"host": [
														"{{Url_firmwareApi}}"
													],
													"path": [
														"{{appName}}",
														"{{appVersion}}",
														"release"
													]
												}
											},
											"response": []
										},
										{
											"name": "get-single Copy4 Code-200",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{Url_firmwareApi}}/{{appName}}/{{appVersion}}",
													"host": [
														"{{Url_firmwareApi}}"
													],
													"path": [
														"{{appName}}",
														"{{appVersion}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Deleting Code-204",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"if (!pm.collectionVariables.get(\"appName\") || !pm.collectionVariables.get(\"appVersion\")) {\r",
															"    throw new Error(\"appName or appVersion is missing. Please run the GET request first.\");\r",
															"}\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 204\", function () {\r",
															"    pm.response.to.have.status(204);\r",
															"});\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"criticality\": \"Optional\",\r\n  \"description\": \"tester\",\r\n  \"releaseNotesUrl\": \"https://sus.com\"\r\n}\r\n\r\n",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{Url_firmwareApi}}/{{appName}}/{{appVersion}}",
													"host": [
														"{{Url_firmwareApi}}"
													],
													"path": [
														"{{appName}}",
														"{{appVersion}}"
													],
													"query": [
														{
															"key": "appName",
															"value": "su",
															"disabled": true
														},
														{
															"key": "appVersion",
															"value": "2.5.5.1",
															"disabled": true
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "get-single Copy5 Code-404",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 404\", function () {\r",
															"    pm.response.to.have.status(404);\r",
															"});\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{Url_firmwareApi}}/{{appName}}/{{appVersion}}",
													"host": [
														"{{Url_firmwareApi}}"
													],
													"path": [
														"{{appName}}",
														"{{appVersion}}"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Firmware API_eu1p",
									"item": [
										{
											"name": "firmware Code-201",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"// Try to get values from the response first\r",
															"try {\r",
															"    const response = pm.response.json();\r",
															"    if (response.appName) {\r",
															"        pm.environment.set(\"appName\", response.appName);\r",
															"    }\r",
															"    if (response.appVersion) {\r",
															"        pm.environment.set(\"appVersion\", response.appVersion);\r",
															"    }\r",
															"} catch (e) {\r",
															"    console.warn(\"No JSON response or missing fields.\");\r",
															"}\r",
															"\r",
															"// Fallback: get values from the request body if not already set\r",
															"if (!pm.environment.get(\"appName\") || !pm.environment.get(\"appVersion\")) {\r",
															"    try {\r",
															"        const requestBody = pm.request.body.raw ? JSON.parse(pm.request.body.raw) : {};\r",
															"        if (requestBody.appName) {\r",
															"            pm.environment.set(\"appName\", requestBody.appName);\r",
															"        }\r",
															"        if (requestBody.appVersion) {\r",
															"            pm.environment.set(\"appVersion\", requestBody.appVersion);\r",
															"        }\r",
															"    } catch (e) {\r",
															"        console.warn(\"Failed to parse request body.\");\r",
															"    }\r",
															"}\r",
															"\r",
															"pm.test(\"Status code is 201\", function () {\r",
															"    pm.response.to.have.status(201);\r",
															"});\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "formdata",
													"formdata": [
														{
															"key": "Criticality",
															"value": "{{criticality_Recommended}}",
															"type": "text"
														},
														{
															"key": "Description",
															"value": "{{Description}}",
															"type": "text"
														},
														{
															"key": "ReleaseNotesUrl",
															"value": "{{ReleaseNotesUrl}}",
															"type": "text"
														},
														{
															"key": "file",
															"type": "file",
															"src": "apc_hw21_eu1p_2-5-1-5.nmc3"
														}
													]
												},
												"url": {
													"raw": "{{Url_firmwareApi}}",
													"host": [
														"{{Url_firmwareApi}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "get-all Code-200",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"// pm.test(\"Status code is 200\", function () {\r",
															"//     pm.response.to.have.status(200);\r",
															"// });\r",
															"\r",
															"// // // Parse response\r",
															"// // let firmwareList = pm.response.json();\r",
															"\r",
															"// // // Randomly select one firmware entry\r",
															"// // let selected = firmwareList[Math.floor(Math.random() * firmwareList.length)];\r",
															"\r",
															"// // // Set variables for next request\r",
															"// // pm.collectionVariables.set(\"appName\", selected.appName);\r",
															"// // pm.collectionVariables.set(\"appVersion\", selected.appVersion);\r",
															"\r",
															"// // console.log(\"Selected firmware:\", selected.appName, selected.appVersion);\r",
															"\r",
															"// let firmwareList = pm.response.json();\r",
															"\r",
															"// // Filter entries that have valid appName and appVersion\r",
															"// let validEntries = firmwareList.filter(fw => fw.appName && fw.appVersion);\r",
															"\r",
															"// // Randomly select one\r",
															"// let selected = validEntries[Math.floor(Math.random() * validEntries.length)];\r",
															"\r",
															"// pm.collectionVariables.set(\"appName\", selected.appName);\r",
															"// pm.collectionVariables.set(\"appVersion\", selected.appVersion);\r",
															"\r",
															"// console.log(\"Selected firmware:\", selected.appName, selected.appVersion);\r",
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{Url_firmwareApi}}",
													"host": [
														"{{Url_firmwareApi}}"
													],
													"query": [
														{
															"key": "snst",
															"value": null,
															"disabled": true
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "get-single Code-200",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{Url_firmwareApi}}/{{appName}}/{{appVersion}}",
													"host": [
														"{{Url_firmwareApi}}"
													],
													"path": [
														"{{appName}}",
														"{{appVersion}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Updating Code-204",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"if (!pm.collectionVariables.get(\"appName\") || !pm.collectionVariables.get(\"appVersion\")) {\r",
															"    throw new Error(\"appName or appVersion is missing. Please run the GET request first.\");\r",
															"}\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 204\", function () {\r",
															"    pm.response.to.have.status(204);\r",
															"});\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"criticality\": \"{{criticality_Optional}}\",\r\n  \"description\": \"{{Description}}\",\r\n  \"releaseNotesUrl\": \"{{ReleaseNotesUrl}}\"\r\n}\r\n\r\n",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{Url_firmwareApi}}/{{appName}}/{{appVersion}}",
													"host": [
														"{{Url_firmwareApi}}"
													],
													"path": [
														"{{appName}}",
														"{{appVersion}}"
													],
													"query": [
														{
															"key": "appName",
															"value": "su",
															"disabled": true
														},
														{
															"key": "appVersion",
															"value": "2.5.5.1",
															"disabled": true
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "get-single Copy1 Code-200",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{Url_firmwareApi}}/{{appName}}/{{appVersion}}",
													"host": [
														"{{Url_firmwareApi}}"
													],
													"path": [
														"{{appName}}",
														"{{appVersion}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Updating Code-204",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"if (!pm.collectionVariables.get(\"appName\") || !pm.collectionVariables.get(\"appVersion\")) {\r",
															"    throw new Error(\"appName or appVersion is missing. Please run the GET request first.\");\r",
															"}\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 204\", function () {\r",
															"    pm.response.to.have.status(204);\r",
															"});\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"criticality\": \"{{criticality_Optional}}\",\r\n  \"description\": \"{{Description}}\",\r\n  \"releaseNotesUrl\": \"{{ReleaseNotesUrl}}\"\r\n}\r\n\r\n",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{Url_firmwareApi}}/{{appName}}/{{appVersion}}",
													"host": [
														"{{Url_firmwareApi}}"
													],
													"path": [
														"{{appName}}",
														"{{appVersion}}"
													],
													"query": [
														{
															"key": "appName",
															"value": "su",
															"disabled": true
														},
														{
															"key": "appVersion",
															"value": "2.5.5.1",
															"disabled": true
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "get-single Copy2 Code-200",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{Url_firmwareApi}}/{{appName}}/{{appVersion}}",
													"host": [
														"{{Url_firmwareApi}}"
													],
													"path": [
														"{{appName}}",
														"{{appVersion}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Release Code-204",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 204\", function () {\r",
															"    pm.response.to.have.status(204);\r",
															"});\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"release\": true,\r\n  \"releaseDate\": \"2025-06-26T06:48:50.080876Z\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{Url_firmwareApi}}/{{appName}}/{{appVersion}}/release",
													"host": [
														"{{Url_firmwareApi}}"
													],
													"path": [
														"{{appName}}",
														"{{appVersion}}",
														"release"
													]
												}
											},
											"response": []
										},
										{
											"name": "get-single Copy3 Code-200",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{Url_firmwareApi}}/{{appName}}/{{appVersion}}",
													"host": [
														"{{Url_firmwareApi}}"
													],
													"path": [
														"{{appName}}",
														"{{appVersion}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "generate Code-200",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"console.log(`Resolved URL: ${pm.variables.get(\"Url_firmwareApi\")}/${pm.collectionVariables.get(\"appName\")}/${pm.collectionVariables.get(\"appVersion\")}/generate`);\r",
															"\r",
															"\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"console.log(\"Response Body:\", pm.response.text());\r",
															"// console.log(\"Response Headers:\", pm.response.headers.toJSON());\r",
															"\r",
															"\r",
															"if (pm.response.code === 404) {\r",
															"    pm.visualizer.set(`<p>No firmware found for the selected version.</p>`);\r",
															"} else {\r",
															"    // existing logic for Content-Disposition\r",
															"}\r",
															"\r",
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"deviceIds\": [\r\n    \"2829866CDE70\"\r\n  ]\r\n}\r\n",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{Url_firmwareApi}}/{{appName}}/{{appVersion}}/generate",
													"host": [
														"{{Url_firmwareApi}}"
													],
													"path": [
														"{{appName}}",
														"{{appVersion}}",
														"generate"
													]
												}
											},
											"response": []
										},
										{
											"name": "Release Copy Code-204",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 204\", function () {\r",
															"    pm.response.to.have.status(204);\r",
															"});\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"release\": false\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{Url_firmwareApi}}/{{appName}}/{{appVersion}}/release",
													"host": [
														"{{Url_firmwareApi}}"
													],
													"path": [
														"{{appName}}",
														"{{appVersion}}",
														"release"
													]
												}
											},
											"response": []
										},
										{
											"name": "get-single Copy4 Code-200",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{Url_firmwareApi}}/{{appName}}/{{appVersion}}",
													"host": [
														"{{Url_firmwareApi}}"
													],
													"path": [
														"{{appName}}",
														"{{appVersion}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Deleting Code-204",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"if (!pm.collectionVariables.get(\"appName\") || !pm.collectionVariables.get(\"appVersion\")) {\r",
															"    throw new Error(\"appName or appVersion is missing. Please run the GET request first.\");\r",
															"}\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 204\", function () {\r",
															"    pm.response.to.have.status(204);\r",
															"});\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"criticality\": \"Optional\",\r\n  \"description\": \"tester\",\r\n  \"releaseNotesUrl\": \"https://sus.com\"\r\n}\r\n\r\n",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{Url_firmwareApi}}/{{appName}}/{{appVersion}}",
													"host": [
														"{{Url_firmwareApi}}"
													],
													"path": [
														"{{appName}}",
														"{{appVersion}}"
													],
													"query": [
														{
															"key": "appName",
															"value": "su",
															"disabled": true
														},
														{
															"key": "appVersion",
															"value": "2.5.5.1",
															"disabled": true
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "get-single Copy5 Code-404",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 404\", function () {\r",
															"    pm.response.to.have.status(404);\r",
															"});\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{Url_firmwareApi}}/{{appName}}/{{appVersion}}",
													"host": [
														"{{Url_firmwareApi}}"
													],
													"path": [
														"{{appName}}",
														"{{appVersion}}"
													]
												}
											},
											"response": []
										}
									]
								}
							]
						},
						{
							"name": "Software API",
							"item": [
								{
									"name": "Software API_win",
									"item": [
										{
											"name": "New-Software-win Code-201",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 201\", function () {\r",
															"    pm.response.to.have.status(201);\r",
															"});\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "formdata",
													"formdata": [
														{
															"key": "Name",
															"value": "snst",
															"type": "text"
														},
														{
															"key": "Version",
															"value": "{{Software_Version_win}}",
															"type": "text"
														},
														{
															"key": "Platform",
															"value": "{{Software_Platform_win}}",
															"type": "text"
														},
														{
															"key": "Criticality",
															"value": "{{criticality_Recommended}}",
															"type": "text"
														},
														{
															"key": "Description",
															"value": "{{Description}}",
															"type": "text"
														},
														{
															"key": "ReleaseNotesUrl",
															"value": "{{ReleaseNotesUrl}}",
															"type": "text"
														},
														{
															"key": "file",
															"type": "file",
															"src": "SecureNMCSystemTool_4.0.0.1_win-x64 Installer (4) (1).exe"
														}
													]
												},
												"url": {
													"raw": "{{Url_software}}software",
													"host": [
														"{{Url_software}}software"
													]
												}
											},
											"response": []
										},
										{
											"name": "all-software-win Code-200",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{Url_software}}software?name={{Software_Name}}",
													"host": [
														"{{Url_software}}software"
													],
													"query": [
														{
															"key": "name",
															"value": "{{Software_Name}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "single-software-win Code-200",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{Url_software}}software?name={{Software_Name}}&version={{Software_Version_win}}&platform={{Software_Platform_win}}",
													"host": [
														"{{Url_software}}software"
													],
													"query": [
														{
															"key": "name",
															"value": "{{Software_Name}}"
														},
														{
															"key": "version",
															"value": "{{Software_Version_win}}"
														},
														{
															"key": "platform",
															"value": "{{Software_Platform_win}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "criticality-update-win Code-204",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 204\", function () {\r",
															"    pm.response.to.have.status(204);\r",
															"});\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"criticality\": \"{{criticality_Optional}}\",\r\n  \"description\": \"{{Description}}\",\r\n  \"releaseNotesUrl\": \"{{ReleaseNotesUrl}}\"\r\n}\r\n",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{Url_software}}software/{{Software_Name}}/{{Software_Version_win}}/{{Software_Platform_win}}",
													"host": [
														"{{Url_software}}software"
													],
													"path": [
														"{{Software_Name}}",
														"{{Software_Version_win}}",
														"{{Software_Platform_win}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "download-win Code-200",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"// pm.test(\"Status is 200 and response time > 10s\", function () {\r",
															"//     pm.expect(pm.response.code).to.eql(200);\r",
															"//     pm.expect(pm.response.responseTime).to.be.above(10000); // 10,000 ms = 10 seconds\r",
															"// });\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{Url_software}}software/{{Software_Name}}/{{Software_Version_win}}/{{Software_Platform_win}}/download",
													"host": [
														"{{Url_software}}software"
													],
													"path": [
														"{{Software_Name}}",
														"{{Software_Version_win}}",
														"{{Software_Platform_win}}",
														"download"
													]
												}
											},
											"response": []
										},
										{
											"name": "win-delete Code-204",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 204\", function () {\r",
															"    pm.response.to.have.status(204);\r",
															"});\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [],
												"url": {
													"raw": "https://dit-sds-software-webapp.azurewebsites.net/api/software/{{Software_Name}}/{{Software_Version_win}}/{{Software_Platform_win}}",
													"protocol": "https",
													"host": [
														"dit-sds-software-webapp",
														"azurewebsites",
														"net"
													],
													"path": [
														"api",
														"software",
														"{{Software_Name}}",
														"{{Software_Version_win}}",
														"{{Software_Platform_win}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "check deleted-win Code-200",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{Url_software}}software?name={{Software_Name}}&version={{Software_Version_win}}&platform={{Software_Platform_win}}",
													"host": [
														"{{Url_software}}software"
													],
													"query": [
														{
															"key": "name",
															"value": "{{Software_Name}}"
														},
														{
															"key": "version",
															"value": "{{Software_Version_win}}"
														},
														{
															"key": "platform",
															"value": "{{Software_Platform_win}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "post-win Code-201",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 201\", function () {\r",
															"    pm.response.to.have.status(201);\r",
															"});\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "formdata",
													"formdata": [
														{
															"key": "Name",
															"value": "snst",
															"type": "text"
														},
														{
															"key": "Version",
															"value": "{{Software_Version_win}}",
															"type": "text"
														},
														{
															"key": "Platform",
															"value": "{{Software_Platform_win}}",
															"type": "text"
														},
														{
															"key": "Criticality",
															"value": "{{criticality_Recommended}}",
															"type": "text"
														},
														{
															"key": "Description",
															"value": "{{Description}}",
															"type": "text"
														},
														{
															"key": "ReleaseNotesUrl",
															"value": "{{ReleaseNotesUrl}}",
															"type": "text"
														},
														{
															"key": "file",
															"type": "file",
															"src": "SecureNMCSystemTool_4.0.0.1_win-x64 Installer (4) (1).exe"
														}
													]
												},
												"url": {
													"raw": "{{Url_software}}software",
													"host": [
														"{{Url_software}}software"
													]
												}
											},
											"response": []
										},
										{
											"name": "Scheduled-win Code-204",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 204\", function () {\r",
															"    pm.response.to.have.status(204);\r",
															"});\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"release\": true,\r\n  \"releaseDate\": \"{{ReleaseDate}}\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{Url_software}}software/{{Software_Name}}/{{Software_Version_win}}/{{Software_Platform_win}}/release",
													"host": [
														"{{Url_software}}software"
													],
													"path": [
														"{{Software_Name}}",
														"{{Software_Version_win}}",
														"{{Software_Platform_win}}",
														"release"
													]
												}
											},
											"response": []
										},
										{
											"name": "Scheduled-win-status Code-200",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{Url_software}}software?name={{Software_Name}}&version={{Software_Version_win}}&platform={{Software_Platform_win}}",
													"host": [
														"{{Url_software}}software"
													],
													"query": [
														{
															"key": "name",
															"value": "{{Software_Name}}"
														},
														{
															"key": "version",
															"value": "{{Software_Version_win}}"
														},
														{
															"key": "platform",
															"value": "{{Software_Platform_win}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "stagged-win Code-204",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 204\", function () {\r",
															"    pm.response.to.have.status(204);\r",
															"});\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"release\": false\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{Url_software}}software/{{Software_Name}}/{{Software_Version_win}}/{{Software_Platform_win}}/release",
													"host": [
														"{{Url_software}}software"
													],
													"path": [
														"{{Software_Name}}",
														"{{Software_Version_win}}",
														"{{Software_Platform_win}}",
														"release"
													]
												}
											},
											"response": []
										},
										{
											"name": "Stagged-win-status Code-200",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"let response = pm.response.json();\r",
															"\r",
															"// Check if response is an array and contains at least one item with releaseStatus \"Scheduled\"\r",
															"let scheduledItem = response.find(item => item.releaseStatus === \"Staged\");\r",
															"\r",
															"pm.test(\"Release status is Staged\", function () {\r",
															"    pm.expect(scheduledItem).to.not.be.undefined;\r",
															"});\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{Url_software}}software?name={{Software_Name}}&version={{Software_Version_win}}&platform={{Software_Platform_win}}",
													"host": [
														"{{Url_software}}software"
													],
													"query": [
														{
															"key": "name",
															"value": "{{Software_Name}}"
														},
														{
															"key": "version",
															"value": "{{Software_Version_win}}"
														},
														{
															"key": "platform",
															"value": "{{Software_Platform_win}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "remove-from-db-win Code-204",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 204\", function () {\r",
															"    pm.response.to.have.status(204);\r",
															"});\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [],
												"url": {
													"raw": "https://dit-sds-software-webapp.azurewebsites.net/api/software/{{Software_Name}}/{{Software_Version_win}}/{{Software_Platform_win}}",
													"protocol": "https",
													"host": [
														"dit-sds-software-webapp",
														"azurewebsites",
														"net"
													],
													"path": [
														"api",
														"software",
														"{{Software_Name}}",
														"{{Software_Version_win}}",
														"{{Software_Platform_win}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "check deleted-win Code-404",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{Url_software}}software?name={{Software_Name}}&version={{Software_Version_win}}&platform={{Software_Platform_win}}",
													"host": [
														"{{Url_software}}software"
													],
													"query": [
														{
															"key": "name",
															"value": "{{Software_Name}}"
														},
														{
															"key": "version",
															"value": "{{Software_Version_win}}"
														},
														{
															"key": "platform",
															"value": "{{Software_Platform_win}}"
														}
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Software API _osx",
									"item": [
										{
											"name": "New-Software-osx Code-201",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 201\", function () {\r",
															"    pm.response.to.have.status(201);\r",
															"});\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "formdata",
													"formdata": [
														{
															"key": "Name",
															"value": "snst",
															"type": "text"
														},
														{
															"key": "Version",
															"value": "{{Software_Version_osx}}",
															"type": "text"
														},
														{
															"key": "Platform",
															"value": "{{Software_Platform_osx}}",
															"type": "text"
														},
														{
															"key": "Criticality",
															"value": "{{criticality_Recommended}}",
															"type": "text"
														},
														{
															"key": "Description",
															"value": "{{Description}}",
															"type": "text"
														},
														{
															"key": "releaseNotesUrl",
															"value": "{{ReleaseNotesUrl}}",
															"type": "text"
														},
														{
															"key": "file",
															"type": "file",
															"src": "SecureNMCSystemTool_4.0.0.1_osx-arm64 (3).tar.gz"
														},
														{
															"key": "",
															"value": "",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{Url_software}}software",
													"host": [
														"{{Url_software}}software"
													]
												}
											},
											"response": []
										},
										{
											"name": "all software osx Code-200",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{Url_software}}software?name={{Software_Name}}",
													"host": [
														"{{Url_software}}software"
													],
													"query": [
														{
															"key": "name",
															"value": "{{Software_Name}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "single software osx Code-200",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{Url_software}}software?name={{Software_Name}}&version={{Software_Version_osx}}&platform={{Software_Platform_osx}}",
													"host": [
														"{{Url_software}}software"
													],
													"query": [
														{
															"key": "name",
															"value": "{{Software_Name}}"
														},
														{
															"key": "version",
															"value": "{{Software_Version_osx}}"
														},
														{
															"key": "platform",
															"value": "{{Software_Platform_osx}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "criticality update-osx Code-204",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 204\", function () {\r",
															"    pm.response.to.have.status(204);\r",
															"});\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"criticality\": \"{{criticality_Optional}}\",\r\n  \"description\": \"{{Description}}\",\r\n  \"releaseNotesUrl\": \"{{ReleaseNotesUrl}}\"\r\n}\r\n",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{Url_software}}software/{{Software_Name}}/{{Software_Version_osx}}/{{Software_Platform_osx}}",
													"host": [
														"{{Url_software}}software"
													],
													"path": [
														"{{Software_Name}}",
														"{{Software_Version_osx}}",
														"{{Software_Platform_osx}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "download-osx Code-200",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"// pm.test(\"Status is 200 and response time > 10s\", function () {\r",
															"//     pm.expect(pm.response.code).to.eql(200);\r",
															"//     pm.expect(pm.response.responseTime).to.be.above(10000); // 10,000 ms = 10 seconds\r",
															"// });\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{Url_software}}software/{{Software_Name}}/{{Software_Version_osx}}/{{Software_Platform_osx}}/download",
													"host": [
														"{{Url_software}}software"
													],
													"path": [
														"{{Software_Name}}",
														"{{Software_Version_osx}}",
														"{{Software_Platform_osx}}",
														"download"
													]
												}
											},
											"response": []
										},
										{
											"name": "remove from db osx Code-204",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 204\", function () {\r",
															"    pm.response.to.have.status(204);\r",
															"});\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [],
												"url": {
													"raw": "https://dit-sds-software-webapp.azurewebsites.net/api/software/{{Software_Name}}/{{Software_Version_osx}}/{{Software_Platform_osx}}",
													"protocol": "https",
													"host": [
														"dit-sds-software-webapp",
														"azurewebsites",
														"net"
													],
													"path": [
														"api",
														"software",
														"{{Software_Name}}",
														"{{Software_Version_osx}}",
														"{{Software_Platform_osx}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "check deleted-osx Code-200",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{Url_software}}software?name={{Software_Name}}&version={{Software_Version_osx}}&platform={{Software_Platform_osx}}",
													"host": [
														"{{Url_software}}software"
													],
													"query": [
														{
															"key": "name",
															"value": "{{Software_Name}}"
														},
														{
															"key": "version",
															"value": "{{Software_Version_osx}}"
														},
														{
															"key": "platform",
															"value": "{{Software_Platform_osx}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "new-software-osx2 Code-201",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 201\", function () {\r",
															"    pm.response.to.have.status(201);\r",
															"});\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "formdata",
													"formdata": [
														{
															"key": "Name",
															"value": "snst",
															"type": "text"
														},
														{
															"key": "Version",
															"value": "{{Software_Version_osx}}",
															"type": "text"
														},
														{
															"key": "Platform",
															"value": "{{Software_Platform_osx}}",
															"type": "text"
														},
														{
															"key": "Criticality",
															"value": "{{criticality_Recommended}}",
															"type": "text"
														},
														{
															"key": "Description",
															"value": "{{Description}}",
															"type": "text"
														},
														{
															"key": "releaseNotesUrl",
															"value": "{{ReleaseNotesUrl}}",
															"type": "text"
														},
														{
															"key": "file",
															"type": "file",
															"src": "SecureNMCSystemTool_4.0.0.1_osx-arm64 (3).tar.gz"
														},
														{
															"key": "",
															"value": "",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{Url_software}}software",
													"host": [
														"{{Url_software}}software"
													]
												}
											},
											"response": []
										},
										{
											"name": "Scheduled-osx Code-204",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 204\", function () {\r",
															"    pm.response.to.have.status(204);\r",
															"});\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"release\": true,\r\n  \"releaseDate\": \"2025-08-02T16:15:44.3988046Z\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{Url_software}}software/{{Software_Name}}/{{Software_Version_osx}}/{{Software_Platform_osx}}/release",
													"host": [
														"{{Url_software}}software"
													],
													"path": [
														"{{Software_Name}}",
														"{{Software_Version_osx}}",
														"{{Software_Platform_osx}}",
														"release"
													]
												}
											},
											"response": []
										},
										{
											"name": "check scheduled-osx Code-200",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"let response = pm.response.json();\r",
															"\r",
															"// Check if response is an array and contains at least one item with releaseStatus \"Scheduled\"\r",
															"let scheduledItem = response.find(item => item.releaseStatus === \"Scheduled\");\r",
															"\r",
															"pm.test(\"Release status is Scheduled\", function () {\r",
															"    pm.expect(scheduledItem).to.not.be.undefined;\r",
															"});\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{Url_software}}software?name={{Software_Name}}&version={{Software_Version_osx}}&platform={{Software_Platform_osx}}",
													"host": [
														"{{Url_software}}software"
													],
													"query": [
														{
															"key": "name",
															"value": "{{Software_Name}}"
														},
														{
															"key": "version",
															"value": "{{Software_Version_osx}}"
														},
														{
															"key": "platform",
															"value": "{{Software_Platform_osx}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "stagged-osx Code-204",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 204\", function () {\r",
															"    pm.response.to.have.status(204);\r",
															"});\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"release\": false\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{Url_software}}software/{{Software_Name}}/{{Software_Version_osx}}/{{Software_Platform_osx}}/release",
													"host": [
														"{{Url_software}}software"
													],
													"path": [
														"{{Software_Name}}",
														"{{Software_Version_osx}}",
														"{{Software_Platform_osx}}",
														"release"
													]
												}
											},
											"response": []
										},
										{
											"name": "check-stagged-osx Code-200",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"let response = pm.response.json();\r",
															"\r",
															"// Check if response is an array and contains at least one item with releaseStatus \"Scheduled\"\r",
															"let scheduledItem = response.find(item => item.releaseStatus === \"Staged\");\r",
															"\r",
															"pm.test(\"Release status is Staged\", function () {\r",
															"    pm.expect(scheduledItem).to.not.be.undefined;\r",
															"});\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{Url_software}}software?name={{Software_Name}}&version={{Software_Version_osx}}&platform={{Software_Platform_osx}}",
													"host": [
														"{{Url_software}}software"
													],
													"query": [
														{
															"key": "name",
															"value": "{{Software_Name}}"
														},
														{
															"key": "version",
															"value": "{{Software_Version_osx}}"
														},
														{
															"key": "platform",
															"value": "{{Software_Platform_osx}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "delete from db-osx Code-204",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 204\", function () {\r",
															"    pm.response.to.have.status(204);\r",
															"});\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [],
												"url": {
													"raw": "https://dit-sds-software-webapp.azurewebsites.net/api/software/{{Software_Name}}/{{Software_Version_osx}}/{{Software_Platform_osx}}",
													"protocol": "https",
													"host": [
														"dit-sds-software-webapp",
														"azurewebsites",
														"net"
													],
													"path": [
														"api",
														"software",
														"{{Software_Name}}",
														"{{Software_Version_osx}}",
														"{{Software_Platform_osx}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "check deleted-osx Code-404",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{Url_software}}software?name={{Software_Name}}&version={{Software_Version_osx}}&platform={{Software_Platform_osx}}",
													"host": [
														"{{Url_software}}software"
													],
													"query": [
														{
															"key": "name",
															"value": "{{Software_Name}}"
														},
														{
															"key": "version",
															"value": "{{Software_Version_osx}}"
														},
														{
															"key": "platform",
															"value": "{{Software_Platform_osx}}"
														}
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Software API_linux",
									"item": [
										{
											"name": "new-software-linux Code-201",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 201\", function () {\r",
															"    pm.response.to.have.status(201);\r",
															"});\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "formdata",
													"formdata": [
														{
															"key": "Name",
															"value": "snst",
															"type": "text"
														},
														{
															"key": "Version",
															"value": "{{Software_Version_linux}}",
															"type": "text"
														},
														{
															"key": "Platform",
															"value": "{{Software_Platform_linux}}",
															"type": "text"
														},
														{
															"key": "Criticality",
															"value": "{{criticality_Recommended}}",
															"type": "text"
														},
														{
															"key": "Description",
															"value": "{{Description}}",
															"type": "text"
														},
														{
															"key": "releaseNotesUrl",
															"value": "{{ReleaseNotesUrl}}",
															"type": "text"
														},
														{
															"key": "file",
															"type": "file",
															"src": "SecureNMCSystemTool_4.0.0.1_linux-x64 (2).tar.gz"
														},
														{
															"key": "",
															"value": "",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{Url_software}}software",
													"host": [
														"{{Url_software}}software"
													]
												}
											},
											"response": []
										},
										{
											"name": "all software-linux Code-200",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{Url_software}}software?name={{Software_Name}}",
													"host": [
														"{{Url_software}}software"
													],
													"query": [
														{
															"key": "name",
															"value": "{{Software_Name}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "single software-linux Code-200",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{Url_software}}software?name={{Software_Name}}&version={{Software_Version_linux}}&platform={{Software_Platform_linux}}",
													"host": [
														"{{Url_software}}software"
													],
													"query": [
														{
															"key": "name",
															"value": "{{Software_Name}}"
														},
														{
															"key": "version",
															"value": "{{Software_Version_linux}}"
														},
														{
															"key": "platform",
															"value": "{{Software_Platform_linux}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "criticality update-linux Code-204",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 204\", function () {\r",
															"    pm.response.to.have.status(204);\r",
															"});\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"criticality\": \"{{criticality_Optional}}\",\r\n  \"description\": \"{{Description}}\",\r\n  \"releaseNotesUrl\": \"{{ReleaseNotesUrl}}\"\r\n}\r\n",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{Url_software}}software/{{Software_Name}}/{{Software_Version_linux}}/{{Software_Platform_linux}}",
													"host": [
														"{{Url_software}}software"
													],
													"path": [
														"{{Software_Name}}",
														"{{Software_Version_linux}}",
														"{{Software_Platform_linux}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "download-linux Code-200",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"// pm.test(\"Status is 200 and response time > 10s\", function () {\r",
															"//     pm.expect(pm.response.code).to.eql(200);\r",
															"//     pm.expect(pm.response.responseTime).to.be.above(10000); // 10,000 ms = 10 seconds\r",
															"// });\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{Url_software}}software/{{Software_Name}}/{{Software_Version_linux}}/{{Software_Platform_linux}}/download",
													"host": [
														"{{Url_software}}software"
													],
													"path": [
														"{{Software_Name}}",
														"{{Software_Version_linux}}",
														"{{Software_Platform_linux}}",
														"download"
													]
												}
											},
											"response": []
										},
										{
											"name": "linux-delete Code-204",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 204\", function () {\r",
															"    pm.response.to.have.status(204);\r",
															"});\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [],
												"url": {
													"raw": "https://dit-sds-software-webapp.azurewebsites.net/api/software/{{Software_Name}}/{{Software_Version_linux}}/{{Software_Platform_linux}}",
													"protocol": "https",
													"host": [
														"dit-sds-software-webapp",
														"azurewebsites",
														"net"
													],
													"path": [
														"api",
														"software",
														"{{Software_Name}}",
														"{{Software_Version_linux}}",
														"{{Software_Platform_linux}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "delete-check-linux Code-200",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{Url_software}}software?name={{Software_Name}}&version={{Software_Version_linux}}&platform={{Software_Platform_linux}}",
													"host": [
														"{{Url_software}}software"
													],
													"query": [
														{
															"key": "name",
															"value": "{{Software_Name}}"
														},
														{
															"key": "version",
															"value": "{{Software_Version_linux}}"
														},
														{
															"key": "platform",
															"value": "{{Software_Platform_linux}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "New_Software-linux2 Code-201",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 201\", function () {\r",
															"    pm.response.to.have.status(201);\r",
															"});\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "formdata",
													"formdata": [
														{
															"key": "Name",
															"value": "snst",
															"type": "text"
														},
														{
															"key": "Version",
															"value": "{{Software_Version_linux}}",
															"type": "text"
														},
														{
															"key": "Platform",
															"value": "{{Software_Platform_linux}}",
															"type": "text"
														},
														{
															"key": "Criticality",
															"value": "{{criticality_Recommended}}",
															"type": "text"
														},
														{
															"key": "Description",
															"value": "{{Description}}",
															"type": "text"
														},
														{
															"key": "releaseNotesUrl",
															"value": "{{ReleaseNotesUrl}}",
															"type": "text"
														},
														{
															"key": "file",
															"type": "file",
															"src": "SecureNMCSystemTool_4.0.0.1_linux-x64 (2).tar.gz"
														},
														{
															"key": "",
															"value": "",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{Url_software}}software",
													"host": [
														"{{Url_software}}software"
													]
												}
											},
											"response": []
										},
										{
											"name": "Scheduled_linux Code-204",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 204\", function () {\r",
															"    pm.response.to.have.status(204);\r",
															"});\r",
															"\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"release\": true,\r\n  \"releaseDate\": \"2025-08-02T16:15:44.3988046Z\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{Url_software}}software/{{Software_Name}}/{{Software_Version_linux}}/{{Software_Platform_linux}}/release",
													"host": [
														"{{Url_software}}software"
													],
													"path": [
														"{{Software_Name}}",
														"{{Software_Version_linux}}",
														"{{Software_Platform_linux}}",
														"release"
													]
												}
											},
											"response": []
										},
										{
											"name": "Scheduled check linux Code-200",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"let response = pm.response.json();\r",
															"\r",
															"// Check if response is an array and contains at least one item with releaseStatus \"Scheduled\"\r",
															"let scheduledItem = response.find(item => item.releaseStatus === \"Scheduled\");\r",
															"\r",
															"pm.test(\"Release status is Scheduled\", function () {\r",
															"    pm.expect(scheduledItem).to.not.be.undefined;\r",
															"});\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{Url_software}}software?name={{Software_Name}}&version={{Software_Version_linux}}&platform={{Software_Platform_linux}}",
													"host": [
														"{{Url_software}}software"
													],
													"query": [
														{
															"key": "name",
															"value": "{{Software_Name}}"
														},
														{
															"key": "version",
															"value": "{{Software_Version_linux}}"
														},
														{
															"key": "platform",
															"value": "{{Software_Platform_linux}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "stagged-linux Code-204",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 204\", function () {\r",
															"    pm.response.to.have.status(204);\r",
															"});\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"release\": false\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{Url_software}}software/{{Software_Name}}/{{Software_Version_linux}}/{{Software_Platform_linux}}/release",
													"host": [
														"{{Url_software}}software"
													],
													"path": [
														"{{Software_Name}}",
														"{{Software_Version_linux}}",
														"{{Software_Platform_linux}}",
														"release"
													]
												}
											},
											"response": []
										},
										{
											"name": "check Stagged-linux Code-200",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"let response = pm.response.json();\r",
															"\r",
															"// Check if response is an array and contains at least one item with releaseStatus \"Scheduled\"\r",
															"let scheduledItem = response.find(item => item.releaseStatus === \"Staged\");\r",
															"\r",
															"pm.test(\"Release status is Staged\", function () {\r",
															"    pm.expect(scheduledItem).to.not.be.undefined;\r",
															"});\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{Url_software}}software?name={{Software_Name}}&version={{Software_Version_linux}}&platform={{Software_Platform_linux}}",
													"host": [
														"{{Url_software}}software"
													],
													"query": [
														{
															"key": "name",
															"value": "{{Software_Name}}"
														},
														{
															"key": "version",
															"value": "{{Software_Version_linux}}"
														},
														{
															"key": "platform",
															"value": "{{Software_Platform_linux}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "remove from db-linux Code-204",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 204\", function () {\r",
															"    pm.response.to.have.status(204);\r",
															"});\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [],
												"url": {
													"raw": "https://dit-sds-software-webapp.azurewebsites.net/api/software/{{Software_Name}}/{{Software_Version_linux}}/{{Software_Platform_linux}}",
													"protocol": "https",
													"host": [
														"dit-sds-software-webapp",
														"azurewebsites",
														"net"
													],
													"path": [
														"api",
														"software",
														"{{Software_Name}}",
														"{{Software_Version_linux}}",
														"{{Software_Platform_linux}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "check deleted-linux Code-404",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{Url_software}}software?name={{Software_Name}}&version={{Software_Version_linux}}&platform={{Software_Platform_linux}}",
													"host": [
														"{{Url_software}}software"
													],
													"query": [
														{
															"key": "name",
															"value": "{{Software_Name}}"
														},
														{
															"key": "version",
															"value": "{{Software_Version_linux}}"
														},
														{
															"key": "platform",
															"value": "{{Software_Platform_linux}}"
														}
													]
												}
											},
											"response": []
										}
									]
								}
							]
						}
					],
					"auth": {
						"type": "apikey",
						"apikey": [
							{
								"key": "value",
								"value": "{{Api_key_User}}",
								"type": "string"
							},
							{
								"key": "key",
								"value": "Authorization",
								"type": "string"
							}
						]
					},
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"packages": {},
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"packages": {},
								"exec": [
									""
								]
							}
						}
					]
				}
			],
			"auth": {
				"type": "apikey",
				"apikey": [
					{
						"key": "value",
						"value": "{{APi-key_Admin}}",
						"type": "string"
					},
					{
						"key": "key",
						"value": "Authorization",
						"type": "string"
					}
				]
			},
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"packages": {},
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"packages": {},
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "FirmwareManagerRole",
			"item": [
				{
					"name": "Role Update",
					"item": [
						{
							"name": "roles Code-200",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url_userApi}}{{user_federatedId}}/roles",
									"host": [
										"{{url_userApi}}{{user_federatedId}}"
									],
									"path": [
										"roles"
									]
								}
							},
							"response": []
						},
						{
							"name": "role Code-204",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{url_userApi}}{{user_federatedId}}/roles/{{Role_admin_role}}",
									"host": [
										"{{url_userApi}}{{user_federatedId}}"
									],
									"path": [
										"roles",
										"{{Role_admin_role}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "role Code-204",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// let selected = {\r",
											"//     firmware: \"https://dit-sds-users-webapp.azurewebsites.net/api/users\",\r",
											"//     federatedId : \"SESA823251\",\r",
											"//     roles: \"roles\",\r",
											"//     userroles:\"SoftwareManager\"\r",
											"\r",
											"\r",
											"// };\r",
											"\r",
											"// pm.collectionVariables.set(\"federatedId \", selected.federatedId );\r",
											"// pm.collectionVariables.set(\"roles\", selected.roles);\r",
											"// pm.collectionVariables.set(\"userroles\", selected.userroles);\r",
											"\r",
											"\r",
											"// // Optional: Log to console\r",
											"// console.log(\"Selected User:\", selected.federatedId , selected.roles, selected.userroles);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{url_userApi}}{{user_federatedId}}/roles/{{Role_FirmwareManager}}",
									"host": [
										"{{url_userApi}}{{user_federatedId}}"
									],
									"path": [
										"roles",
										"{{Role_FirmwareManager}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "roles Code-200 Copy",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url_userApi}}{{user_federatedId}}/roles",
									"host": [
										"{{url_userApi}}{{user_federatedId}}"
									],
									"path": [
										"roles"
									]
								}
							},
							"response": []
						}
					],
					"auth": {
						"type": "apikey",
						"apikey": [
							{
								"key": "value",
								"value": "{{APi-key_Admin}}",
								"type": "string"
							},
							{
								"key": "key",
								"value": "Authorization",
								"type": "string"
							}
						]
					},
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"packages": {},
								"exec": [
									"(function () {\r",
									"    const selectedRole = pm.collectionVariables.get(\"userroles\") || pm.collectionVariables.get(\"userroles\");\r",
									"\r",
									"    // const allowedRoles = [\r",
									"    //     \"UserRolesReader\",\r",
									"    //     \"Administrator\",\r",
									"    //     \"SoftwareManager\",\r",
									"    //     \"FirmwareManager\",\r",
									"    //     \"FirmwareReleaseManager\",\r",
									"    //     \"SoftwareReleaseManager\"\r",
									"    // ];\r",
									"\r",
									"    // if (!allowedRoles.includes(selectedRole)) {\r",
									"    //     throw new Error(`Invalid role selected: ${selectedRole}. Allowed roles are: ${allowedRoles.join(\", \")}`);\r",
									"    // }\r",
									"\r",
									"    console.log(\" Validated role:\", selectedRole);\r",
									"})();\r",
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"packages": {},
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "Test Suite",
					"item": [
						{
							"name": "User API",
							"item": [
								{
									"name": "ApiKeys all Code-200",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{Url_apikeys}}",
											"host": [
												"{{Url_apikeys}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "roles Code-403",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 403\", function () {\r",
													"    pm.response.to.have.status(403);\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url_userApi}}{{user_federatedId}}/roles",
											"host": [
												"{{url_userApi}}{{user_federatedId}}"
											],
											"path": [
												"roles"
											]
										}
									},
									"response": []
								},
								{
									"name": "role Code-403",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// let selected = {\r",
													"//     firmware: \"https://dit-sds-users-webapp.azurewebsites.net/api/users\",\r",
													"//     federatedId : \"SESA823251\",\r",
													"//     roles: \"roles\",\r",
													"//     userroles:\"SoftwareManager\"\r",
													"\r",
													"\r",
													"// };\r",
													"\r",
													"// pm.collectionVariables.set(\"federatedId \", selected.federatedId );\r",
													"// pm.collectionVariables.set(\"roles\", selected.roles);\r",
													"// pm.collectionVariables.set(\"userroles\", selected.userroles);\r",
													"\r",
													"\r",
													"// // Optional: Log to console\r",
													"// console.log(\"Selected User:\", selected.federatedId , selected.roles, selected.userroles);"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 403\", function () {\r",
													"    pm.response.to.have.status(403);\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{url_userApi}}{{user_federatedId}}/roles/{{Role_UserRolesReader}}",
											"host": [
												"{{url_userApi}}{{user_federatedId}}"
											],
											"path": [
												"roles",
												"{{Role_UserRolesReader}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "role Code-204",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 403\", function () {\r",
													"    pm.response.to.have.status(403);\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{url_userApi}}{{user_federatedId}}/roles/{{Role_UserRolesReader}}",
											"host": [
												"{{url_userApi}}{{user_federatedId}}"
											],
											"path": [
												"roles",
												"{{Role_UserRolesReader}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Device API",
							"item": [
								{
									"name": "PUT Device Details Code-403",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"let requestId = pm.response.headers.get('Request-Id');\r",
													"pm.environment.set('requestId', requestId);\r",
													"\r",
													"pm.test(\"Status code is 403\", function () {\r",
													"    pm.response.to.have.status(403);\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "[\r\n  {\r\n    \"mac\": \"282986484D84\",\r\n    \"serialNumber\": \"ZA2108005674\",\r\n    \"encryptionKey\": \"a1b2c3d4e5f60718293a4b5c6d7e8f90\"\r\n  }\r\n]"
										},
										"url": {
											"raw": "{{url_devices}}devices",
											"host": [
												"{{url_devices}}devices"
											]
										}
									},
									"response": []
								},
								{
									"name": "PUT Upload Devices Code-403",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let requestId1 = pm.response.headers.get('Request-Id');",
													"pm.environment.set('requestId1', requestId1);",
													"",
													"pm.test(\"Status code is 403\", function () {",
													"    pm.response.to.have.status(403);",
													"});",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "multipart/form-data",
												"type": "text"
											}
										],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "file",
													"type": "file",
													"src": "postman-cloud:///1f04c2db-79af-4330-abbf-52f49b7814aa"
												}
											]
										},
										"url": {
											"raw": "{{url_devices}}/devices/upload",
											"host": [
												"{{url_devices}}"
											],
											"path": [
												"devices",
												"upload"
											]
										}
									},
									"response": []
								},
								{
									"name": "GET Request Status Code-200",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url_devices}}status?requestId={{requestId}}",
											"host": [
												"{{url_devices}}status"
											],
											"query": [
												{
													"key": "requestId",
													"value": "{{requestId}}"
												}
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"packages": {},
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"packages": {},
										"exec": [
											""
										]
									}
								}
							]
						},
						{
							"name": "Firmware API Copy",
							"item": [
								{
									"name": "Firmware API_su",
									"item": [
										{
											"name": "firmware Code-403",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"// Try to get values from the response first\r",
															"try {\r",
															"    const response = pm.response.json();\r",
															"    if (response.appName) {\r",
															"        pm.environment.set(\"appName\", response.appName);\r",
															"    }\r",
															"    if (response.appVersion) {\r",
															"        pm.environment.set(\"appVersion\", response.appVersion);\r",
															"    }\r",
															"} catch (e) {\r",
															"    console.warn(\"No JSON response or missing fields.\");\r",
															"}\r",
															"\r",
															"// Fallback: get values from the request body if not already set\r",
															"if (!pm.environment.get(\"appName\") || !pm.environment.get(\"appVersion\")) {\r",
															"    try {\r",
															"        const requestBody = pm.request.body.raw ? JSON.parse(pm.request.body.raw) : {};\r",
															"        if (requestBody.appName) {\r",
															"            pm.environment.set(\"appName\", requestBody.appName);\r",
															"        }\r",
															"        if (requestBody.appVersion) {\r",
															"            pm.environment.set(\"appVersion\", requestBody.appVersion);\r",
															"        }\r",
															"    } catch (e) {\r",
															"        console.warn(\"Failed to parse request body.\");\r",
															"    }\r",
															"}\r",
															"\r",
															"pm.test(\"Status code is 201\", function () {\r",
															"    pm.response.to.have.status(201);\r",
															"});\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "formdata",
													"formdata": [
														{
															"key": "Criticality",
															"value": "{{criticality_Recommended}}",
															"type": "text"
														},
														{
															"key": "Description",
															"value": "{{Description}}",
															"type": "text"
														},
														{
															"key": "ReleaseNotesUrl",
															"value": "{{ReleaseNotesUrl}}",
															"type": "text"
														},
														{
															"key": "file",
															"type": "file",
															"src": "apc_hw21_su_3-3-0-8.nmc3"
														}
													]
												},
												"url": {
													"raw": "{{Url_firmwareApi}}",
													"host": [
														"{{Url_firmwareApi}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "get-all Code-200",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"// pm.test(\"Status code is 200\", function () {\r",
															"//     pm.response.to.have.status(200);\r",
															"// });\r",
															"\r",
															"// // // Parse response\r",
															"// // let firmwareList = pm.response.json();\r",
															"\r",
															"// // // Randomly select one firmware entry\r",
															"// // let selected = firmwareList[Math.floor(Math.random() * firmwareList.length)];\r",
															"\r",
															"// // // Set variables for next request\r",
															"// // pm.collectionVariables.set(\"appName\", selected.appName);\r",
															"// // pm.collectionVariables.set(\"appVersion\", selected.appVersion);\r",
															"\r",
															"// // console.log(\"Selected firmware:\", selected.appName, selected.appVersion);\r",
															"\r",
															"// let firmwareList = pm.response.json();\r",
															"\r",
															"// // Filter entries that have valid appName and appVersion\r",
															"// let validEntries = firmwareList.filter(fw => fw.appName && fw.appVersion);\r",
															"\r",
															"// // Randomly select one\r",
															"// let selected = validEntries[Math.floor(Math.random() * validEntries.length)];\r",
															"\r",
															"// pm.collectionVariables.set(\"appName\", selected.appName);\r",
															"// pm.collectionVariables.set(\"appVersion\", selected.appVersion);\r",
															"\r",
															"// console.log(\"Selected firmware:\", selected.appName, selected.appVersion);\r",
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{Url_firmwareApi}}",
													"host": [
														"{{Url_firmwareApi}}"
													],
													"query": [
														{
															"key": "snst",
															"value": null,
															"disabled": true
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "get-single Code-200",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{Url_firmwareApi}}/{{appName}}/{{appVersion}}",
													"host": [
														"{{Url_firmwareApi}}"
													],
													"path": [
														"{{appName}}",
														"{{appVersion}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Updating Code-403",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"if (!pm.collectionVariables.get(\"appName\") || !pm.collectionVariables.get(\"appVersion\")) {\r",
															"    throw new Error(\"appName or appVersion is missing. Please run the GET request first.\");\r",
															"}\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 204\", function () {\r",
															"    pm.response.to.have.status(204);\r",
															"});\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"criticality\": \"{{criticality_Optional}}\",\r\n  \"description\": \"{{Description}}\",\r\n  \"releaseNotesUrl\": \"{{ReleaseNotesUrl}}\"\r\n}\r\n\r\n",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{Url_firmwareApi}}/{{appName}}/{{appVersion}}",
													"host": [
														"{{Url_firmwareApi}}"
													],
													"path": [
														"{{appName}}",
														"{{appVersion}}"
													],
													"query": [
														{
															"key": "appName",
															"value": "su",
															"disabled": true
														},
														{
															"key": "appVersion",
															"value": "2.5.5.1",
															"disabled": true
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "get-single Copy 1 Code-200",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{Url_firmwareApi}}/{{appName}}/{{appVersion}}",
													"host": [
														"{{Url_firmwareApi}}"
													],
													"path": [
														"{{appName}}",
														"{{appVersion}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Updating Code-403",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"if (!pm.collectionVariables.get(\"appName\") || !pm.collectionVariables.get(\"appVersion\")) {\r",
															"    throw new Error(\"appName or appVersion is missing. Please run the GET request first.\");\r",
															"}\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 204\", function () {\r",
															"    pm.response.to.have.status(204);\r",
															"});\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"criticality\": \"{{criticality_Optional}}\",\r\n  \"description\": \"{{Description}}\",\r\n  \"releaseNotesUrl\": \"{{ReleaseNotesUrl}}\"\r\n}\r\n\r\n",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{Url_firmwareApi}}/{{appName}}/{{appVersion}}",
													"host": [
														"{{Url_firmwareApi}}"
													],
													"path": [
														"{{appName}}",
														"{{appVersion}}"
													],
													"query": [
														{
															"key": "appName",
															"value": "su",
															"disabled": true
														},
														{
															"key": "appVersion",
															"value": "2.5.5.1",
															"disabled": true
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "get-single Copy2 Code-200",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{Url_firmwareApi}}/{{appName}}/{{appVersion}}",
													"host": [
														"{{Url_firmwareApi}}"
													],
													"path": [
														"{{appName}}",
														"{{appVersion}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Release Code-204",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 403\", function () {\r",
															"    pm.response.to.have.status(403);\r",
															"});\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"release\": true,\r\n  \"releaseDate\": \"2025-06-26T06:48:50.080876Z\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{Url_firmwareApi}}/{{appName}}/{{appVersion}}/release",
													"host": [
														"{{Url_firmwareApi}}"
													],
													"path": [
														"{{appName}}",
														"{{appVersion}}",
														"release"
													]
												}
											},
											"response": []
										},
										{
											"name": "get-single Copy3 Code-200",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{Url_firmwareApi}}/{{appName}}/{{appVersion}}",
													"host": [
														"{{Url_firmwareApi}}"
													],
													"path": [
														"{{appName}}",
														"{{appVersion}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "generate Code-200",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"console.log(`Resolved URL: ${pm.variables.get(\"Url_firmwareApi\")}/${pm.collectionVariables.get(\"appName\")}/${pm.collectionVariables.get(\"appVersion\")}/generate`);\r",
															"\r",
															"\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"console.log(\"Response Body:\", pm.response.text());\r",
															"// console.log(\"Response Headers:\", pm.response.headers.toJSON());\r",
															"\r",
															"\r",
															"if (pm.response.code === 404) {\r",
															"    pm.visualizer.set(`<p>No firmware found for the selected version.</p>`);\r",
															"} else {\r",
															"    // existing logic for Content-Disposition\r",
															"}\r",
															"\r",
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"deviceIds\": [\r\n    \"2829866CDE70\"\r\n  ]\r\n}\r\n",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{Url_firmwareApi}}/{{appName}}/{{appVersion}}/generate",
													"host": [
														"{{Url_firmwareApi}}"
													],
													"path": [
														"{{appName}}",
														"{{appVersion}}",
														"generate"
													]
												}
											},
											"response": []
										},
										{
											"name": "stagged Code-204",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 403\", function () {\r",
															"    pm.response.to.have.status(403);\r",
															"});\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"release\": false\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{Url_firmwareApi}}/{{appName}}/{{appVersion}}/release",
													"host": [
														"{{Url_firmwareApi}}"
													],
													"path": [
														"{{appName}}",
														"{{appVersion}}",
														"release"
													]
												}
											},
											"response": []
										},
										{
											"name": "get-single Copy4 Code-200",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{Url_firmwareApi}}/{{appName}}/{{appVersion}}",
													"host": [
														"{{Url_firmwareApi}}"
													],
													"path": [
														"{{appName}}",
														"{{appVersion}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Deleting Code-403",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"if (!pm.collectionVariables.get(\"appName\") || !pm.collectionVariables.get(\"appVersion\")) {\r",
															"    throw new Error(\"appName or appVersion is missing. Please run the GET request first.\");\r",
															"}\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 204\", function () {\r",
															"    pm.response.to.have.status(204);\r",
															"});\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [],
												"url": {
													"raw": "{{Url_firmwareApi}}/{{appName}}/{{appVersion}}",
													"host": [
														"{{Url_firmwareApi}}"
													],
													"path": [
														"{{appName}}",
														"{{appVersion}}"
													],
													"query": [
														{
															"key": "appName",
															"value": "su",
															"disabled": true
														},
														{
															"key": "appVersion",
															"value": "2.5.5.1",
															"disabled": true
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "get-single Copy5 Code-404",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 404\", function () {\r",
															"    pm.response.to.have.status(404);\r",
															"});\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{Url_firmwareApi}}/{{appName}}/{{appVersion}}",
													"host": [
														"{{Url_firmwareApi}}"
													],
													"path": [
														"{{appName}}",
														"{{appVersion}}"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Firmware API_sy",
									"item": [
										{
											"name": "firmware Code-403",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"// Try to get values from the response first\r",
															"try {\r",
															"    const response = pm.response.json();\r",
															"    if (response.appName) {\r",
															"        pm.environment.set(\"appName\", response.appName);\r",
															"    }\r",
															"    if (response.appVersion) {\r",
															"        pm.environment.set(\"appVersion\", response.appVersion);\r",
															"    }\r",
															"} catch (e) {\r",
															"    console.warn(\"No JSON response or missing fields.\");\r",
															"}\r",
															"\r",
															"// Fallback: get values from the request body if not already set\r",
															"if (!pm.environment.get(\"appName\") || !pm.environment.get(\"appVersion\")) {\r",
															"    try {\r",
															"        const requestBody = pm.request.body.raw ? JSON.parse(pm.request.body.raw) : {};\r",
															"        if (requestBody.appName) {\r",
															"            pm.environment.set(\"appName\", requestBody.appName);\r",
															"        }\r",
															"        if (requestBody.appVersion) {\r",
															"            pm.environment.set(\"appVersion\", requestBody.appVersion);\r",
															"        }\r",
															"    } catch (e) {\r",
															"        console.warn(\"Failed to parse request body.\");\r",
															"    }\r",
															"}\r",
															"\r",
															"pm.test(\"Status code is 201\", function () {\r",
															"    pm.response.to.have.status(201);\r",
															"});\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "formdata",
													"formdata": [
														{
															"key": "Criticality",
															"value": "{{criticality_Recommended}}",
															"type": "text"
														},
														{
															"key": "Description",
															"value": "{{Description}}",
															"type": "text"
														},
														{
															"key": "ReleaseNotesUrl",
															"value": "{{ReleaseNotesUrl}}",
															"type": "text"
														},
														{
															"key": "file",
															"type": "file",
															"src": "apc_hw21_sy_2-5-0-3.nmc3"
														}
													]
												},
												"url": {
													"raw": "{{Url_firmwareApi}}",
													"host": [
														"{{Url_firmwareApi}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "get-all Code-200",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"// pm.test(\"Status code is 200\", function () {\r",
															"//     pm.response.to.have.status(200);\r",
															"// });\r",
															"\r",
															"// // // Parse response\r",
															"// // let firmwareList = pm.response.json();\r",
															"\r",
															"// // // Randomly select one firmware entry\r",
															"// // let selected = firmwareList[Math.floor(Math.random() * firmwareList.length)];\r",
															"\r",
															"// // // Set variables for next request\r",
															"// // pm.collectionVariables.set(\"appName\", selected.appName);\r",
															"// // pm.collectionVariables.set(\"appVersion\", selected.appVersion);\r",
															"\r",
															"// // console.log(\"Selected firmware:\", selected.appName, selected.appVersion);\r",
															"\r",
															"// let firmwareList = pm.response.json();\r",
															"\r",
															"// // Filter entries that have valid appName and appVersion\r",
															"// let validEntries = firmwareList.filter(fw => fw.appName && fw.appVersion);\r",
															"\r",
															"// // Randomly select one\r",
															"// let selected = validEntries[Math.floor(Math.random() * validEntries.length)];\r",
															"\r",
															"// pm.collectionVariables.set(\"appName\", selected.appName);\r",
															"// pm.collectionVariables.set(\"appVersion\", selected.appVersion);\r",
															"\r",
															"// console.log(\"Selected firmware:\", selected.appName, selected.appVersion);\r",
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{Url_firmwareApi}}",
													"host": [
														"{{Url_firmwareApi}}"
													],
													"query": [
														{
															"key": "snst",
															"value": null,
															"disabled": true
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "get-single Code-200",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{Url_firmwareApi}}/{{appName}}/{{appVersion}}",
													"host": [
														"{{Url_firmwareApi}}"
													],
													"path": [
														"{{appName}}",
														"{{appVersion}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Updating Code-403",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"if (!pm.collectionVariables.get(\"appName\") || !pm.collectionVariables.get(\"appVersion\")) {\r",
															"    throw new Error(\"appName or appVersion is missing. Please run the GET request first.\");\r",
															"}\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 204\", function () {\r",
															"    pm.response.to.have.status(204);\r",
															"});\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"criticality\": \"{{criticality_Optional}}\",\r\n  \"description\": \"{{Description}}\",\r\n  \"releaseNotesUrl\": \"{{ReleaseNotesUrl}}\"\r\n}\r\n\r\n",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{Url_firmwareApi}}/{{appName}}/{{appVersion}}",
													"host": [
														"{{Url_firmwareApi}}"
													],
													"path": [
														"{{appName}}",
														"{{appVersion}}"
													],
													"query": [
														{
															"key": "appName",
															"value": "su",
															"disabled": true
														},
														{
															"key": "appVersion",
															"value": "2.5.5.1",
															"disabled": true
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "get-single Copy 1 Code-200",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{Url_firmwareApi}}/{{appName}}/{{appVersion}}",
													"host": [
														"{{Url_firmwareApi}}"
													],
													"path": [
														"{{appName}}",
														"{{appVersion}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Updating Code-403",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"if (!pm.collectionVariables.get(\"appName\") || !pm.collectionVariables.get(\"appVersion\")) {\r",
															"    throw new Error(\"appName or appVersion is missing. Please run the GET request first.\");\r",
															"}\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 204\", function () {\r",
															"    pm.response.to.have.status(204);\r",
															"});\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"criticality\": \"{{criticality_Optional}}\",\r\n  \"description\": \"{{Description}}\",\r\n  \"releaseNotesUrl\": \"{{ReleaseNotesUrl}}\"\r\n}\r\n\r\n",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{Url_firmwareApi}}/{{appName}}/{{appVersion}}",
													"host": [
														"{{Url_firmwareApi}}"
													],
													"path": [
														"{{appName}}",
														"{{appVersion}}"
													],
													"query": [
														{
															"key": "appName",
															"value": "su",
															"disabled": true
														},
														{
															"key": "appVersion",
															"value": "2.5.5.1",
															"disabled": true
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "get-single Copy2 Code-200",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{Url_firmwareApi}}/{{appName}}/{{appVersion}}",
													"host": [
														"{{Url_firmwareApi}}"
													],
													"path": [
														"{{appName}}",
														"{{appVersion}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Release Code-204",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 403\", function () {\r",
															"    pm.response.to.have.status(403);\r",
															"});\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"release\": true,\r\n  \"releaseDate\": \"2025-06-26T06:48:50.080876Z\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{Url_firmwareApi}}/{{appName}}/{{appVersion}}/release",
													"host": [
														"{{Url_firmwareApi}}"
													],
													"path": [
														"{{appName}}",
														"{{appVersion}}",
														"release"
													]
												}
											},
											"response": []
										},
										{
											"name": "get-single Copy3 Code-200",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{Url_firmwareApi}}/{{appName}}/{{appVersion}}",
													"host": [
														"{{Url_firmwareApi}}"
													],
													"path": [
														"{{appName}}",
														"{{appVersion}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "generate Code-200",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"console.log(`Resolved URL: ${pm.variables.get(\"Url_firmwareApi\")}/${pm.collectionVariables.get(\"appName\")}/${pm.collectionVariables.get(\"appVersion\")}/generate`);\r",
															"\r",
															"\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"console.log(\"Response Body:\", pm.response.text());\r",
															"// console.log(\"Response Headers:\", pm.response.headers.toJSON());\r",
															"\r",
															"\r",
															"if (pm.response.code === 404) {\r",
															"    pm.visualizer.set(`<p>No firmware found for the selected version.</p>`);\r",
															"} else {\r",
															"    // existing logic for Content-Disposition\r",
															"}\r",
															"\r",
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"deviceIds\": [\r\n    \"2829866CDE70\"\r\n  ]\r\n}\r\n",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{Url_firmwareApi}}/{{appName}}/{{appVersion}}/generate",
													"host": [
														"{{Url_firmwareApi}}"
													],
													"path": [
														"{{appName}}",
														"{{appVersion}}",
														"generate"
													]
												}
											},
											"response": []
										},
										{
											"name": "stagged Code-204",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 403\", function () {\r",
															"    pm.response.to.have.status(403);\r",
															"});\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"release\": false\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{Url_firmwareApi}}/{{appName}}/{{appVersion}}/release",
													"host": [
														"{{Url_firmwareApi}}"
													],
													"path": [
														"{{appName}}",
														"{{appVersion}}",
														"release"
													]
												}
											},
											"response": []
										},
										{
											"name": "get-single Copy4 Code-200",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{Url_firmwareApi}}/{{appName}}/{{appVersion}}",
													"host": [
														"{{Url_firmwareApi}}"
													],
													"path": [
														"{{appName}}",
														"{{appVersion}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Deleting Code-403",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"if (!pm.collectionVariables.get(\"appName\") || !pm.collectionVariables.get(\"appVersion\")) {\r",
															"    throw new Error(\"appName or appVersion is missing. Please run the GET request first.\");\r",
															"}\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 204\", function () {\r",
															"    pm.response.to.have.status(204);\r",
															"});\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [],
												"url": {
													"raw": "{{Url_firmwareApi}}/{{appName}}/{{appVersion}}",
													"host": [
														"{{Url_firmwareApi}}"
													],
													"path": [
														"{{appName}}",
														"{{appVersion}}"
													],
													"query": [
														{
															"key": "appName",
															"value": "su",
															"disabled": true
														},
														{
															"key": "appVersion",
															"value": "2.5.5.1",
															"disabled": true
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "get-single Copy5 Code-404",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 404\", function () {\r",
															"    pm.response.to.have.status(404);\r",
															"});\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{Url_firmwareApi}}/{{appName}}/{{appVersion}}",
													"host": [
														"{{Url_firmwareApi}}"
													],
													"path": [
														"{{appName}}",
														"{{appVersion}}"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Firmware API_sucan",
									"item": [
										{
											"name": "firmware Code-403",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"// Try to get values from the response first\r",
															"try {\r",
															"    const response = pm.response.json();\r",
															"    if (response.appName) {\r",
															"        pm.environment.set(\"appName\", response.appName);\r",
															"    }\r",
															"    if (response.appVersion) {\r",
															"        pm.environment.set(\"appVersion\", response.appVersion);\r",
															"    }\r",
															"} catch (e) {\r",
															"    console.warn(\"No JSON response or missing fields.\");\r",
															"}\r",
															"\r",
															"// Fallback: get values from the request body if not already set\r",
															"if (!pm.environment.get(\"appName\") || !pm.environment.get(\"appVersion\")) {\r",
															"    try {\r",
															"        const requestBody = pm.request.body.raw ? JSON.parse(pm.request.body.raw) : {};\r",
															"        if (requestBody.appName) {\r",
															"            pm.environment.set(\"appName\", requestBody.appName);\r",
															"        }\r",
															"        if (requestBody.appVersion) {\r",
															"            pm.environment.set(\"appVersion\", requestBody.appVersion);\r",
															"        }\r",
															"    } catch (e) {\r",
															"        console.warn(\"Failed to parse request body.\");\r",
															"    }\r",
															"}\r",
															"\r",
															"pm.test(\"Status code is 201\", function () {\r",
															"    pm.response.to.have.status(201);\r",
															"});\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "formdata",
													"formdata": [
														{
															"key": "Criticality",
															"value": "{{criticality_Recommended}}",
															"type": "text"
														},
														{
															"key": "Description",
															"value": "{{Description}}",
															"type": "text"
														},
														{
															"key": "ReleaseNotesUrl",
															"value": "{{ReleaseNotesUrl}}",
															"type": "text"
														},
														{
															"key": "file",
															"type": "file",
															"src": "apc_hw21_sucan_3-3-0-3.nmc3"
														}
													]
												},
												"url": {
													"raw": "{{Url_firmwareApi}}",
													"host": [
														"{{Url_firmwareApi}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "get-all Code-200",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"// pm.test(\"Status code is 200\", function () {\r",
															"//     pm.response.to.have.status(200);\r",
															"// });\r",
															"\r",
															"// // // Parse response\r",
															"// // let firmwareList = pm.response.json();\r",
															"\r",
															"// // // Randomly select one firmware entry\r",
															"// // let selected = firmwareList[Math.floor(Math.random() * firmwareList.length)];\r",
															"\r",
															"// // // Set variables for next request\r",
															"// // pm.collectionVariables.set(\"appName\", selected.appName);\r",
															"// // pm.collectionVariables.set(\"appVersion\", selected.appVersion);\r",
															"\r",
															"// // console.log(\"Selected firmware:\", selected.appName, selected.appVersion);\r",
															"\r",
															"// let firmwareList = pm.response.json();\r",
															"\r",
															"// // Filter entries that have valid appName and appVersion\r",
															"// let validEntries = firmwareList.filter(fw => fw.appName && fw.appVersion);\r",
															"\r",
															"// // Randomly select one\r",
															"// let selected = validEntries[Math.floor(Math.random() * validEntries.length)];\r",
															"\r",
															"// pm.collectionVariables.set(\"appName\", selected.appName);\r",
															"// pm.collectionVariables.set(\"appVersion\", selected.appVersion);\r",
															"\r",
															"// console.log(\"Selected firmware:\", selected.appName, selected.appVersion);\r",
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{Url_firmwareApi}}",
													"host": [
														"{{Url_firmwareApi}}"
													],
													"query": [
														{
															"key": "snst",
															"value": null,
															"disabled": true
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "get-single Code-200",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{Url_firmwareApi}}/{{appName}}/{{appVersion}}",
													"host": [
														"{{Url_firmwareApi}}"
													],
													"path": [
														"{{appName}}",
														"{{appVersion}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Updating Code-403",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"if (!pm.collectionVariables.get(\"appName\") || !pm.collectionVariables.get(\"appVersion\")) {\r",
															"    throw new Error(\"appName or appVersion is missing. Please run the GET request first.\");\r",
															"}\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 204\", function () {\r",
															"    pm.response.to.have.status(204);\r",
															"});\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"criticality\": \"{{criticality_Optional}}\",\r\n  \"description\": \"{{Description}}\",\r\n  \"releaseNotesUrl\": \"{{ReleaseNotesUrl}}\"\r\n}\r\n\r\n",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{Url_firmwareApi}}/{{appName}}/{{appVersion}}",
													"host": [
														"{{Url_firmwareApi}}"
													],
													"path": [
														"{{appName}}",
														"{{appVersion}}"
													],
													"query": [
														{
															"key": "appName",
															"value": "su",
															"disabled": true
														},
														{
															"key": "appVersion",
															"value": "2.5.5.1",
															"disabled": true
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "get-single Copy 1 Code-200",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{Url_firmwareApi}}/{{appName}}/{{appVersion}}",
													"host": [
														"{{Url_firmwareApi}}"
													],
													"path": [
														"{{appName}}",
														"{{appVersion}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Updating Code-403",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"if (!pm.collectionVariables.get(\"appName\") || !pm.collectionVariables.get(\"appVersion\")) {\r",
															"    throw new Error(\"appName or appVersion is missing. Please run the GET request first.\");\r",
															"}\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 204\", function () {\r",
															"    pm.response.to.have.status(204);\r",
															"});\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"criticality\": \"{{criticality_Optional}}\",\r\n  \"description\": \"{{Description}}\",\r\n  \"releaseNotesUrl\": \"{{ReleaseNotesUrl}}\"\r\n}\r\n\r\n",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{Url_firmwareApi}}/{{appName}}/{{appVersion}}",
													"host": [
														"{{Url_firmwareApi}}"
													],
													"path": [
														"{{appName}}",
														"{{appVersion}}"
													],
													"query": [
														{
															"key": "appName",
															"value": "su",
															"disabled": true
														},
														{
															"key": "appVersion",
															"value": "2.5.5.1",
															"disabled": true
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "get-single Copy2 Code-200",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{Url_firmwareApi}}/{{appName}}/{{appVersion}}",
													"host": [
														"{{Url_firmwareApi}}"
													],
													"path": [
														"{{appName}}",
														"{{appVersion}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Release Code-204",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 403\", function () {\r",
															"    pm.response.to.have.status(403);\r",
															"});\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"release\": true,\r\n  \"releaseDate\": \"2025-06-26T06:48:50.080876Z\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{Url_firmwareApi}}/{{appName}}/{{appVersion}}/release",
													"host": [
														"{{Url_firmwareApi}}"
													],
													"path": [
														"{{appName}}",
														"{{appVersion}}",
														"release"
													]
												}
											},
											"response": []
										},
										{
											"name": "get-single Copy3 Code-200",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{Url_firmwareApi}}/{{appName}}/{{appVersion}}",
													"host": [
														"{{Url_firmwareApi}}"
													],
													"path": [
														"{{appName}}",
														"{{appVersion}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "generate Code-200",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"console.log(`Resolved URL: ${pm.variables.get(\"Url_firmwareApi\")}/${pm.collectionVariables.get(\"appName\")}/${pm.collectionVariables.get(\"appVersion\")}/generate`);\r",
															"\r",
															"\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"console.log(\"Response Body:\", pm.response.text());\r",
															"// console.log(\"Response Headers:\", pm.response.headers.toJSON());\r",
															"\r",
															"\r",
															"if (pm.response.code === 404) {\r",
															"    pm.visualizer.set(`<p>No firmware found for the selected version.</p>`);\r",
															"} else {\r",
															"    // existing logic for Content-Disposition\r",
															"}\r",
															"\r",
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"deviceIds\": [\r\n    \"2829866CDE70\"\r\n  ]\r\n}\r\n",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{Url_firmwareApi}}/{{appName}}/{{appVersion}}/generate",
													"host": [
														"{{Url_firmwareApi}}"
													],
													"path": [
														"{{appName}}",
														"{{appVersion}}",
														"generate"
													]
												}
											},
											"response": []
										},
										{
											"name": "stagged Code-204",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 403\", function () {\r",
															"    pm.response.to.have.status(403);\r",
															"});\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"release\": false\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{Url_firmwareApi}}/{{appName}}/{{appVersion}}/release",
													"host": [
														"{{Url_firmwareApi}}"
													],
													"path": [
														"{{appName}}",
														"{{appVersion}}",
														"release"
													]
												}
											},
											"response": []
										},
										{
											"name": "get-single Copy4 Code-200",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{Url_firmwareApi}}/{{appName}}/{{appVersion}}",
													"host": [
														"{{Url_firmwareApi}}"
													],
													"path": [
														"{{appName}}",
														"{{appVersion}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Deleting Code-403",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"if (!pm.collectionVariables.get(\"appName\") || !pm.collectionVariables.get(\"appVersion\")) {\r",
															"    throw new Error(\"appName or appVersion is missing. Please run the GET request first.\");\r",
															"}\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 204\", function () {\r",
															"    pm.response.to.have.status(204);\r",
															"});\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [],
												"url": {
													"raw": "{{Url_firmwareApi}}/{{appName}}/{{appVersion}}",
													"host": [
														"{{Url_firmwareApi}}"
													],
													"path": [
														"{{appName}}",
														"{{appVersion}}"
													],
													"query": [
														{
															"key": "appName",
															"value": "su",
															"disabled": true
														},
														{
															"key": "appVersion",
															"value": "2.5.5.1",
															"disabled": true
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "get-single Copy5 Code-404",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 404\", function () {\r",
															"    pm.response.to.have.status(404);\r",
															"});\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{Url_firmwareApi}}/{{appName}}/{{appVersion}}",
													"host": [
														"{{Url_firmwareApi}}"
													],
													"path": [
														"{{appName}}",
														"{{appVersion}}"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Firmware API_rpdu2g",
									"item": [
										{
											"name": "firmware Code-403",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"// Try to get values from the response first\r",
															"try {\r",
															"    const response = pm.response.json();\r",
															"    if (response.appName) {\r",
															"        pm.environment.set(\"appName\", response.appName);\r",
															"    }\r",
															"    if (response.appVersion) {\r",
															"        pm.environment.set(\"appVersion\", response.appVersion);\r",
															"    }\r",
															"} catch (e) {\r",
															"    console.warn(\"No JSON response or missing fields.\");\r",
															"}\r",
															"\r",
															"// Fallback: get values from the request body if not already set\r",
															"if (!pm.environment.get(\"appName\") || !pm.environment.get(\"appVersion\")) {\r",
															"    try {\r",
															"        const requestBody = pm.request.body.raw ? JSON.parse(pm.request.body.raw) : {};\r",
															"        if (requestBody.appName) {\r",
															"            pm.environment.set(\"appName\", requestBody.appName);\r",
															"        }\r",
															"        if (requestBody.appVersion) {\r",
															"            pm.environment.set(\"appVersion\", requestBody.appVersion);\r",
															"        }\r",
															"    } catch (e) {\r",
															"        console.warn(\"Failed to parse request body.\");\r",
															"    }\r",
															"}\r",
															"\r",
															"pm.test(\"Status code is 201\", function () {\r",
															"    pm.response.to.have.status(201);\r",
															"});\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "formdata",
													"formdata": [
														{
															"key": "Criticality",
															"value": "{{criticality_Recommended}}",
															"type": "text"
														},
														{
															"key": "Description",
															"value": "{{Description}}",
															"type": "text"
														},
														{
															"key": "ReleaseNotesUrl",
															"value": "{{ReleaseNotesUrl}}",
															"type": "text"
														},
														{
															"key": "file",
															"type": "file",
															"src": "apc_hw21_rpdu2g_3-2-1-2.nmc3"
														}
													]
												},
												"url": {
													"raw": "{{Url_firmwareApi}}",
													"host": [
														"{{Url_firmwareApi}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "get-all Code-200",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"// pm.test(\"Status code is 200\", function () {\r",
															"//     pm.response.to.have.status(200);\r",
															"// });\r",
															"\r",
															"// // // Parse response\r",
															"// // let firmwareList = pm.response.json();\r",
															"\r",
															"// // // Randomly select one firmware entry\r",
															"// // let selected = firmwareList[Math.floor(Math.random() * firmwareList.length)];\r",
															"\r",
															"// // // Set variables for next request\r",
															"// // pm.collectionVariables.set(\"appName\", selected.appName);\r",
															"// // pm.collectionVariables.set(\"appVersion\", selected.appVersion);\r",
															"\r",
															"// // console.log(\"Selected firmware:\", selected.appName, selected.appVersion);\r",
															"\r",
															"// let firmwareList = pm.response.json();\r",
															"\r",
															"// // Filter entries that have valid appName and appVersion\r",
															"// let validEntries = firmwareList.filter(fw => fw.appName && fw.appVersion);\r",
															"\r",
															"// // Randomly select one\r",
															"// let selected = validEntries[Math.floor(Math.random() * validEntries.length)];\r",
															"\r",
															"// pm.collectionVariables.set(\"appName\", selected.appName);\r",
															"// pm.collectionVariables.set(\"appVersion\", selected.appVersion);\r",
															"\r",
															"// console.log(\"Selected firmware:\", selected.appName, selected.appVersion);\r",
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{Url_firmwareApi}}",
													"host": [
														"{{Url_firmwareApi}}"
													],
													"query": [
														{
															"key": "snst",
															"value": null,
															"disabled": true
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "get-single Code-200",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{Url_firmwareApi}}/{{appName}}/{{appVersion}}",
													"host": [
														"{{Url_firmwareApi}}"
													],
													"path": [
														"{{appName}}",
														"{{appVersion}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Updating Code-403",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"if (!pm.collectionVariables.get(\"appName\") || !pm.collectionVariables.get(\"appVersion\")) {\r",
															"    throw new Error(\"appName or appVersion is missing. Please run the GET request first.\");\r",
															"}\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 204\", function () {\r",
															"    pm.response.to.have.status(204);\r",
															"});\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"criticality\": \"{{criticality_Optional}}\",\r\n  \"description\": \"{{Description}}\",\r\n  \"releaseNotesUrl\": \"{{ReleaseNotesUrl}}\"\r\n}\r\n\r\n",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{Url_firmwareApi}}/{{appName}}/{{appVersion}}",
													"host": [
														"{{Url_firmwareApi}}"
													],
													"path": [
														"{{appName}}",
														"{{appVersion}}"
													],
													"query": [
														{
															"key": "appName",
															"value": "su",
															"disabled": true
														},
														{
															"key": "appVersion",
															"value": "2.5.5.1",
															"disabled": true
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "get-single Copy 1 Code-200",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{Url_firmwareApi}}/{{appName}}/{{appVersion}}",
													"host": [
														"{{Url_firmwareApi}}"
													],
													"path": [
														"{{appName}}",
														"{{appVersion}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Updating Code-403",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"if (!pm.collectionVariables.get(\"appName\") || !pm.collectionVariables.get(\"appVersion\")) {\r",
															"    throw new Error(\"appName or appVersion is missing. Please run the GET request first.\");\r",
															"}\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 204\", function () {\r",
															"    pm.response.to.have.status(204);\r",
															"});\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"criticality\": \"{{criticality_Optional}}\",\r\n  \"description\": \"{{Description}}\",\r\n  \"releaseNotesUrl\": \"{{ReleaseNotesUrl}}\"\r\n}\r\n\r\n",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{Url_firmwareApi}}/{{appName}}/{{appVersion}}",
													"host": [
														"{{Url_firmwareApi}}"
													],
													"path": [
														"{{appName}}",
														"{{appVersion}}"
													],
													"query": [
														{
															"key": "appName",
															"value": "su",
															"disabled": true
														},
														{
															"key": "appVersion",
															"value": "2.5.5.1",
															"disabled": true
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "get-single Copy2 Code-200",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{Url_firmwareApi}}/{{appName}}/{{appVersion}}",
													"host": [
														"{{Url_firmwareApi}}"
													],
													"path": [
														"{{appName}}",
														"{{appVersion}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Release Code-204",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 403\", function () {\r",
															"    pm.response.to.have.status(403);\r",
															"});\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"release\": true,\r\n  \"releaseDate\": \"2025-06-26T06:48:50.080876Z\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{Url_firmwareApi}}/{{appName}}/{{appVersion}}/release",
													"host": [
														"{{Url_firmwareApi}}"
													],
													"path": [
														"{{appName}}",
														"{{appVersion}}",
														"release"
													]
												}
											},
											"response": []
										},
										{
											"name": "get-single Copy3 Code-200",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{Url_firmwareApi}}/{{appName}}/{{appVersion}}",
													"host": [
														"{{Url_firmwareApi}}"
													],
													"path": [
														"{{appName}}",
														"{{appVersion}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "generate Code-200",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"console.log(`Resolved URL: ${pm.variables.get(\"Url_firmwareApi\")}/${pm.collectionVariables.get(\"appName\")}/${pm.collectionVariables.get(\"appVersion\")}/generate`);\r",
															"\r",
															"\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"console.log(\"Response Body:\", pm.response.text());\r",
															"// console.log(\"Response Headers:\", pm.response.headers.toJSON());\r",
															"\r",
															"\r",
															"if (pm.response.code === 404) {\r",
															"    pm.visualizer.set(`<p>No firmware found for the selected version.</p>`);\r",
															"} else {\r",
															"    // existing logic for Content-Disposition\r",
															"}\r",
															"\r",
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"deviceIds\": [\r\n    \"2829866CDE70\"\r\n  ]\r\n}\r\n",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{Url_firmwareApi}}/{{appName}}/{{appVersion}}/generate",
													"host": [
														"{{Url_firmwareApi}}"
													],
													"path": [
														"{{appName}}",
														"{{appVersion}}",
														"generate"
													]
												}
											},
											"response": []
										},
										{
											"name": "stagged Code-204",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 403\", function () {\r",
															"    pm.response.to.have.status(403);\r",
															"});\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"release\": false\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{Url_firmwareApi}}/{{appName}}/{{appVersion}}/release",
													"host": [
														"{{Url_firmwareApi}}"
													],
													"path": [
														"{{appName}}",
														"{{appVersion}}",
														"release"
													]
												}
											},
											"response": []
										},
										{
											"name": "get-single Copy4 Code-200",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{Url_firmwareApi}}/{{appName}}/{{appVersion}}",
													"host": [
														"{{Url_firmwareApi}}"
													],
													"path": [
														"{{appName}}",
														"{{appVersion}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Deleting Code-403",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"if (!pm.collectionVariables.get(\"appName\") || !pm.collectionVariables.get(\"appVersion\")) {\r",
															"    throw new Error(\"appName or appVersion is missing. Please run the GET request first.\");\r",
															"}\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 204\", function () {\r",
															"    pm.response.to.have.status(204);\r",
															"});\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [],
												"url": {
													"raw": "{{Url_firmwareApi}}/{{appName}}/{{appVersion}}",
													"host": [
														"{{Url_firmwareApi}}"
													],
													"path": [
														"{{appName}}",
														"{{appVersion}}"
													],
													"query": [
														{
															"key": "appName",
															"value": "su",
															"disabled": true
														},
														{
															"key": "appVersion",
															"value": "2.5.5.1",
															"disabled": true
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "get-single Copy5 Code-404",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 404\", function () {\r",
															"    pm.response.to.have.status(404);\r",
															"});\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{Url_firmwareApi}}/{{appName}}/{{appVersion}}",
													"host": [
														"{{Url_firmwareApi}}"
													],
													"path": [
														"{{appName}}",
														"{{appVersion}}"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Firmware API_eu1p",
									"item": [
										{
											"name": "firmware Code-403",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"// Try to get values from the response first\r",
															"try {\r",
															"    const response = pm.response.json();\r",
															"    if (response.appName) {\r",
															"        pm.environment.set(\"appName\", response.appName);\r",
															"    }\r",
															"    if (response.appVersion) {\r",
															"        pm.environment.set(\"appVersion\", response.appVersion);\r",
															"    }\r",
															"} catch (e) {\r",
															"    console.warn(\"No JSON response or missing fields.\");\r",
															"}\r",
															"\r",
															"// Fallback: get values from the request body if not already set\r",
															"if (!pm.environment.get(\"appName\") || !pm.environment.get(\"appVersion\")) {\r",
															"    try {\r",
															"        const requestBody = pm.request.body.raw ? JSON.parse(pm.request.body.raw) : {};\r",
															"        if (requestBody.appName) {\r",
															"            pm.environment.set(\"appName\", requestBody.appName);\r",
															"        }\r",
															"        if (requestBody.appVersion) {\r",
															"            pm.environment.set(\"appVersion\", requestBody.appVersion);\r",
															"        }\r",
															"    } catch (e) {\r",
															"        console.warn(\"Failed to parse request body.\");\r",
															"    }\r",
															"}\r",
															"\r",
															"pm.test(\"Status code is 201\", function () {\r",
															"    pm.response.to.have.status(201);\r",
															"});\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "formdata",
													"formdata": [
														{
															"key": "Criticality",
															"value": "{{criticality_Recommended}}",
															"type": "text"
														},
														{
															"key": "Description",
															"value": "{{Description}}",
															"type": "text"
														},
														{
															"key": "ReleaseNotesUrl",
															"value": "{{ReleaseNotesUrl}}",
															"type": "text"
														},
														{
															"key": "file",
															"type": "file",
															"src": "apc_hw21_eu1p_3-2-0-5.nmc3"
														}
													]
												},
												"url": {
													"raw": "{{Url_firmwareApi}}",
													"host": [
														"{{Url_firmwareApi}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "get-all Code-200",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"// pm.test(\"Status code is 200\", function () {\r",
															"//     pm.response.to.have.status(200);\r",
															"// });\r",
															"\r",
															"// // // Parse response\r",
															"// // let firmwareList = pm.response.json();\r",
															"\r",
															"// // // Randomly select one firmware entry\r",
															"// // let selected = firmwareList[Math.floor(Math.random() * firmwareList.length)];\r",
															"\r",
															"// // // Set variables for next request\r",
															"// // pm.collectionVariables.set(\"appName\", selected.appName);\r",
															"// // pm.collectionVariables.set(\"appVersion\", selected.appVersion);\r",
															"\r",
															"// // console.log(\"Selected firmware:\", selected.appName, selected.appVersion);\r",
															"\r",
															"// let firmwareList = pm.response.json();\r",
															"\r",
															"// // Filter entries that have valid appName and appVersion\r",
															"// let validEntries = firmwareList.filter(fw => fw.appName && fw.appVersion);\r",
															"\r",
															"// // Randomly select one\r",
															"// let selected = validEntries[Math.floor(Math.random() * validEntries.length)];\r",
															"\r",
															"// pm.collectionVariables.set(\"appName\", selected.appName);\r",
															"// pm.collectionVariables.set(\"appVersion\", selected.appVersion);\r",
															"\r",
															"// console.log(\"Selected firmware:\", selected.appName, selected.appVersion);\r",
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{Url_firmwareApi}}",
													"host": [
														"{{Url_firmwareApi}}"
													],
													"query": [
														{
															"key": "snst",
															"value": null,
															"disabled": true
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "get-single Code-200",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{Url_firmwareApi}}/{{appName}}/{{appVersion}}",
													"host": [
														"{{Url_firmwareApi}}"
													],
													"path": [
														"{{appName}}",
														"{{appVersion}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Updating Code-403",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"if (!pm.collectionVariables.get(\"appName\") || !pm.collectionVariables.get(\"appVersion\")) {\r",
															"    throw new Error(\"appName or appVersion is missing. Please run the GET request first.\");\r",
															"}\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 204\", function () {\r",
															"    pm.response.to.have.status(204);\r",
															"});\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"criticality\": \"{{criticality_Optional}}\",\r\n  \"description\": \"{{Description}}\",\r\n  \"releaseNotesUrl\": \"{{ReleaseNotesUrl}}\"\r\n}\r\n\r\n",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{Url_firmwareApi}}/{{appName}}/{{appVersion}}",
													"host": [
														"{{Url_firmwareApi}}"
													],
													"path": [
														"{{appName}}",
														"{{appVersion}}"
													],
													"query": [
														{
															"key": "appName",
															"value": "su",
															"disabled": true
														},
														{
															"key": "appVersion",
															"value": "2.5.5.1",
															"disabled": true
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "get-single Copy 1 Code-200",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{Url_firmwareApi}}/{{appName}}/{{appVersion}}",
													"host": [
														"{{Url_firmwareApi}}"
													],
													"path": [
														"{{appName}}",
														"{{appVersion}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Updating Code-403",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"if (!pm.collectionVariables.get(\"appName\") || !pm.collectionVariables.get(\"appVersion\")) {\r",
															"    throw new Error(\"appName or appVersion is missing. Please run the GET request first.\");\r",
															"}\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 204\", function () {\r",
															"    pm.response.to.have.status(204);\r",
															"});\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"criticality\": \"{{criticality_Optional}}\",\r\n  \"description\": \"{{Description}}\",\r\n  \"releaseNotesUrl\": \"{{ReleaseNotesUrl}}\"\r\n}\r\n\r\n",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{Url_firmwareApi}}/{{appName}}/{{appVersion}}",
													"host": [
														"{{Url_firmwareApi}}"
													],
													"path": [
														"{{appName}}",
														"{{appVersion}}"
													],
													"query": [
														{
															"key": "appName",
															"value": "su",
															"disabled": true
														},
														{
															"key": "appVersion",
															"value": "2.5.5.1",
															"disabled": true
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "get-single Copy2 Code-200",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{Url_firmwareApi}}/{{appName}}/{{appVersion}}",
													"host": [
														"{{Url_firmwareApi}}"
													],
													"path": [
														"{{appName}}",
														"{{appVersion}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Release Code-204",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 403\", function () {\r",
															"    pm.response.to.have.status(403);\r",
															"});\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"release\": true,\r\n  \"releaseDate\": \"2025-06-26T06:48:50.080876Z\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{Url_firmwareApi}}/{{appName}}/{{appVersion}}/release",
													"host": [
														"{{Url_firmwareApi}}"
													],
													"path": [
														"{{appName}}",
														"{{appVersion}}",
														"release"
													]
												}
											},
											"response": []
										},
										{
											"name": "get-single Copy3 Code-200",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{Url_firmwareApi}}/{{appName}}/{{appVersion}}",
													"host": [
														"{{Url_firmwareApi}}"
													],
													"path": [
														"{{appName}}",
														"{{appVersion}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "generate Code-200",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"console.log(`Resolved URL: ${pm.variables.get(\"Url_firmwareApi\")}/${pm.collectionVariables.get(\"appName\")}/${pm.collectionVariables.get(\"appVersion\")}/generate`);\r",
															"\r",
															"\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"console.log(\"Response Body:\", pm.response.text());\r",
															"// console.log(\"Response Headers:\", pm.response.headers.toJSON());\r",
															"\r",
															"\r",
															"if (pm.response.code === 404) {\r",
															"    pm.visualizer.set(`<p>No firmware found for the selected version.</p>`);\r",
															"} else {\r",
															"    // existing logic for Content-Disposition\r",
															"}\r",
															"\r",
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"deviceIds\": [\r\n    \"2829866CDE70\"\r\n  ]\r\n}\r\n",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{Url_firmwareApi}}/{{appName}}/{{appVersion}}/generate",
													"host": [
														"{{Url_firmwareApi}}"
													],
													"path": [
														"{{appName}}",
														"{{appVersion}}",
														"generate"
													]
												}
											},
											"response": []
										},
										{
											"name": "stagged Code-204",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 403\", function () {\r",
															"    pm.response.to.have.status(403);\r",
															"});\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"release\": false\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{Url_firmwareApi}}/{{appName}}/{{appVersion}}/release",
													"host": [
														"{{Url_firmwareApi}}"
													],
													"path": [
														"{{appName}}",
														"{{appVersion}}",
														"release"
													]
												}
											},
											"response": []
										},
										{
											"name": "get-single Copy4 Code-200",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{Url_firmwareApi}}/{{appName}}/{{appVersion}}",
													"host": [
														"{{Url_firmwareApi}}"
													],
													"path": [
														"{{appName}}",
														"{{appVersion}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Deleting Code-403",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"if (!pm.collectionVariables.get(\"appName\") || !pm.collectionVariables.get(\"appVersion\")) {\r",
															"    throw new Error(\"appName or appVersion is missing. Please run the GET request first.\");\r",
															"}\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 204\", function () {\r",
															"    pm.response.to.have.status(204);\r",
															"});\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [],
												"url": {
													"raw": "{{Url_firmwareApi}}/{{appName}}/{{appVersion}}",
													"host": [
														"{{Url_firmwareApi}}"
													],
													"path": [
														"{{appName}}",
														"{{appVersion}}"
													],
													"query": [
														{
															"key": "appName",
															"value": "su",
															"disabled": true
														},
														{
															"key": "appVersion",
															"value": "2.5.5.1",
															"disabled": true
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "get-single Copy5 Code-404",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 404\", function () {\r",
															"    pm.response.to.have.status(404);\r",
															"});\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{Url_firmwareApi}}/{{appName}}/{{appVersion}}",
													"host": [
														"{{Url_firmwareApi}}"
													],
													"path": [
														"{{appName}}",
														"{{appVersion}}"
													]
												}
											},
											"response": []
										}
									]
								}
							]
						},
						{
							"name": "Software API",
							"item": [
								{
									"name": "win",
									"item": [
										{
											"name": "Software API_win- stagged",
											"item": [
												{
													"name": "single-software-win Code-200",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Response is exactly an empty array\", function () {\r",
																	"    pm.expect(pm.response.text()).to.eql(\"[]\");\r",
																	"});\r",
																	""
																],
																"type": "text/javascript",
																"packages": {}
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{Url_software}}software?name={{Software_Name}}&version={{Software-win-stagged}}&platform={{Software_Platform_win}}",
															"host": [
																"{{Url_software}}software"
															],
															"query": [
																{
																	"key": "name",
																	"value": "{{Software_Name}}"
																},
																{
																	"key": "version",
																	"value": "{{Software-win-stagged}}"
																},
																{
																	"key": "platform",
																	"value": "{{Software_Platform_win}}"
																}
															]
														}
													},
													"response": []
												},
												{
													"name": "all-software-win Code-200",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});\r",
																	""
																],
																"type": "text/javascript",
																"packages": {}
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{Url_software}}software?name={{Software_Name}}",
															"host": [
																"{{Url_software}}software"
															],
															"query": [
																{
																	"key": "name",
																	"value": "{{Software_Name}}"
																}
															]
														}
													},
													"response": []
												},
												{
													"name": "New-Software-win Code-403 Copy",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 403\", function () {\r",
																	"    pm.response.to.have.status(403);\r",
																	"});\r",
																	""
																],
																"type": "text/javascript",
																"packages": {}
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [],
														"body": {
															"mode": "formdata",
															"formdata": [
																{
																	"key": "Name",
																	"value": "snst",
																	"type": "text"
																},
																{
																	"key": "Version",
																	"value": "{{Software_Version_win}}",
																	"type": "text"
																},
																{
																	"key": "Platform",
																	"value": "{{Software_Platform_win}}",
																	"type": "text"
																},
																{
																	"key": "Criticality",
																	"value": "{{criticality_Recommended}}",
																	"type": "text"
																},
																{
																	"key": "Description",
																	"value": "{{Description}}",
																	"type": "text"
																},
																{
																	"key": "ReleaseNotesUrl",
																	"value": "{{ReleaseNotesUrl}}",
																	"type": "text"
																},
																{
																	"key": "file",
																	"type": "file",
																	"src": "SecureNMCSystemTool_4.0.0.1_win-x64 Installer (4) (1).exe"
																}
															]
														},
														"url": {
															"raw": "{{Url_software}}software",
															"host": [
																"{{Url_software}}software"
															]
														}
													},
													"response": []
												},
												{
													"name": "criticality-update-win Code-403",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 403\", function () {\r",
																	"    pm.response.to.have.status(403);\r",
																	"});\r",
																	""
																],
																"type": "text/javascript",
																"packages": {}
															}
														}
													],
													"request": {
														"method": "PUT",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\r\n  \"criticality\": \"{{criticality_Optional}}\",\r\n  \"description\": \"{{Description}}\",\r\n  \"releaseNotesUrl\": \"{{ReleaseNotesUrl}}\"\r\n}\r\n",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{Url_software}}software/{{Software_Name}}/{{Software-win-stagged}}/{{Software_Platform_win}}",
															"host": [
																"{{Url_software}}software"
															],
															"path": [
																"{{Software_Name}}",
																"{{Software-win-stagged}}",
																"{{Software_Platform_win}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "download-win Code-404",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 404\", function () {\r",
																	"    pm.response.to.have.status(404);\r",
																	"});\r",
																	"// pm.test(\"Status is 200 and response time > 10s\", function () {\r",
																	"//     pm.expect(pm.response.code).to.eql(200);\r",
																	"//     pm.expect(pm.response.responseTime).to.be.above(10000); // 10,000 ms = 10 seconds\r",
																	"// });\r",
																	""
																],
																"type": "text/javascript",
																"packages": {}
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{Url_software}}software/{{Software_Name}}/{{Software-win-stagged}}/{{Software_Platform_win}}/download",
															"host": [
																"{{Url_software}}software"
															],
															"path": [
																"{{Software_Name}}",
																"{{Software-win-stagged}}",
																"{{Software_Platform_win}}",
																"download"
															]
														}
													},
													"response": []
												},
												{
													"name": "win-delete Code-403",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 403\", function () {\r",
																	"    pm.response.to.have.status(403);\r",
																	"});\r",
																	""
																],
																"type": "text/javascript",
																"packages": {}
															}
														}
													],
													"request": {
														"method": "DELETE",
														"header": [],
														"url": {
															"raw": "https://dit-sds-software-webapp.azurewebsites.net/api/software/{{Software_Name}}/{{Software-win-stagged}}/{{Software_Platform_win}}",
															"protocol": "https",
															"host": [
																"dit-sds-software-webapp",
																"azurewebsites",
																"net"
															],
															"path": [
																"api",
																"software",
																"{{Software_Name}}",
																"{{Software-win-stagged}}",
																"{{Software_Platform_win}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "check deleted-win Code-200",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});\r",
																	"pm.test(\"Response is exactly an empty array\", function () {\r",
																	"    pm.expect(pm.response.text()).to.eql(\"[]\");\r",
																	"});\r",
																	""
																],
																"type": "text/javascript",
																"packages": {}
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{Url_software}}software?name={{Software_Name}}&version={{Software-win-stagged}}&platform={{Software_Platform_win}}",
															"host": [
																"{{Url_software}}software"
															],
															"query": [
																{
																	"key": "name",
																	"value": "{{Software_Name}}"
																},
																{
																	"key": "version",
																	"value": "{{Software-win-stagged}}"
																},
																{
																	"key": "platform",
																	"value": "{{Software_Platform_win}}"
																}
															]
														}
													},
													"response": []
												},
												{
													"name": "Scheduled-win Code-403",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 403\", function () {\r",
																	"    pm.response.to.have.status(403);\r",
																	"});\r",
																	""
																],
																"type": "text/javascript",
																"packages": {}
															}
														}
													],
													"request": {
														"method": "PUT",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\r\n  \"release\": true,\r\n  \"releaseDate\": \"{{ReleaseDate}}\"\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{Url_software}}software/{{Software_Name}}/{{Software-win-stagged}}/{{Software_Platform_win}}/release",
															"host": [
																"{{Url_software}}software"
															],
															"path": [
																"{{Software_Name}}",
																"{{Software-win-stagged}}",
																"{{Software_Platform_win}}",
																"release"
															]
														}
													},
													"response": []
												},
												{
													"name": "Scheduled-win-status Code-200",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Response is exactly an empty array\", function () {\r",
																	"    pm.expect(pm.response.text()).to.eql(\"[]\");\r",
																	"});"
																],
																"type": "text/javascript",
																"packages": {}
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{Url_software}}software?name={{Software_Name}}&version={{Software-win-stagged}}&platform={{Software_Platform_win}}",
															"host": [
																"{{Url_software}}software"
															],
															"query": [
																{
																	"key": "name",
																	"value": "{{Software_Name}}"
																},
																{
																	"key": "version",
																	"value": "{{Software-win-stagged}}"
																},
																{
																	"key": "platform",
																	"value": "{{Software_Platform_win}}"
																}
															]
														}
													},
													"response": []
												},
												{
													"name": "stagged-win Code-403",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 403\", function () {\r",
																	"    pm.response.to.have.status(403);\r",
																	"});\r",
																	""
																],
																"type": "text/javascript",
																"packages": {}
															}
														}
													],
													"request": {
														"method": "PUT",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\r\n  \"release\": false\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{Url_software}}software/{{Software_Name}}/{{Software-win-stagged}}/{{Software_Platform_win}}/release",
															"host": [
																"{{Url_software}}software"
															],
															"path": [
																"{{Software_Name}}",
																"{{Software-win-stagged}}",
																"{{Software_Platform_win}}",
																"release"
															]
														}
													},
													"response": []
												},
												{
													"name": "Stagged-win-status Code-200",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});\r",
																	"\r",
																	"\r",
																	"pm.test(\"Response is exactly an empty array\", function () {\r",
																	"    pm.expect(pm.response.text()).to.eql(\"[]\");\r",
																	"});\r",
																	""
																],
																"type": "text/javascript",
																"packages": {}
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{Url_software}}software?name={{Software_Name}}&version={{Software-win-stagged}}&platform={{Software_Platform_win}}",
															"host": [
																"{{Url_software}}software"
															],
															"query": [
																{
																	"key": "name",
																	"value": "{{Software_Name}}"
																},
																{
																	"key": "version",
																	"value": "{{Software-win-stagged}}"
																},
																{
																	"key": "platform",
																	"value": "{{Software_Platform_win}}"
																}
															]
														}
													},
													"response": []
												},
												{
													"name": "remove-from-db-win Code-403",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 403\", function () {\r",
																	"    pm.response.to.have.status(403);\r",
																	"});\r",
																	""
																],
																"type": "text/javascript",
																"packages": {}
															}
														}
													],
													"request": {
														"method": "DELETE",
														"header": [],
														"url": {
															"raw": "https://dit-sds-software-webapp.azurewebsites.net/api/software/{{Software_Name}}/{{Software-win-stagged}}/{{Software_Platform_win}}",
															"protocol": "https",
															"host": [
																"dit-sds-software-webapp",
																"azurewebsites",
																"net"
															],
															"path": [
																"api",
																"software",
																"{{Software_Name}}",
																"{{Software-win-stagged}}",
																"{{Software_Platform_win}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "check deleted-win Code-200",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Response is exactly an empty array\", function () {\r",
																	"    pm.expect(pm.response.text()).to.eql(\"[]\");\r",
																	"});\r",
																	""
																],
																"type": "text/javascript",
																"packages": {}
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{Url_software}}software?name={{Software_Name}}&version={{Software_Version_win}}&platform={{Software_Platform_win}}",
															"host": [
																"{{Url_software}}software"
															],
															"query": [
																{
																	"key": "name",
																	"value": "{{Software_Name}}"
																},
																{
																	"key": "version",
																	"value": "{{Software_Version_win}}"
																},
																{
																	"key": "platform",
																	"value": "{{Software_Platform_win}}"
																}
															]
														}
													},
													"response": []
												}
											]
										},
										{
											"name": "Software API_win-released",
											"item": [
												{
													"name": "all-software-win Code-200",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});\r",
																	""
																],
																"type": "text/javascript",
																"packages": {}
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{Url_software}}software?name={{Software_Name}}",
															"host": [
																"{{Url_software}}software"
															],
															"query": [
																{
																	"key": "name",
																	"value": "{{Software_Name}}"
																}
															]
														}
													},
													"response": []
												},
												{
													"name": "single-software-win Code-200",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});\r",
																	"\r",
																	""
																],
																"type": "text/javascript",
																"packages": {}
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{Url_software}}software?name={{Software_Name}}&version={{Software-win-released}}&platform={{Software_Platform_win}}",
															"host": [
																"{{Url_software}}software"
															],
															"query": [
																{
																	"key": "name",
																	"value": "{{Software_Name}}"
																},
																{
																	"key": "version",
																	"value": "{{Software-win-released}}"
																},
																{
																	"key": "platform",
																	"value": "{{Software_Platform_win}}"
																}
															]
														}
													},
													"response": []
												},
												{
													"name": "New-Software-win Code-403",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 403\", function () {\r",
																	"    pm.response.to.have.status(403);\r",
																	"});\r",
																	""
																],
																"type": "text/javascript",
																"packages": {}
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [],
														"body": {
															"mode": "formdata",
															"formdata": [
																{
																	"key": "Name",
																	"value": "snst",
																	"type": "text"
																},
																{
																	"key": "Version",
																	"value": "{{Software_Version_win}}",
																	"type": "text"
																},
																{
																	"key": "Platform",
																	"value": "{{Software_Platform_win}}",
																	"type": "text"
																},
																{
																	"key": "Criticality",
																	"value": "{{criticality_Recommended}}",
																	"type": "text"
																},
																{
																	"key": "Description",
																	"value": "{{Description}}",
																	"type": "text"
																},
																{
																	"key": "ReleaseNotesUrl",
																	"value": "{{ReleaseNotesUrl}}",
																	"type": "text"
																},
																{
																	"key": "file",
																	"type": "file",
																	"src": "SecureNMCSystemTool_4.0.0.1_win-x64 Installer (4) (1).exe"
																}
															]
														},
														"url": {
															"raw": "{{Url_software}}software",
															"host": [
																"{{Url_software}}software"
															]
														}
													},
													"response": []
												},
												{
													"name": "criticality-update-win Code-403",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 403\", function () {\r",
																	"    pm.response.to.have.status(403);\r",
																	"});\r",
																	""
																],
																"type": "text/javascript",
																"packages": {}
															}
														}
													],
													"request": {
														"method": "PUT",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\r\n  \"criticality\": \"{{criticality_Optional}}\",\r\n  \"description\": \"{{Description}}\",\r\n  \"releaseNotesUrl\": \"{{ReleaseNotesUrl}}\"\r\n}\r\n",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{Url_software}}software/{{Software_Name}}/{{Software-win-released}}/{{Software_Platform_win}}",
															"host": [
																"{{Url_software}}software"
															],
															"path": [
																"{{Software_Name}}",
																"{{Software-win-released}}",
																"{{Software_Platform_win}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "download-win Code-200",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});\r",
																	"// pm.test(\"Status is 200 and response time > 10s\", function () {\r",
																	"//     pm.expect(pm.response.code).to.eql(200);\r",
																	"//     pm.expect(pm.response.responseTime).to.be.above(10000); // 10,000 ms = 10 seconds\r",
																	"// });\r",
																	""
																],
																"type": "text/javascript",
																"packages": {}
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{Url_software}}software/{{Software_Name}}/{{Software-win-released}}/{{Software_Platform_win}}/download",
															"host": [
																"{{Url_software}}software"
															],
															"path": [
																"{{Software_Name}}",
																"{{Software-win-released}}",
																"{{Software_Platform_win}}",
																"download"
															]
														}
													},
													"response": []
												},
												{
													"name": "win-delete Code-403",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 403\", function () {\r",
																	"    pm.response.to.have.status(403);\r",
																	"});\r",
																	""
																],
																"type": "text/javascript",
																"packages": {}
															}
														}
													],
													"request": {
														"method": "DELETE",
														"header": [],
														"url": {
															"raw": "https://dit-sds-software-webapp.azurewebsites.net/api/software/{{Software_Name}}/{{Software-win-released}}/{{Software_Platform_win}}",
															"protocol": "https",
															"host": [
																"dit-sds-software-webapp",
																"azurewebsites",
																"net"
															],
															"path": [
																"api",
																"software",
																"{{Software_Name}}",
																"{{Software-win-released}}",
																"{{Software_Platform_win}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "check deleted-win Code-200",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});\r",
																	""
																],
																"type": "text/javascript",
																"packages": {}
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{Url_software}}software?name={{Software_Name}}&version={{Software-win-released}}&platform={{Software_Platform_win}}",
															"host": [
																"{{Url_software}}software"
															],
															"query": [
																{
																	"key": "name",
																	"value": "{{Software_Name}}"
																},
																{
																	"key": "version",
																	"value": "{{Software-win-released}}"
																},
																{
																	"key": "platform",
																	"value": "{{Software_Platform_win}}"
																}
															]
														}
													},
													"response": []
												},
												{
													"name": "Scheduled-win Code-403",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 403\", function () {\r",
																	"    pm.response.to.have.status(403);\r",
																	"});\r",
																	""
																],
																"type": "text/javascript",
																"packages": {}
															}
														}
													],
													"request": {
														"method": "PUT",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\r\n  \"release\": true,\r\n  \"releaseDate\": \"{{ReleaseDate}}\"\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{Url_software}}software/{{Software_Name}}/{{Software-win-released}}/{{Software_Platform_win}}/release",
															"host": [
																"{{Url_software}}software"
															],
															"path": [
																"{{Software_Name}}",
																"{{Software-win-released}}",
																"{{Software_Platform_win}}",
																"release"
															]
														}
													},
													"response": []
												},
												{
													"name": "Scheduled-win-status Code-200",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});\r",
																	"\r",
																	""
																],
																"type": "text/javascript",
																"packages": {}
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{Url_software}}software?name={{Software_Name}}&version={{Software-win-released}}&platform={{Software_Platform_win}}",
															"host": [
																"{{Url_software}}software"
															],
															"query": [
																{
																	"key": "name",
																	"value": "{{Software_Name}}"
																},
																{
																	"key": "version",
																	"value": "{{Software-win-released}}"
																},
																{
																	"key": "platform",
																	"value": "{{Software_Platform_win}}"
																}
															]
														}
													},
													"response": []
												},
												{
													"name": "stagged-win Code-403",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 403\", function () {\r",
																	"    pm.response.to.have.status(403);\r",
																	"});\r",
																	""
																],
																"type": "text/javascript",
																"packages": {}
															}
														}
													],
													"request": {
														"method": "PUT",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\r\n  \"release\": false\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{Url_software}}software/{{Software_Name}}/{{Software-win-released}}/{{Software_Platform_win}}/release",
															"host": [
																"{{Url_software}}software"
															],
															"path": [
																"{{Software_Name}}",
																"{{Software-win-released}}",
																"{{Software_Platform_win}}",
																"release"
															]
														}
													},
													"response": []
												},
												{
													"name": "Stagged-win-status Code-200",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});\r",
																	"\r",
																	"\r",
																	""
																],
																"type": "text/javascript",
																"packages": {}
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{Url_software}}software?name={{Software_Name}}&version={{Software-win-released}}&platform={{Software_Platform_win}}",
															"host": [
																"{{Url_software}}software"
															],
															"query": [
																{
																	"key": "name",
																	"value": "{{Software_Name}}"
																},
																{
																	"key": "version",
																	"value": "{{Software-win-released}}"
																},
																{
																	"key": "platform",
																	"value": "{{Software_Platform_win}}"
																}
															]
														}
													},
													"response": []
												},
												{
													"name": "remove-from-db-win Code-403",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 403\", function () {\r",
																	"    pm.response.to.have.status(403);\r",
																	"});\r",
																	""
																],
																"type": "text/javascript",
																"packages": {}
															}
														}
													],
													"request": {
														"method": "DELETE",
														"header": [],
														"url": {
															"raw": "https://dit-sds-software-webapp.azurewebsites.net/api/software/{{Software_Name}}/{{Software-win-released}}/{{Software_Platform_win}}",
															"protocol": "https",
															"host": [
																"dit-sds-software-webapp",
																"azurewebsites",
																"net"
															],
															"path": [
																"api",
																"software",
																"{{Software_Name}}",
																"{{Software-win-released}}",
																"{{Software_Platform_win}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "check deleted-win Code-200",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});\r",
																	"\r",
																	""
																],
																"type": "text/javascript",
																"packages": {}
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{Url_software}}software?name={{Software_Name}}&version={{Software-win-released}}&platform={{Software_Platform_win}}",
															"host": [
																"{{Url_software}}software"
															],
															"query": [
																{
																	"key": "name",
																	"value": "{{Software_Name}}"
																},
																{
																	"key": "version",
																	"value": "{{Software-win-released}}"
																},
																{
																	"key": "platform",
																	"value": "{{Software_Platform_win}}"
																}
															]
														}
													},
													"response": []
												}
											]
										}
									]
								},
								{
									"name": "linux Copy",
									"item": [
										{
											"name": "Software API_linux Schduled",
											"item": [
												{
													"name": "all software-linux Code-200",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});\r",
																	""
																],
																"type": "text/javascript",
																"packages": {}
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{Url_software}}software?name={{Software_Name}}",
															"host": [
																"{{Url_software}}software"
															],
															"query": [
																{
																	"key": "name",
																	"value": "{{Software_Name}}"
																}
															]
														}
													},
													"response": []
												},
												{
													"name": "single software-linux Code-200",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Response is exactly an empty array\", function () {\r",
																	"    pm.expect(pm.response.text()).to.eql(\"[]\");\r",
																	"});\r",
																	""
																],
																"type": "text/javascript",
																"packages": {}
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{Url_software}}software?name={{Software_Name}}&version={{Software-linux-stagged}}&platform={{Software_Platform_linux}}",
															"host": [
																"{{Url_software}}software"
															],
															"query": [
																{
																	"key": "name",
																	"value": "{{Software_Name}}"
																},
																{
																	"key": "version",
																	"value": "{{Software-linux-stagged}}"
																},
																{
																	"key": "platform",
																	"value": "{{Software_Platform_linux}}"
																}
															]
														}
													},
													"response": []
												},
												{
													"name": "new-software-linux Code-403",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 403\", function () {\r",
																	"    pm.response.to.have.status(403);\r",
																	"});\r",
																	""
																],
																"type": "text/javascript",
																"packages": {}
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [],
														"body": {
															"mode": "formdata",
															"formdata": [
																{
																	"key": "Name",
																	"value": "snst",
																	"type": "text"
																},
																{
																	"key": "Version",
																	"value": "{{Software_Version_linux}}",
																	"type": "text"
																},
																{
																	"key": "Platform",
																	"value": "{{Software_Platform_linux}}",
																	"type": "text"
																},
																{
																	"key": "Criticality",
																	"value": "{{criticality_Recommended}}",
																	"type": "text"
																},
																{
																	"key": "Description",
																	"value": "{{Description}}",
																	"type": "text"
																},
																{
																	"key": "releaseNotesUrl",
																	"value": "{{ReleaseNotesUrl}}",
																	"type": "text"
																},
																{
																	"key": "file",
																	"type": "file",
																	"src": "SecureNMCSystemTool_4.0.0.1_linux-x64 (2).tar.gz"
																},
																{
																	"key": "",
																	"value": "",
																	"type": "text"
																}
															]
														},
														"url": {
															"raw": "{{Url_software}}software",
															"host": [
																"{{Url_software}}software"
															]
														}
													},
													"response": []
												},
												{
													"name": "criticality update-linux Code-403",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 403\", function () {\r",
																	"    pm.response.to.have.status(403);\r",
																	"});\r",
																	""
																],
																"type": "text/javascript",
																"packages": {}
															}
														}
													],
													"request": {
														"method": "PUT",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\r\n  \"criticality\": \"{{criticality_Optional}}\",\r\n  \"description\": \"{{Description}}\",\r\n  \"releaseNotesUrl\": \"{{ReleaseNotesUrl}}\"\r\n}\r\n",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{Url_software}}software/{{Software_Name}}/{{Software-linux-stagged}}/{{Software_Platform_linux}}",
															"host": [
																"{{Url_software}}software"
															],
															"path": [
																"{{Software_Name}}",
																"{{Software-linux-stagged}}",
																"{{Software_Platform_linux}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "download-linux Code-404",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 404\", function () {\r",
																	"    pm.response.to.have.status(404);\r",
																	"});\r",
																	"\r",
																	"// pm.test(\"Status is 200 and response time > 10s\", function () {\r",
																	"//     pm.expect(pm.response.code).to.eql(200);\r",
																	"//     pm.expect(pm.response.responseTime).to.be.above(10000); // 10,000 ms = 10 seconds\r",
																	"// });\r",
																	""
																],
																"type": "text/javascript",
																"packages": {}
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{Url_software}}software/{{Software_Name}}/{{Software_Version_linux}}/{{Software_Platform_linux}}/download",
															"host": [
																"{{Url_software}}software"
															],
															"path": [
																"{{Software_Name}}",
																"{{Software_Version_linux}}",
																"{{Software_Platform_linux}}",
																"download"
															]
														}
													},
													"response": []
												},
												{
													"name": "linux-delete Code-403",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 403\", function () {\r",
																	"    pm.response.to.have.status(403);\r",
																	"});\r",
																	""
																],
																"type": "text/javascript",
																"packages": {}
															}
														}
													],
													"request": {
														"method": "DELETE",
														"header": [],
														"url": {
															"raw": "https://dit-sds-software-webapp.azurewebsites.net/api/software/{{Software_Name}}/{{Software-linux-stagged}}/{{Software_Platform_linux}}",
															"protocol": "https",
															"host": [
																"dit-sds-software-webapp",
																"azurewebsites",
																"net"
															],
															"path": [
																"api",
																"software",
																"{{Software_Name}}",
																"{{Software-linux-stagged}}",
																"{{Software_Platform_linux}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "delete-check-linux Code-200",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Response is exactly an empty array\", function () {\r",
																	"    pm.expect(pm.response.text()).to.eql(\"[]\");\r",
																	"});\r",
																	""
																],
																"type": "text/javascript",
																"packages": {}
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{Url_software}}software?name={{Software_Name}}&version={{Software-linux-stagged}}&platform={{Software_Platform_linux}}",
															"host": [
																"{{Url_software}}software"
															],
															"query": [
																{
																	"key": "name",
																	"value": "{{Software_Name}}"
																},
																{
																	"key": "version",
																	"value": "{{Software-linux-stagged}}"
																},
																{
																	"key": "platform",
																	"value": "{{Software_Platform_linux}}"
																}
															]
														}
													},
													"response": []
												},
												{
													"name": "Scheduled_linux Code-403",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 403\", function () {\r",
																	"    pm.response.to.have.status(403);\r",
																	"});\r",
																	""
																],
																"type": "text/javascript",
																"packages": {}
															}
														}
													],
													"request": {
														"method": "PUT",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\r\n  \"release\": true,\r\n  \"releaseDate\": \"2025-08-02T16:15:44.3988046Z\"\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{Url_software}}software/{{Software_Name}}/{{Software-linux-stagged}}/{{Software_Platform_linux}}/release",
															"host": [
																"{{Url_software}}software"
															],
															"path": [
																"{{Software_Name}}",
																"{{Software-linux-stagged}}",
																"{{Software_Platform_linux}}",
																"release"
															]
														}
													},
													"response": []
												},
												{
													"name": "Scheduled check linux Code-200",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});\r",
																	"pm.test(\"Response is exactly an empty array\", function () {\r",
																	"    pm.expect(pm.response.text()).to.eql(\"[]\");\r",
																	"});\r",
																	""
																],
																"type": "text/javascript",
																"packages": {}
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{Url_software}}software?name={{Software_Name}}&version={{Software-linux-stagged}}&platform={{Software_Platform_linux}}",
															"host": [
																"{{Url_software}}software"
															],
															"query": [
																{
																	"key": "name",
																	"value": "{{Software_Name}}"
																},
																{
																	"key": "version",
																	"value": "{{Software-linux-stagged}}"
																},
																{
																	"key": "platform",
																	"value": "{{Software_Platform_linux}}"
																}
															]
														}
													},
													"response": []
												},
												{
													"name": "stagged-linux Code-403",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 403\", function () {\r",
																	"    pm.response.to.have.status(403);\r",
																	"});\r",
																	""
																],
																"type": "text/javascript",
																"packages": {}
															}
														}
													],
													"request": {
														"method": "PUT",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\r\n  \"release\": false\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{Url_software}}software/{{Software_Name}}/{{Software-linux-stagged}}/{{Software_Platform_linux}}/release",
															"host": [
																"{{Url_software}}software"
															],
															"path": [
																"{{Software_Name}}",
																"{{Software-linux-stagged}}",
																"{{Software_Platform_linux}}",
																"release"
															]
														}
													},
													"response": []
												},
												{
													"name": "check Stagged-linux Code-200",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});\r",
																	"pm.test(\"Response is exactly an empty array\", function () {\r",
																	"    pm.expect(pm.response.text()).to.eql(\"[]\");\r",
																	"});\r",
																	""
																],
																"type": "text/javascript",
																"packages": {}
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{Url_software}}software?name={{Software_Name}}&version={{Software-linux-stagged}}&platform={{Software_Platform_linux}}",
															"host": [
																"{{Url_software}}software"
															],
															"query": [
																{
																	"key": "name",
																	"value": "{{Software_Name}}"
																},
																{
																	"key": "version",
																	"value": "{{Software-linux-stagged}}"
																},
																{
																	"key": "platform",
																	"value": "{{Software_Platform_linux}}"
																}
															]
														}
													},
													"response": []
												},
												{
													"name": "remove from db-linux Code-403",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 403\", function () {\r",
																	"    pm.response.to.have.status(403);\r",
																	"});\r",
																	""
																],
																"type": "text/javascript",
																"packages": {}
															}
														}
													],
													"request": {
														"method": "DELETE",
														"header": [],
														"url": {
															"raw": "https://dit-sds-software-webapp.azurewebsites.net/api/software/{{Software_Name}}/{{Software-linux-stagged}}/{{Software_Platform_linux}}",
															"protocol": "https",
															"host": [
																"dit-sds-software-webapp",
																"azurewebsites",
																"net"
															],
															"path": [
																"api",
																"software",
																"{{Software_Name}}",
																"{{Software-linux-stagged}}",
																"{{Software_Platform_linux}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "check deleted-linux Code-404",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Response is exactly an empty array\", function () {\r",
																	"    pm.expect(pm.response.text()).to.eql(\"[]\");\r",
																	"});\r",
																	""
																],
																"type": "text/javascript",
																"packages": {}
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{Url_software}}software?name={{Software_Name}}&version={{Software-linux-stagged}}&platform={{Software_Platform_linux}}",
															"host": [
																"{{Url_software}}software"
															],
															"query": [
																{
																	"key": "name",
																	"value": "{{Software_Name}}"
																},
																{
																	"key": "version",
																	"value": "{{Software-linux-stagged}}"
																},
																{
																	"key": "platform",
																	"value": "{{Software_Platform_linux}}"
																}
															]
														}
													},
													"response": []
												}
											]
										},
										{
											"name": "Software API_linux Released",
											"item": [
												{
													"name": "all software-linux Code-200",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});\r",
																	""
																],
																"type": "text/javascript",
																"packages": {}
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{Url_software}}software?name={{Software_Name}}",
															"host": [
																"{{Url_software}}software"
															],
															"query": [
																{
																	"key": "name",
																	"value": "{{Software_Name}}"
																}
															]
														}
													},
													"response": []
												},
												{
													"name": "single software-linux Code-200",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});\r",
																	"\r",
																	""
																],
																"type": "text/javascript",
																"packages": {}
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{Url_software}}software?name={{Software_Name}}&version={{Software-linux-released}}&platform={{Software_Platform_linux}}",
															"host": [
																"{{Url_software}}software"
															],
															"query": [
																{
																	"key": "name",
																	"value": "{{Software_Name}}"
																},
																{
																	"key": "version",
																	"value": "{{Software-linux-released}}"
																},
																{
																	"key": "platform",
																	"value": "{{Software_Platform_linux}}"
																}
															]
														}
													},
													"response": []
												},
												{
													"name": "new-software-linux Code-403",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 403\", function () {\r",
																	"    pm.response.to.have.status(403);\r",
																	"});\r",
																	""
																],
																"type": "text/javascript",
																"packages": {}
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [],
														"body": {
															"mode": "formdata",
															"formdata": [
																{
																	"key": "Name",
																	"value": "snst",
																	"type": "text"
																},
																{
																	"key": "Version",
																	"value": "{{Software_Version_linux}}",
																	"type": "text"
																},
																{
																	"key": "Platform",
																	"value": "{{Software_Platform_linux}}",
																	"type": "text"
																},
																{
																	"key": "Criticality",
																	"value": "{{criticality_Recommended}}",
																	"type": "text"
																},
																{
																	"key": "Description",
																	"value": "{{Description}}",
																	"type": "text"
																},
																{
																	"key": "releaseNotesUrl",
																	"value": "{{ReleaseNotesUrl}}",
																	"type": "text"
																},
																{
																	"key": "file",
																	"type": "file",
																	"src": "SecureNMCSystemTool_4.0.0.1_linux-x64 (2).tar.gz"
																},
																{
																	"key": "",
																	"value": "",
																	"type": "text"
																}
															]
														},
														"url": {
															"raw": "{{Url_software}}software",
															"host": [
																"{{Url_software}}software"
															]
														}
													},
													"response": []
												},
												{
													"name": "criticality update-linux Code-403",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 403\", function () {\r",
																	"    pm.response.to.have.status(403);\r",
																	"});\r",
																	""
																],
																"type": "text/javascript",
																"packages": {}
															}
														}
													],
													"request": {
														"method": "PUT",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\r\n  \"criticality\": \"{{criticality_Optional}}\",\r\n  \"description\": \"{{Description}}\",\r\n  \"releaseNotesUrl\": \"{{ReleaseNotesUrl}}\"\r\n}\r\n",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{Url_software}}software/{{Software_Name}}/{{Software-linux-released}}/{{Software_Platform_linux}}",
															"host": [
																"{{Url_software}}software"
															],
															"path": [
																"{{Software_Name}}",
																"{{Software-linux-released}}",
																"{{Software_Platform_linux}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "download-linux Code-200",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});\r",
																	"\r",
																	"// pm.test(\"Status is 200 and response time > 10s\", function () {\r",
																	"//     pm.expect(pm.response.code).to.eql(200);\r",
																	"//     pm.expect(pm.response.responseTime).to.be.above(10000); // 10,000 ms = 10 seconds\r",
																	"// });\r",
																	""
																],
																"type": "text/javascript",
																"packages": {}
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{Url_software}}software/{{Software_Name}}/{{Software-linux-released}}/{{Software_Platform_linux}}/download",
															"host": [
																"{{Url_software}}software"
															],
															"path": [
																"{{Software_Name}}",
																"{{Software-linux-released}}",
																"{{Software_Platform_linux}}",
																"download"
															]
														}
													},
													"response": []
												},
												{
													"name": "linux-delete Code-403",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 403\", function () {\r",
																	"    pm.response.to.have.status(403);\r",
																	"});\r",
																	""
																],
																"type": "text/javascript",
																"packages": {}
															}
														}
													],
													"request": {
														"method": "DELETE",
														"header": [],
														"url": {
															"raw": "https://dit-sds-software-webapp.azurewebsites.net/api/software/{{Software_Name}}/{{Software-linux-released}}/{{Software_Platform_linux}}",
															"protocol": "https",
															"host": [
																"dit-sds-software-webapp",
																"azurewebsites",
																"net"
															],
															"path": [
																"api",
																"software",
																"{{Software_Name}}",
																"{{Software-linux-released}}",
																"{{Software_Platform_linux}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "delete-check-linux Code-200",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});\r",
																	"\r",
																	""
																],
																"type": "text/javascript",
																"packages": {}
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{Url_software}}software?name={{Software_Name}}&version={{Software-linux-released}}&platform={{Software_Platform_linux}}",
															"host": [
																"{{Url_software}}software"
															],
															"query": [
																{
																	"key": "name",
																	"value": "{{Software_Name}}"
																},
																{
																	"key": "version",
																	"value": "{{Software-linux-released}}"
																},
																{
																	"key": "platform",
																	"value": "{{Software_Platform_linux}}"
																}
															]
														}
													},
													"response": []
												},
												{
													"name": "Scheduled_linux Code-403",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 403\", function () {\r",
																	"    pm.response.to.have.status(403);\r",
																	"});\r",
																	""
																],
																"type": "text/javascript",
																"packages": {}
															}
														}
													],
													"request": {
														"method": "PUT",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\r\n  \"release\": true,\r\n  \"releaseDate\": \"2025-08-02T16:15:44.3988046Z\"\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{Url_software}}software/{{Software_Name}}/{{Software-linux-released}}/{{Software_Platform_linux}}/release",
															"host": [
																"{{Url_software}}software"
															],
															"path": [
																"{{Software_Name}}",
																"{{Software-linux-released}}",
																"{{Software_Platform_linux}}",
																"release"
															]
														}
													},
													"response": []
												},
												{
													"name": "Scheduled check linux Code-200",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});\r",
																	""
																],
																"type": "text/javascript",
																"packages": {}
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{Url_software}}software?name={{Software_Name}}&version={{Software-linux-released}}&platform={{Software_Platform_linux}}",
															"host": [
																"{{Url_software}}software"
															],
															"query": [
																{
																	"key": "name",
																	"value": "{{Software_Name}}"
																},
																{
																	"key": "version",
																	"value": "{{Software-linux-released}}"
																},
																{
																	"key": "platform",
																	"value": "{{Software_Platform_linux}}"
																}
															]
														}
													},
													"response": []
												},
												{
													"name": "stagged-linux Code-403",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 403\", function () {\r",
																	"    pm.response.to.have.status(403);\r",
																	"});\r",
																	""
																],
																"type": "text/javascript",
																"packages": {}
															}
														}
													],
													"request": {
														"method": "PUT",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\r\n  \"release\": false\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{Url_software}}software/{{Software_Name}}/{{Software-linux-released}}/{{Software_Platform_linux}}/release",
															"host": [
																"{{Url_software}}software"
															],
															"path": [
																"{{Software_Name}}",
																"{{Software-linux-released}}",
																"{{Software_Platform_linux}}",
																"release"
															]
														}
													},
													"response": []
												},
												{
													"name": "check Stagged-linux Code-200",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});\r",
																	""
																],
																"type": "text/javascript",
																"packages": {}
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{Url_software}}software?name={{Software_Name}}&version={{Software-linux-released}}&platform={{Software_Platform_linux}}",
															"host": [
																"{{Url_software}}software"
															],
															"query": [
																{
																	"key": "name",
																	"value": "{{Software_Name}}"
																},
																{
																	"key": "version",
																	"value": "{{Software-linux-released}}"
																},
																{
																	"key": "platform",
																	"value": "{{Software_Platform_linux}}"
																}
															]
														}
													},
													"response": []
												},
												{
													"name": "remove from db-linux Code-403",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 403\", function () {\r",
																	"    pm.response.to.have.status(403);\r",
																	"});\r",
																	""
																],
																"type": "text/javascript",
																"packages": {}
															}
														}
													],
													"request": {
														"method": "DELETE",
														"header": [],
														"url": {
															"raw": "https://dit-sds-software-webapp.azurewebsites.net/api/software/{{Software_Name}}/{{Software-linux-released}}/{{Software_Platform_linux}}",
															"protocol": "https",
															"host": [
																"dit-sds-software-webapp",
																"azurewebsites",
																"net"
															],
															"path": [
																"api",
																"software",
																"{{Software_Name}}",
																"{{Software-linux-released}}",
																"{{Software_Platform_linux}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "check deleted-linux Code-200",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});\r",
																	"\r",
																	""
																],
																"type": "text/javascript",
																"packages": {}
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{Url_software}}software?name={{Software_Name}}&version={{Software-linux-released}}&platform={{Software_Platform_linux}}",
															"host": [
																"{{Url_software}}software"
															],
															"query": [
																{
																	"key": "name",
																	"value": "{{Software_Name}}"
																},
																{
																	"key": "version",
																	"value": "{{Software-linux-released}}"
																},
																{
																	"key": "platform",
																	"value": "{{Software_Platform_linux}}"
																}
															]
														}
													},
													"response": []
												}
											]
										}
									]
								},
								{
									"name": "osx Copy",
									"item": [
										{
											"name": "Software API _osx stagged",
											"item": [
												{
													"name": "all software osx Code-200",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});\r",
																	""
																],
																"type": "text/javascript",
																"packages": {}
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{Url_software}}software?name={{Software_Name}}",
															"host": [
																"{{Url_software}}software"
															],
															"query": [
																{
																	"key": "name",
																	"value": "{{Software_Name}}"
																}
															]
														}
													},
													"response": []
												},
												{
													"name": "single software osx Code-200",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Response is exactly an empty array\", function () {\r",
																	"    pm.expect(pm.response.text()).to.eql(\"[]\");\r",
																	"});\r",
																	""
																],
																"type": "text/javascript",
																"packages": {}
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{Url_software}}software?name={{Software_Name}}&version={{Software-osx-stagged}}&platform={{Software_Platform_osx}}",
															"host": [
																"{{Url_software}}software"
															],
															"query": [
																{
																	"key": "name",
																	"value": "{{Software_Name}}"
																},
																{
																	"key": "version",
																	"value": "{{Software-osx-stagged}}"
																},
																{
																	"key": "platform",
																	"value": "{{Software_Platform_osx}}"
																}
															]
														}
													},
													"response": []
												},
												{
													"name": "New-Software-osx Code-403",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 403\", function () {\r",
																	"    pm.response.to.have.status(403);\r",
																	"});\r",
																	""
																],
																"type": "text/javascript",
																"packages": {}
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [],
														"body": {
															"mode": "formdata",
															"formdata": [
																{
																	"key": "Name",
																	"value": "snst",
																	"type": "text"
																},
																{
																	"key": "Version",
																	"value": "{{Software_Version_osx}}",
																	"type": "text"
																},
																{
																	"key": "Platform",
																	"value": "{{Software_Platform_osx}}",
																	"type": "text"
																},
																{
																	"key": "Criticality",
																	"value": "{{criticality_Recommended}}",
																	"type": "text"
																},
																{
																	"key": "Description",
																	"value": "{{Description}}",
																	"type": "text"
																},
																{
																	"key": "releaseNotesUrl",
																	"value": "{{ReleaseNotesUrl}}",
																	"type": "text"
																},
																{
																	"key": "file",
																	"type": "file",
																	"src": "SecureNMCSystemTool_4.0.0.1_osx-arm64 (3).tar.gz"
																},
																{
																	"key": "",
																	"value": "",
																	"type": "text"
																}
															]
														},
														"url": {
															"raw": "{{Url_software}}software",
															"host": [
																"{{Url_software}}software"
															]
														}
													},
													"response": []
												},
												{
													"name": "criticality update-osx Code-403",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 403\", function () {\r",
																	"    pm.response.to.have.status(403);\r",
																	"});\r",
																	""
																],
																"type": "text/javascript",
																"packages": {}
															}
														}
													],
													"request": {
														"method": "PUT",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\r\n  \"criticality\": \"{{criticality_Optional}}\",\r\n  \"description\": \"{{Description}}\",\r\n  \"releaseNotesUrl\": \"{{ReleaseNotesUrl}}\"\r\n}\r\n",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{Url_software}}software/{{Software_Name}}/{{Software-osx-stagged}}/{{Software_Platform_osx}}",
															"host": [
																"{{Url_software}}software"
															],
															"path": [
																"{{Software_Name}}",
																"{{Software-osx-stagged}}",
																"{{Software_Platform_osx}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "download-osx Code-200",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 404\", function () {\r",
																	"    pm.response.to.have.status(404);\r",
																	"});\r",
																	"\r",
																	"// pm.test(\"Status is 200 and response time > 10s\", function () {\r",
																	"//     pm.expect(pm.response.code).to.eql(200);\r",
																	"//     pm.expect(pm.response.responseTime).to.be.above(10000); // 10,000 ms = 10 seconds\r",
																	"// });\r",
																	""
																],
																"type": "text/javascript",
																"packages": {}
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{Url_software}}software/{{Software_Name}}/{{Software-osx-stagged}}/{{Software_Platform_osx}}/download",
															"host": [
																"{{Url_software}}software"
															],
															"path": [
																"{{Software_Name}}",
																"{{Software-osx-stagged}}",
																"{{Software_Platform_osx}}",
																"download"
															]
														}
													},
													"response": []
												},
												{
													"name": "remove from db osx Code-403",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 403\", function () {\r",
																	"    pm.response.to.have.status(403);\r",
																	"});\r",
																	""
																],
																"type": "text/javascript",
																"packages": {}
															}
														}
													],
													"request": {
														"method": "DELETE",
														"header": [],
														"url": {
															"raw": "https://dit-sds-software-webapp.azurewebsites.net/api/software/{{Software_Name}}/{{Software-osx-stagged}}/{{Software_Platform_osx}}",
															"protocol": "https",
															"host": [
																"dit-sds-software-webapp",
																"azurewebsites",
																"net"
															],
															"path": [
																"api",
																"software",
																"{{Software_Name}}",
																"{{Software-osx-stagged}}",
																"{{Software_Platform_osx}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "check deleted-osx Code-200",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});\r",
																	""
																],
																"type": "text/javascript",
																"packages": {}
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{Url_software}}software?name={{Software_Name}}&version={{Software-osx-stagged}}&platform={{Software_Platform_osx}}",
															"host": [
																"{{Url_software}}software"
															],
															"query": [
																{
																	"key": "name",
																	"value": "{{Software_Name}}"
																},
																{
																	"key": "version",
																	"value": "{{Software-osx-stagged}}"
																},
																{
																	"key": "platform",
																	"value": "{{Software_Platform_osx}}"
																}
															]
														}
													},
													"response": []
												},
												{
													"name": "Scheduled-osx Code-403",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 403\", function () {\r",
																	"    pm.response.to.have.status(403);\r",
																	"});\r",
																	""
																],
																"type": "text/javascript",
																"packages": {}
															}
														}
													],
													"request": {
														"method": "PUT",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\r\n  \"release\": true,\r\n  \"releaseDate\": \"2025-08-02T16:15:44.3988046Z\"\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{Url_software}}software/{{Software_Name}}/{{Software-osx-stagged}}/{{Software_Platform_osx}}/release",
															"host": [
																"{{Url_software}}software"
															],
															"path": [
																"{{Software_Name}}",
																"{{Software-osx-stagged}}",
																"{{Software_Platform_osx}}",
																"release"
															]
														}
													},
													"response": []
												},
												{
													"name": "check scheduled-osx Code-200",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});\r",
																	""
																],
																"type": "text/javascript",
																"packages": {}
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{Url_software}}software?name={{Software_Name}}&version={{Software-osx-stagged}}&platform={{Software_Platform_osx}}",
															"host": [
																"{{Url_software}}software"
															],
															"query": [
																{
																	"key": "name",
																	"value": "{{Software_Name}}"
																},
																{
																	"key": "version",
																	"value": "{{Software-osx-stagged}}"
																},
																{
																	"key": "platform",
																	"value": "{{Software_Platform_osx}}"
																}
															]
														}
													},
													"response": []
												},
												{
													"name": "stagged-osx Code-403",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 403\", function () {\r",
																	"    pm.response.to.have.status(403);\r",
																	"});\r",
																	""
																],
																"type": "text/javascript",
																"packages": {}
															}
														}
													],
													"request": {
														"method": "PUT",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\r\n  \"release\": false\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{Url_software}}software/{{Software_Name}}/{{Software-osx-stagged}}/{{Software_Platform_osx}}/release",
															"host": [
																"{{Url_software}}software"
															],
															"path": [
																"{{Software_Name}}",
																"{{Software-osx-stagged}}",
																"{{Software_Platform_osx}}",
																"release"
															]
														}
													},
													"response": []
												},
												{
													"name": "check-stagged-osx Code-200",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});\r",
																	"pm.test(\"Response is exactly an empty array\", function () {\r",
																	"    pm.expect(pm.response.text()).to.eql(\"[]\");\r",
																	"});\r",
																	""
																],
																"type": "text/javascript",
																"packages": {}
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{Url_software}}software?name={{Software_Name}}&version={{Software-osx-stagged}}&platform={{Software_Platform_osx}}",
															"host": [
																"{{Url_software}}software"
															],
															"query": [
																{
																	"key": "name",
																	"value": "{{Software_Name}}"
																},
																{
																	"key": "version",
																	"value": "{{Software-osx-stagged}}"
																},
																{
																	"key": "platform",
																	"value": "{{Software_Platform_osx}}"
																}
															]
														}
													},
													"response": []
												},
												{
													"name": "delete from db-osx Code-403",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 403\", function () {\r",
																	"    pm.response.to.have.status(403);\r",
																	"});\r",
																	""
																],
																"type": "text/javascript",
																"packages": {}
															}
														}
													],
													"request": {
														"method": "DELETE",
														"header": [],
														"url": {
															"raw": "https://dit-sds-software-webapp.azurewebsites.net/api/software/{{Software_Name}}/{{Software-osx-stagged}}/{{Software_Platform_osx}}",
															"protocol": "https",
															"host": [
																"dit-sds-software-webapp",
																"azurewebsites",
																"net"
															],
															"path": [
																"api",
																"software",
																"{{Software_Name}}",
																"{{Software-osx-stagged}}",
																"{{Software_Platform_osx}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "check deleted-osx Code-200",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Response is exactly an empty array\", function () {\r",
																	"    pm.expect(pm.response.text()).to.eql(\"[]\");\r",
																	"});\r",
																	""
																],
																"type": "text/javascript",
																"packages": {}
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{Url_software}}software?name={{Software_Name}}&version={{Software-osx-stagged}}&platform={{Software_Platform_osx}}",
															"host": [
																"{{Url_software}}software"
															],
															"query": [
																{
																	"key": "name",
																	"value": "{{Software_Name}}"
																},
																{
																	"key": "version",
																	"value": "{{Software-osx-stagged}}"
																},
																{
																	"key": "platform",
																	"value": "{{Software_Platform_osx}}"
																}
															]
														}
													},
													"response": []
												}
											]
										},
										{
											"name": "Software API _osx released",
											"item": [
												{
													"name": "all software osx Code-200",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});\r",
																	""
																],
																"type": "text/javascript",
																"packages": {}
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{Url_software}}software?name={{Software_Name}}",
															"host": [
																"{{Url_software}}software"
															],
															"query": [
																{
																	"key": "name",
																	"value": "{{Software_Name}}"
																}
															]
														}
													},
													"response": []
												},
												{
													"name": "single software osx Code-200",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});\r",
																	"\r",
																	""
																],
																"type": "text/javascript",
																"packages": {}
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{Url_software}}software?name={{Software_Name}}&version={{Software-osx-released}}&platform={{Software_Platform_osx}}",
															"host": [
																"{{Url_software}}software"
															],
															"query": [
																{
																	"key": "name",
																	"value": "{{Software_Name}}"
																},
																{
																	"key": "version",
																	"value": "{{Software-osx-released}}"
																},
																{
																	"key": "platform",
																	"value": "{{Software_Platform_osx}}"
																}
															]
														}
													},
													"response": []
												},
												{
													"name": "New-Software-osx Code-403",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 403\", function () {\r",
																	"    pm.response.to.have.status(403);\r",
																	"});\r",
																	""
																],
																"type": "text/javascript",
																"packages": {}
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [],
														"body": {
															"mode": "formdata",
															"formdata": [
																{
																	"key": "Name",
																	"value": "snst",
																	"type": "text"
																},
																{
																	"key": "Version",
																	"value": "{{Software_Version_osx}}",
																	"type": "text"
																},
																{
																	"key": "Platform",
																	"value": "{{Software_Platform_osx}}",
																	"type": "text"
																},
																{
																	"key": "Criticality",
																	"value": "{{criticality_Recommended}}",
																	"type": "text"
																},
																{
																	"key": "Description",
																	"value": "{{Description}}",
																	"type": "text"
																},
																{
																	"key": "releaseNotesUrl",
																	"value": "{{ReleaseNotesUrl}}",
																	"type": "text"
																},
																{
																	"key": "file",
																	"type": "file",
																	"src": "SecureNMCSystemTool_4.0.0.1_osx-arm64 (3).tar.gz"
																},
																{
																	"key": "",
																	"value": "",
																	"type": "text"
																}
															]
														},
														"url": {
															"raw": "{{Url_software}}software",
															"host": [
																"{{Url_software}}software"
															]
														}
													},
													"response": []
												},
												{
													"name": "criticality update-osx Code-403",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 403\", function () {\r",
																	"    pm.response.to.have.status(403);\r",
																	"});\r",
																	""
																],
																"type": "text/javascript",
																"packages": {}
															}
														}
													],
													"request": {
														"method": "PUT",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\r\n  \"criticality\": \"{{criticality_Optional}}\",\r\n  \"description\": \"{{Description}}\",\r\n  \"releaseNotesUrl\": \"{{ReleaseNotesUrl}}\"\r\n}\r\n",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{Url_software}}software/{{Software_Name}}/{{Software-osx-released}}/{{Software_Platform_osx}}",
															"host": [
																"{{Url_software}}software"
															],
															"path": [
																"{{Software_Name}}",
																"{{Software-osx-released}}",
																"{{Software_Platform_osx}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "download-osx Code-200",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});\r",
																	"\r",
																	"// pm.test(\"Status is 200 and response time > 10s\", function () {\r",
																	"//     pm.expect(pm.response.code).to.eql(200);\r",
																	"//     pm.expect(pm.response.responseTime).to.be.above(10000); // 10,000 ms = 10 seconds\r",
																	"// });\r",
																	""
																],
																"type": "text/javascript",
																"packages": {}
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{Url_software}}software/{{Software_Name}}/{{Software-osx-released}}/{{Software_Platform_osx}}/download",
															"host": [
																"{{Url_software}}software"
															],
															"path": [
																"{{Software_Name}}",
																"{{Software-osx-released}}",
																"{{Software_Platform_osx}}",
																"download"
															]
														}
													},
													"response": []
												},
												{
													"name": "remove from db osx Code-403",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 403\", function () {\r",
																	"    pm.response.to.have.status(403);\r",
																	"});\r",
																	""
																],
																"type": "text/javascript",
																"packages": {}
															}
														}
													],
													"request": {
														"method": "DELETE",
														"header": [],
														"url": {
															"raw": "https://dit-sds-software-webapp.azurewebsites.net/api/software/{{Software_Name}}/{{Software-osx-released}}/{{Software_Platform_osx}}",
															"protocol": "https",
															"host": [
																"dit-sds-software-webapp",
																"azurewebsites",
																"net"
															],
															"path": [
																"api",
																"software",
																"{{Software_Name}}",
																"{{Software-osx-released}}",
																"{{Software_Platform_osx}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "check deleted-osx Code-200",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});\r",
																	""
																],
																"type": "text/javascript",
																"packages": {}
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{Url_software}}software?name={{Software_Name}}&version={{Software-osx-released}}&platform={{Software_Platform_osx}}",
															"host": [
																"{{Url_software}}software"
															],
															"query": [
																{
																	"key": "name",
																	"value": "{{Software_Name}}"
																},
																{
																	"key": "version",
																	"value": "{{Software-osx-released}}"
																},
																{
																	"key": "platform",
																	"value": "{{Software_Platform_osx}}"
																}
															]
														}
													},
													"response": []
												},
												{
													"name": "Scheduled-osx Code-403",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 403\", function () {\r",
																	"    pm.response.to.have.status(403);\r",
																	"});\r",
																	""
																],
																"type": "text/javascript",
																"packages": {}
															}
														}
													],
													"request": {
														"method": "PUT",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\r\n  \"release\": true,\r\n  \"releaseDate\": \"2025-08-02T16:15:44.3988046Z\"\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{Url_software}}software/{{Software_Name}}/{{Software-osx-released}}/{{Software_Platform_osx}}/release",
															"host": [
																"{{Url_software}}software"
															],
															"path": [
																"{{Software_Name}}",
																"{{Software-osx-released}}",
																"{{Software_Platform_osx}}",
																"release"
															]
														}
													},
													"response": []
												},
												{
													"name": "check scheduled-osx Code-200",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});\r",
																	"pm.test(\"Response is exactly an empty array\", function () {\r",
																	"    pm.expect(pm.response.text()).to.eql(\"[]\");\r",
																	"});\r",
																	""
																],
																"type": "text/javascript",
																"packages": {}
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{Url_software}}software?name={{Software_Name}}&version={{Software_Version_osx}}&platform={{Software_Platform_osx}}",
															"host": [
																"{{Url_software}}software"
															],
															"query": [
																{
																	"key": "name",
																	"value": "{{Software_Name}}"
																},
																{
																	"key": "version",
																	"value": "{{Software_Version_osx}}"
																},
																{
																	"key": "platform",
																	"value": "{{Software_Platform_osx}}"
																}
															]
														}
													},
													"response": []
												},
												{
													"name": "stagged-osx Code-403",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 403\", function () {\r",
																	"    pm.response.to.have.status(403);\r",
																	"});\r",
																	""
																],
																"type": "text/javascript",
																"packages": {}
															}
														}
													],
													"request": {
														"method": "PUT",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\r\n  \"release\": false\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{Url_software}}software/{{Software_Name}}/{{Software_Version_osx}}/{{Software_Platform_osx}}/release",
															"host": [
																"{{Url_software}}software"
															],
															"path": [
																"{{Software_Name}}",
																"{{Software_Version_osx}}",
																"{{Software_Platform_osx}}",
																"release"
															]
														}
													},
													"response": []
												},
												{
													"name": "check-stagged-osx Code-200",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});\r",
																	""
																],
																"type": "text/javascript",
																"packages": {}
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{Url_software}}software?name={{Software_Name}}&version={{Software-osx-released}}&platform={{Software_Platform_osx}}",
															"host": [
																"{{Url_software}}software"
															],
															"query": [
																{
																	"key": "name",
																	"value": "{{Software_Name}}"
																},
																{
																	"key": "version",
																	"value": "{{Software-osx-released}}"
																},
																{
																	"key": "platform",
																	"value": "{{Software_Platform_osx}}"
																}
															]
														}
													},
													"response": []
												},
												{
													"name": "delete from db-osx Code-403",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 403\", function () {\r",
																	"    pm.response.to.have.status(403);\r",
																	"});\r",
																	""
																],
																"type": "text/javascript",
																"packages": {}
															}
														}
													],
													"request": {
														"method": "DELETE",
														"header": [],
														"url": {
															"raw": "https://dit-sds-software-webapp.azurewebsites.net/api/software/{{Software_Name}}/{{Software-osx-released}}/{{Software_Platform_osx}}",
															"protocol": "https",
															"host": [
																"dit-sds-software-webapp",
																"azurewebsites",
																"net"
															],
															"path": [
																"api",
																"software",
																"{{Software_Name}}",
																"{{Software-osx-released}}",
																"{{Software_Platform_osx}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "check deleted-osx Code-200",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});\r",
																	"\r",
																	""
																],
																"type": "text/javascript",
																"packages": {}
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{Url_software}}software?name={{Software_Name}}&version={{Software-osx-released}}&platform={{Software_Platform_osx}}",
															"host": [
																"{{Url_software}}software"
															],
															"query": [
																{
																	"key": "name",
																	"value": "{{Software_Name}}"
																},
																{
																	"key": "version",
																	"value": "{{Software-osx-released}}"
																},
																{
																	"key": "platform",
																	"value": "{{Software_Platform_osx}}"
																}
															]
														}
													},
													"response": []
												}
											]
										}
									]
								}
							]
						}
					],
					"auth": {
						"type": "apikey",
						"apikey": [
							{
								"key": "value",
								"value": "{{Api_key_User}}",
								"type": "string"
							},
							{
								"key": "key",
								"value": "Authorization",
								"type": "string"
							}
						]
					},
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"packages": {},
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"packages": {},
								"exec": [
									""
								]
							}
						}
					]
				}
			],
			"auth": {
				"type": "noauth"
			},
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"packages": {},
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"packages": {},
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "FirmwareReleaseManagerRole",
			"item": [
				{
					"name": "Role Update",
					"item": [
						{
							"name": "roles Code-200",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url_userApi}}{{user_federatedId}}/roles",
									"host": [
										"{{url_userApi}}{{user_federatedId}}"
									],
									"path": [
										"roles"
									]
								}
							},
							"response": []
						},
						{
							"name": "role Code-204",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{url_userApi}}{{user_federatedId}}/roles/{{Role_FirmwareManager}}",
									"host": [
										"{{url_userApi}}{{user_federatedId}}"
									],
									"path": [
										"roles",
										"{{Role_FirmwareManager}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "role Code-204",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// let selected = {\r",
											"//     firmware: \"https://dit-sds-users-webapp.azurewebsites.net/api/users\",\r",
											"//     federatedId : \"SESA823251\",\r",
											"//     roles: \"roles\",\r",
											"//     userroles:\"SoftwareManager\"\r",
											"\r",
											"\r",
											"// };\r",
											"\r",
											"// pm.collectionVariables.set(\"federatedId \", selected.federatedId );\r",
											"// pm.collectionVariables.set(\"roles\", selected.roles);\r",
											"// pm.collectionVariables.set(\"userroles\", selected.userroles);\r",
											"\r",
											"\r",
											"// // Optional: Log to console\r",
											"// console.log(\"Selected User:\", selected.federatedId , selected.roles, selected.userroles);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{url_userApi}}{{user_federatedId}}/roles/{{Role_FirmwareReleaseManager}}",
									"host": [
										"{{url_userApi}}{{user_federatedId}}"
									],
									"path": [
										"roles",
										"{{Role_FirmwareReleaseManager}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "roles Code-200 Copy",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url_userApi}}{{user_federatedId}}/roles",
									"host": [
										"{{url_userApi}}{{user_federatedId}}"
									],
									"path": [
										"roles"
									]
								}
							},
							"response": []
						}
					],
					"auth": {
						"type": "apikey",
						"apikey": [
							{
								"key": "value",
								"value": "{{APi-key_Admin}}",
								"type": "string"
							},
							{
								"key": "key",
								"value": "Authorization",
								"type": "string"
							}
						]
					},
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"packages": {},
								"exec": [
									"(function () {\r",
									"    const selectedRole = pm.collectionVariables.get(\"userroles\") || pm.collectionVariables.get(\"userroles\");\r",
									"\r",
									"    // const allowedRoles = [\r",
									"    //     \"UserRolesReader\",\r",
									"    //     \"Administrator\",\r",
									"    //     \"SoftwareManager\",\r",
									"    //     \"FirmwareManager\",\r",
									"    //     \"FirmwareReleaseManager\",\r",
									"    //     \"SoftwareReleaseManager\"\r",
									"    // ];\r",
									"\r",
									"    // if (!allowedRoles.includes(selectedRole)) {\r",
									"    //     throw new Error(`Invalid role selected: ${selectedRole}. Allowed roles are: ${allowedRoles.join(\", \")}`);\r",
									"    // }\r",
									"\r",
									"    console.log(\" Validated role:\", selectedRole);\r",
									"})();\r",
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"packages": {},
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "Test Suite",
					"item": [
						{
							"name": "User API",
							"item": [
								{
									"name": "ApiKeys all Code-200",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{Url_apikeys}}",
											"host": [
												"{{Url_apikeys}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "roles Code-403",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 403\", function () {\r",
													"    pm.response.to.have.status(403);\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url_userApi}}{{user_federatedId}}/roles",
											"host": [
												"{{url_userApi}}{{user_federatedId}}"
											],
											"path": [
												"roles"
											]
										}
									},
									"response": []
								},
								{
									"name": "role Code-403",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// let selected = {\r",
													"//     firmware: \"https://dit-sds-users-webapp.azurewebsites.net/api/users\",\r",
													"//     federatedId : \"SESA823251\",\r",
													"//     roles: \"roles\",\r",
													"//     userroles:\"SoftwareManager\"\r",
													"\r",
													"\r",
													"// };\r",
													"\r",
													"// pm.collectionVariables.set(\"federatedId \", selected.federatedId );\r",
													"// pm.collectionVariables.set(\"roles\", selected.roles);\r",
													"// pm.collectionVariables.set(\"userroles\", selected.userroles);\r",
													"\r",
													"\r",
													"// // Optional: Log to console\r",
													"// console.log(\"Selected User:\", selected.federatedId , selected.roles, selected.userroles);"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 403\", function () {\r",
													"    pm.response.to.have.status(403);\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{url_userApi}}{{user_federatedId}}/roles/{{Role_UserRolesReader}}",
											"host": [
												"{{url_userApi}}{{user_federatedId}}"
											],
											"path": [
												"roles",
												"{{Role_UserRolesReader}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "role Code-204",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 403\", function () {\r",
													"    pm.response.to.have.status(403);\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{url_userApi}}{{user_federatedId}}/roles/{{Role_UserRolesReader}}",
											"host": [
												"{{url_userApi}}{{user_federatedId}}"
											],
											"path": [
												"roles",
												"{{Role_UserRolesReader}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Device API",
							"item": [
								{
									"name": "PUT Device Details Code-403",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"let requestId = pm.response.headers.get('Request-Id');\r",
													"pm.environment.set('requestId', requestId);\r",
													"\r",
													"pm.test(\"Status code is 403\", function () {\r",
													"    pm.response.to.have.status(403);\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "[\r\n  {\r\n    \"mac\": \"282986484D84\",\r\n    \"serialNumber\": \"ZA2108005674\",\r\n    \"encryptionKey\": \"a1b2c3d4e5f60718293a4b5c6d7e8f90\"\r\n  }\r\n]"
										},
										"url": {
											"raw": "{{url_devices}}devices",
											"host": [
												"{{url_devices}}devices"
											]
										}
									},
									"response": []
								},
								{
									"name": "PUT Upload Devices Code-403",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let requestId1 = pm.response.headers.get('Request-Id');",
													"pm.environment.set('requestId1', requestId1);",
													"",
													"pm.test(\"Status code is 403\", function () {",
													"    pm.response.to.have.status(403);",
													"});",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "multipart/form-data",
												"type": "text"
											}
										],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "file",
													"type": "file",
													"src": "postman-cloud:///1f04c2db-79af-4330-abbf-52f49b7814aa"
												}
											]
										},
										"url": {
											"raw": "{{url_devices}}/devices/upload",
											"host": [
												"{{url_devices}}"
											],
											"path": [
												"devices",
												"upload"
											]
										}
									},
									"response": []
								},
								{
									"name": "GET Request Status Code-200",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url_devices}}status?requestId={{requestId}}",
											"host": [
												"{{url_devices}}status"
											],
											"query": [
												{
													"key": "requestId",
													"value": "{{requestId}}"
												}
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"packages": {},
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"packages": {},
										"exec": [
											""
										]
									}
								}
							]
						},
						{
							"name": "Firmware API",
							"item": [
								{
									"name": "Firmware API_su",
									"item": [
										{
											"name": "firmware Code-403",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"// Try to get values from the response first\r",
															"try {\r",
															"    const response = pm.response.json();\r",
															"    if (response.appName) {\r",
															"        pm.environment.set(\"appName\", response.appName);\r",
															"    }\r",
															"    if (response.appVersion) {\r",
															"        pm.environment.set(\"appVersion\", response.appVersion);\r",
															"    }\r",
															"} catch (e) {\r",
															"    console.warn(\"No JSON response or missing fields.\");\r",
															"}\r",
															"\r",
															"// Fallback: get values from the request body if not already set\r",
															"if (!pm.environment.get(\"appName\") || !pm.environment.get(\"appVersion\")) {\r",
															"    try {\r",
															"        const requestBody = pm.request.body.raw ? JSON.parse(pm.request.body.raw) : {};\r",
															"        if (requestBody.appName) {\r",
															"            pm.environment.set(\"appName\", requestBody.appName);\r",
															"        }\r",
															"        if (requestBody.appVersion) {\r",
															"            pm.environment.set(\"appVersion\", requestBody.appVersion);\r",
															"        }\r",
															"    } catch (e) {\r",
															"        console.warn(\"Failed to parse request body.\");\r",
															"    }\r",
															"}\r",
															"\r",
															"pm.test(\"Status code is 403\", function () {\r",
															"    pm.response.to.have.status(403);\r",
															"});\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "formdata",
													"formdata": [
														{
															"key": "Criticality",
															"value": "{{criticality_Recommended}}",
															"type": "text"
														},
														{
															"key": "Description",
															"value": "{{Description}}",
															"type": "text"
														},
														{
															"key": "ReleaseNotesUrl",
															"value": "{{ReleaseNotesUrl}}",
															"type": "text"
														},
														{
															"key": "file",
															"type": "file",
															"src": "apc_hw21_su_3-3-0-8.nmc3"
														}
													]
												},
												"url": {
													"raw": "{{Url_firmwareApi}}",
													"host": [
														"{{Url_firmwareApi}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "get-all Code-200",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"// pm.test(\"Status code is 200\", function () {\r",
															"//     pm.response.to.have.status(200);\r",
															"// });\r",
															"\r",
															"// // // Parse response\r",
															"// // let firmwareList = pm.response.json();\r",
															"\r",
															"// // // Randomly select one firmware entry\r",
															"// // let selected = firmwareList[Math.floor(Math.random() * firmwareList.length)];\r",
															"\r",
															"// // // Set variables for next request\r",
															"// // pm.collectionVariables.set(\"appName\", selected.appName);\r",
															"// // pm.collectionVariables.set(\"appVersion\", selected.appVersion);\r",
															"\r",
															"// // console.log(\"Selected firmware:\", selected.appName, selected.appVersion);\r",
															"\r",
															"// let firmwareList = pm.response.json();\r",
															"\r",
															"// // Filter entries that have valid appName and appVersion\r",
															"// let validEntries = firmwareList.filter(fw => fw.appName && fw.appVersion);\r",
															"\r",
															"// // Randomly select one\r",
															"// let selected = validEntries[Math.floor(Math.random() * validEntries.length)];\r",
															"\r",
															"// pm.collectionVariables.set(\"appName\", selected.appName);\r",
															"// pm.collectionVariables.set(\"appVersion\", selected.appVersion);\r",
															"\r",
															"// console.log(\"Selected firmware:\", selected.appName, selected.appVersion);\r",
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{Url_firmwareApi}}",
													"host": [
														"{{Url_firmwareApi}}"
													],
													"query": [
														{
															"key": "snst",
															"value": null,
															"disabled": true
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "get-single Code-200",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{Url_firmwareApi}}/{{appName-su}}/{{Firmware-su1-stagged}}",
													"host": [
														"{{Url_firmwareApi}}"
													],
													"path": [
														"{{appName-su}}",
														"{{Firmware-su1-stagged}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Updating Code-403",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"if (!pm.collectionVariables.get(\"appName\") || !pm.collectionVariables.get(\"appVersion\")) {\r",
															"    throw new Error(\"appName or appVersion is missing. Please run the GET request first.\");\r",
															"}\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 403\", function () {\r",
															"    pm.response.to.have.status(403);\r",
															"});"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"criticality\": \"{{criticality_Optional}}\",\r\n  \"description\": \"{{Description}}\",\r\n  \"releaseNotesUrl\": \"{{ReleaseNotesUrl}}\"\r\n}\r\n\r\n",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{Url_firmwareApi}}/{{appName-su}}/{{Firmware-su1-stagged}}",
													"host": [
														"{{Url_firmwareApi}}"
													],
													"path": [
														"{{appName-su}}",
														"{{Firmware-su1-stagged}}"
													],
													"query": [
														{
															"key": "appName",
															"value": "su",
															"disabled": true
														},
														{
															"key": "appVersion",
															"value": "2.5.5.1",
															"disabled": true
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "get-single Copy 1 Code-200",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{Url_firmwareApi}}/{{appName-su}}/{{Firmware-su1-stagged}}",
													"host": [
														"{{Url_firmwareApi}}"
													],
													"path": [
														"{{appName-su}}",
														"{{Firmware-su1-stagged}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Updating Code-403",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"if (!pm.collectionVariables.get(\"appName\") || !pm.collectionVariables.get(\"appVersion\")) {\r",
															"    throw new Error(\"appName or appVersion is missing. Please run the GET request first.\");\r",
															"}\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 403\", function () {\r",
															"    pm.response.to.have.status(403);\r",
															"});"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"criticality\": \"{{criticality_Optional}}\",\r\n  \"description\": \"{{Description}}\",\r\n  \"releaseNotesUrl\": \"{{ReleaseNotesUrl}}\"\r\n}\r\n\r\n",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{Url_firmwareApi}}/{{appName-su}}/{{Firmware-su1-stagged}}",
													"host": [
														"{{Url_firmwareApi}}"
													],
													"path": [
														"{{appName-su}}",
														"{{Firmware-su1-stagged}}"
													],
													"query": [
														{
															"key": "appName",
															"value": "su",
															"disabled": true
														},
														{
															"key": "appVersion",
															"value": "2.5.5.1",
															"disabled": true
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "get-single Copy2 Code-200",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{Url_firmwareApi}}/{{appName-su}}/{{Firmware-su1-stagged}}",
													"host": [
														"{{Url_firmwareApi}}"
													],
													"path": [
														"{{appName-su}}",
														"{{Firmware-su1-stagged}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Release Code-204",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 204\", function () {\r",
															"    pm.response.to.have.status(204);\r",
															"});\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"release\": true,\r\n  \"releaseDate\": \"2025-06-26T06:48:50.080876Z\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{Url_firmwareApi}}/{{appName-su}}/{{Firmware-su1-stagged}}/release",
													"host": [
														"{{Url_firmwareApi}}"
													],
													"path": [
														"{{appName-su}}",
														"{{Firmware-su1-stagged}}",
														"release"
													]
												}
											},
											"response": []
										},
										{
											"name": "get-single Copy3 Code-200",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{Url_firmwareApi}}/{{appName-su}}/{{Firmware-su1-stagged}}",
													"host": [
														"{{Url_firmwareApi}}"
													],
													"path": [
														"{{appName-su}}",
														"{{Firmware-su1-stagged}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "generate Code-200",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"console.log(`Resolved URL: ${pm.variables.get(\"Url_firmwareApi\")}/${pm.collectionVariables.get(\"appName\")}/${pm.collectionVariables.get(\"appVersion\")}/generate`);\r",
															"\r",
															"\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"console.log(\"Response Body:\", pm.response.text());\r",
															"// console.log(\"Response Headers:\", pm.response.headers.toJSON());\r",
															"\r",
															"\r",
															"if (pm.response.code === 404) {\r",
															"    pm.visualizer.set(`<p>No firmware found for the selected version.</p>`);\r",
															"} else {\r",
															"    // existing logic for Content-Disposition\r",
															"}\r",
															"\r",
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"deviceIds\": [\r\n    \"2829866CDE70\"\r\n  ]\r\n}\r\n",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{Url_firmwareApi}}/{{appName-su}}/{{Firmware-su1-stagged}}/generate",
													"host": [
														"{{Url_firmwareApi}}"
													],
													"path": [
														"{{appName-su}}",
														"{{Firmware-su1-stagged}}",
														"generate"
													]
												}
											},
											"response": []
										},
										{
											"name": "stagged Code-204",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 204\", function () {\r",
															"    pm.response.to.have.status(204);\r",
															"});\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"release\": false\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{Url_firmwareApi}}/{{appName-su}}/{{Firmware-su1-stagged}}/release",
													"host": [
														"{{Url_firmwareApi}}"
													],
													"path": [
														"{{appName-su}}",
														"{{Firmware-su1-stagged}}",
														"release"
													]
												}
											},
											"response": []
										},
										{
											"name": "get-single Copy4 Code-200",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{Url_firmwareApi}}/{{appName-su}}/{{Firmware-su1-stagged}}",
													"host": [
														"{{Url_firmwareApi}}"
													],
													"path": [
														"{{appName-su}}",
														"{{Firmware-su1-stagged}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Deleting Code-403",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"if (!pm.collectionVariables.get(\"appName\") || !pm.collectionVariables.get(\"appVersion\")) {\r",
															"    throw new Error(\"appName or appVersion is missing. Please run the GET request first.\");\r",
															"}\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 403\", function () {\r",
															"    pm.response.to.have.status(403);\r",
															"});"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [],
												"url": {
													"raw": "{{Url_firmwareApi}}/{{appName-su}}/{{Firmware-su1-stagged}}",
													"host": [
														"{{Url_firmwareApi}}"
													],
													"path": [
														"{{appName-su}}",
														"{{Firmware-su1-stagged}}"
													],
													"query": [
														{
															"key": "appName",
															"value": "su",
															"disabled": true
														},
														{
															"key": "appVersion",
															"value": "2.5.5.1",
															"disabled": true
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "get-single Copy5 Code-404",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{Url_firmwareApi}}/{{appName-su}}/{{Firmware-su1-stagged}}",
													"host": [
														"{{Url_firmwareApi}}"
													],
													"path": [
														"{{appName-su}}",
														"{{Firmware-su1-stagged}}"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Firmware API_sy",
									"item": [
										{
											"name": "firmware Code-403",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"// Try to get values from the response first\r",
															"try {\r",
															"    const response = pm.response.json();\r",
															"    if (response.appName) {\r",
															"        pm.environment.set(\"appName\", response.appName);\r",
															"    }\r",
															"    if (response.appVersion) {\r",
															"        pm.environment.set(\"appVersion\", response.appVersion);\r",
															"    }\r",
															"} catch (e) {\r",
															"    console.warn(\"No JSON response or missing fields.\");\r",
															"}\r",
															"\r",
															"// Fallback: get values from the request body if not already set\r",
															"if (!pm.environment.get(\"appName\") || !pm.environment.get(\"appVersion\")) {\r",
															"    try {\r",
															"        const requestBody = pm.request.body.raw ? JSON.parse(pm.request.body.raw) : {};\r",
															"        if (requestBody.appName) {\r",
															"            pm.environment.set(\"appName\", requestBody.appName);\r",
															"        }\r",
															"        if (requestBody.appVersion) {\r",
															"            pm.environment.set(\"appVersion\", requestBody.appVersion);\r",
															"        }\r",
															"    } catch (e) {\r",
															"        console.warn(\"Failed to parse request body.\");\r",
															"    }\r",
															"}\r",
															"\r",
															"pm.test(\"Status code is 403\", function () {\r",
															"    pm.response.to.have.status(403);\r",
															"});\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "formdata",
													"formdata": [
														{
															"key": "Criticality",
															"value": "{{criticality_Recommended}}",
															"type": "text"
														},
														{
															"key": "Description",
															"value": "{{Description}}",
															"type": "text"
														},
														{
															"key": "ReleaseNotesUrl",
															"value": "{{ReleaseNotesUrl}}",
															"type": "text"
														},
														{
															"key": "file",
															"type": "file",
															"src": "apc_hw21_sy_2-5-0-3.nmc3"
														}
													]
												},
												"url": {
													"raw": "{{Url_firmwareApi}}",
													"host": [
														"{{Url_firmwareApi}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "get-all Code-200",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"// pm.test(\"Status code is 200\", function () {\r",
															"//     pm.response.to.have.status(200);\r",
															"// });\r",
															"\r",
															"// // // Parse response\r",
															"// // let firmwareList = pm.response.json();\r",
															"\r",
															"// // // Randomly select one firmware entry\r",
															"// // let selected = firmwareList[Math.floor(Math.random() * firmwareList.length)];\r",
															"\r",
															"// // // Set variables for next request\r",
															"// // pm.collectionVariables.set(\"appName\", selected.appName);\r",
															"// // pm.collectionVariables.set(\"appVersion\", selected.appVersion);\r",
															"\r",
															"// // console.log(\"Selected firmware:\", selected.appName, selected.appVersion);\r",
															"\r",
															"// let firmwareList = pm.response.json();\r",
															"\r",
															"// // Filter entries that have valid appName and appVersion\r",
															"// let validEntries = firmwareList.filter(fw => fw.appName && fw.appVersion);\r",
															"\r",
															"// // Randomly select one\r",
															"// let selected = validEntries[Math.floor(Math.random() * validEntries.length)];\r",
															"\r",
															"// pm.collectionVariables.set(\"appName\", selected.appName);\r",
															"// pm.collectionVariables.set(\"appVersion\", selected.appVersion);\r",
															"\r",
															"// console.log(\"Selected firmware:\", selected.appName, selected.appVersion);\r",
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{Url_firmwareApi}}",
													"host": [
														"{{Url_firmwareApi}}"
													],
													"query": [
														{
															"key": "snst",
															"value": null,
															"disabled": true
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "get-single Code-200",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{Url_firmwareApi}}/{{appName-sy}}/{{Firmware-sy1-stagged}}",
													"host": [
														"{{Url_firmwareApi}}"
													],
													"path": [
														"{{appName-sy}}",
														"{{Firmware-sy1-stagged}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Updating Code-403",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"if (!pm.collectionVariables.get(\"appName\") || !pm.collectionVariables.get(\"appVersion\")) {\r",
															"    throw new Error(\"appName or appVersion is missing. Please run the GET request first.\");\r",
															"}\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 403\", function () {\r",
															"    pm.response.to.have.status(403);\r",
															"});"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"criticality\": \"{{criticality_Optional}}\",\r\n  \"description\": \"{{Description}}\",\r\n  \"releaseNotesUrl\": \"{{ReleaseNotesUrl}}\"\r\n}\r\n\r\n",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{Url_firmwareApi}}/{{appName-sy}}/{{Firmware-sy1-stagged}}",
													"host": [
														"{{Url_firmwareApi}}"
													],
													"path": [
														"{{appName-sy}}",
														"{{Firmware-sy1-stagged}}"
													],
													"query": [
														{
															"key": "appName",
															"value": "su",
															"disabled": true
														},
														{
															"key": "appVersion",
															"value": "2.5.5.1",
															"disabled": true
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "get-single Copy 1 Code-200",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{Url_firmwareApi}}/{{appName-sy}}/{{Firmware-sy1-stagged}}",
													"host": [
														"{{Url_firmwareApi}}"
													],
													"path": [
														"{{appName-sy}}",
														"{{Firmware-sy1-stagged}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Updating Code-403",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"if (!pm.collectionVariables.get(\"appName\") || !pm.collectionVariables.get(\"appVersion\")) {\r",
															"    throw new Error(\"appName or appVersion is missing. Please run the GET request first.\");\r",
															"}\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 403\", function () {\r",
															"    pm.response.to.have.status(403);\r",
															"});"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"criticality\": \"{{criticality_Optional}}\",\r\n  \"description\": \"{{Description}}\",\r\n  \"releaseNotesUrl\": \"{{ReleaseNotesUrl}}\"\r\n}\r\n\r\n",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{Url_firmwareApi}}/{{appName-sy}}/{{Firmware-sy1-stagged}}",
													"host": [
														"{{Url_firmwareApi}}"
													],
													"path": [
														"{{appName-sy}}",
														"{{Firmware-sy1-stagged}}"
													],
													"query": [
														{
															"key": "appName",
															"value": "su",
															"disabled": true
														},
														{
															"key": "appVersion",
															"value": "2.5.5.1",
															"disabled": true
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "get-single Copy2 Code-200",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{Url_firmwareApi}}/{{appName-sy}}/{{Firmware-sy1-stagged}}",
													"host": [
														"{{Url_firmwareApi}}"
													],
													"path": [
														"{{appName-sy}}",
														"{{Firmware-sy1-stagged}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Release Code-204",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 204\", function () {\r",
															"    pm.response.to.have.status(204);\r",
															"});\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"release\": true,\r\n  \"releaseDate\": \"2025-06-26T06:48:50.080876Z\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{Url_firmwareApi}}/{{appName-sy}}/{{Firmware-sy1-stagged}}/release",
													"host": [
														"{{Url_firmwareApi}}"
													],
													"path": [
														"{{appName-sy}}",
														"{{Firmware-sy1-stagged}}",
														"release"
													]
												}
											},
											"response": []
										},
										{
											"name": "get-single Copy3 Code-200",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{Url_firmwareApi}}/{{appName-sy}}/{{Firmware-sy1-stagged}}",
													"host": [
														"{{Url_firmwareApi}}"
													],
													"path": [
														"{{appName-sy}}",
														"{{Firmware-sy1-stagged}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "generate Code-200",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"console.log(`Resolved URL: ${pm.variables.get(\"Url_firmwareApi\")}/${pm.collectionVariables.get(\"appName\")}/${pm.collectionVariables.get(\"appVersion\")}/generate`);\r",
															"\r",
															"\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"console.log(\"Response Body:\", pm.response.text());\r",
															"// console.log(\"Response Headers:\", pm.response.headers.toJSON());\r",
															"\r",
															"\r",
															"if (pm.response.code === 404) {\r",
															"    pm.visualizer.set(`<p>No firmware found for the selected version.</p>`);\r",
															"} else {\r",
															"    // existing logic for Content-Disposition\r",
															"}\r",
															"\r",
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"deviceIds\": [\r\n    \"2829866CDE70\"\r\n  ]\r\n}\r\n",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{Url_firmwareApi}}/{{appName-sy}}/{{Firmware-sy1-stagged}}/generate",
													"host": [
														"{{Url_firmwareApi}}"
													],
													"path": [
														"{{appName-sy}}",
														"{{Firmware-sy1-stagged}}",
														"generate"
													]
												}
											},
											"response": []
										},
										{
											"name": "stagged Code-204",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 204\", function () {\r",
															"    pm.response.to.have.status(204);\r",
															"});\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"release\": false\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{Url_firmwareApi}}/{{appName-sy}}/{{Firmware-sy1-stagged}}/release",
													"host": [
														"{{Url_firmwareApi}}"
													],
													"path": [
														"{{appName-sy}}",
														"{{Firmware-sy1-stagged}}",
														"release"
													]
												}
											},
											"response": []
										},
										{
											"name": "get-single Copy4 Code-200",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{Url_firmwareApi}}/{{appName-sy}}/{{Firmware-sy1-stagged}}",
													"host": [
														"{{Url_firmwareApi}}"
													],
													"path": [
														"{{appName-sy}}",
														"{{Firmware-sy1-stagged}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Deleting Code-403",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"if (!pm.collectionVariables.get(\"appName\") || !pm.collectionVariables.get(\"appVersion\")) {\r",
															"    throw new Error(\"appName or appVersion is missing. Please run the GET request first.\");\r",
															"}\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 403\", function () {\r",
															"    pm.response.to.have.status(403);\r",
															"});"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [],
												"url": {
													"raw": "{{Url_firmwareApi}}/{{appName-sy}}/{{Firmware-sy1-stagged}}",
													"host": [
														"{{Url_firmwareApi}}"
													],
													"path": [
														"{{appName-sy}}",
														"{{Firmware-sy1-stagged}}"
													],
													"query": [
														{
															"key": "appName",
															"value": "su",
															"disabled": true
														},
														{
															"key": "appVersion",
															"value": "2.5.5.1",
															"disabled": true
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "get-single Copy5 Code-404",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{Url_firmwareApi}}/{{appName-sy}}/{{Firmware-sy1-stagged}}",
													"host": [
														"{{Url_firmwareApi}}"
													],
													"path": [
														"{{appName-sy}}",
														"{{Firmware-sy1-stagged}}"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Firmware API_sucan",
									"item": [
										{
											"name": "firmware Code-403",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"// Try to get values from the response first\r",
															"try {\r",
															"    const response = pm.response.json();\r",
															"    if (response.appName) {\r",
															"        pm.environment.set(\"appName\", response.appName);\r",
															"    }\r",
															"    if (response.appVersion) {\r",
															"        pm.environment.set(\"appVersion\", response.appVersion);\r",
															"    }\r",
															"} catch (e) {\r",
															"    console.warn(\"No JSON response or missing fields.\");\r",
															"}\r",
															"\r",
															"// Fallback: get values from the request body if not already set\r",
															"if (!pm.environment.get(\"appName\") || !pm.environment.get(\"appVersion\")) {\r",
															"    try {\r",
															"        const requestBody = pm.request.body.raw ? JSON.parse(pm.request.body.raw) : {};\r",
															"        if (requestBody.appName) {\r",
															"            pm.environment.set(\"appName\", requestBody.appName);\r",
															"        }\r",
															"        if (requestBody.appVersion) {\r",
															"            pm.environment.set(\"appVersion\", requestBody.appVersion);\r",
															"        }\r",
															"    } catch (e) {\r",
															"        console.warn(\"Failed to parse request body.\");\r",
															"    }\r",
															"}\r",
															"\r",
															"pm.test(\"Status code is 403\", function () {\r",
															"    pm.response.to.have.status(403);\r",
															"});\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "formdata",
													"formdata": [
														{
															"key": "Criticality",
															"value": "{{criticality_Recommended}}",
															"type": "text"
														},
														{
															"key": "Description",
															"value": "{{Description}}",
															"type": "text"
														},
														{
															"key": "ReleaseNotesUrl",
															"value": "{{ReleaseNotesUrl}}",
															"type": "text"
														},
														{
															"key": "file",
															"type": "file",
															"src": "apc_hw21_sucan_3-3-0-3.nmc3"
														}
													]
												},
												"url": {
													"raw": "{{Url_firmwareApi}}",
													"host": [
														"{{Url_firmwareApi}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "get-all Code-200",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"// pm.test(\"Status code is 200\", function () {\r",
															"//     pm.response.to.have.status(200);\r",
															"// });\r",
															"\r",
															"// // // Parse response\r",
															"// // let firmwareList = pm.response.json();\r",
															"\r",
															"// // // Randomly select one firmware entry\r",
															"// // let selected = firmwareList[Math.floor(Math.random() * firmwareList.length)];\r",
															"\r",
															"// // // Set variables for next request\r",
															"// // pm.collectionVariables.set(\"appName\", selected.appName);\r",
															"// // pm.collectionVariables.set(\"appVersion\", selected.appVersion);\r",
															"\r",
															"// // console.log(\"Selected firmware:\", selected.appName, selected.appVersion);\r",
															"\r",
															"// let firmwareList = pm.response.json();\r",
															"\r",
															"// // Filter entries that have valid appName and appVersion\r",
															"// let validEntries = firmwareList.filter(fw => fw.appName && fw.appVersion);\r",
															"\r",
															"// // Randomly select one\r",
															"// let selected = validEntries[Math.floor(Math.random() * validEntries.length)];\r",
															"\r",
															"// pm.collectionVariables.set(\"appName\", selected.appName);\r",
															"// pm.collectionVariables.set(\"appVersion\", selected.appVersion);\r",
															"\r",
															"// console.log(\"Selected firmware:\", selected.appName, selected.appVersion);\r",
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{Url_firmwareApi}}",
													"host": [
														"{{Url_firmwareApi}}"
													],
													"query": [
														{
															"key": "snst",
															"value": null,
															"disabled": true
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "get-single Code-200",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{Url_firmwareApi}}/{{appName-sucan}}/{{Firmware-sucan-stagged}}",
													"host": [
														"{{Url_firmwareApi}}"
													],
													"path": [
														"{{appName-sucan}}",
														"{{Firmware-sucan-stagged}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Updating Code-403",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"if (!pm.collectionVariables.get(\"appName\") || !pm.collectionVariables.get(\"appVersion\")) {\r",
															"    throw new Error(\"appName or appVersion is missing. Please run the GET request first.\");\r",
															"}\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 403\", function () {\r",
															"    pm.response.to.have.status(403);\r",
															"});"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"criticality\": \"{{criticality_Optional}}\",\r\n  \"description\": \"{{Description}}\",\r\n  \"releaseNotesUrl\": \"{{ReleaseNotesUrl}}\"\r\n}\r\n\r\n",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{Url_firmwareApi}}/{{appName-sucan}}/{{Firmware-sucan-stagged}}",
													"host": [
														"{{Url_firmwareApi}}"
													],
													"path": [
														"{{appName-sucan}}",
														"{{Firmware-sucan-stagged}}"
													],
													"query": [
														{
															"key": "appName",
															"value": "su",
															"disabled": true
														},
														{
															"key": "appVersion",
															"value": "2.5.5.1",
															"disabled": true
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "get-single Copy 1 Code-200",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{Url_firmwareApi}}/{{appName-sucan}}/{{Firmware-sucan-stagged}}",
													"host": [
														"{{Url_firmwareApi}}"
													],
													"path": [
														"{{appName-sucan}}",
														"{{Firmware-sucan-stagged}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Updating Code-403",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"if (!pm.collectionVariables.get(\"appName\") || !pm.collectionVariables.get(\"appVersion\")) {\r",
															"    throw new Error(\"appName or appVersion is missing. Please run the GET request first.\");\r",
															"}\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 403\", function () {\r",
															"    pm.response.to.have.status(403);\r",
															"});"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"criticality\": \"{{criticality_Optional}}\",\r\n  \"description\": \"{{Description}}\",\r\n  \"releaseNotesUrl\": \"{{ReleaseNotesUrl}}\"\r\n}\r\n\r\n",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{Url_firmwareApi}}/{{appName-sucan}}/{{Firmware-sucan-stagged}}",
													"host": [
														"{{Url_firmwareApi}}"
													],
													"path": [
														"{{appName-sucan}}",
														"{{Firmware-sucan-stagged}}"
													],
													"query": [
														{
															"key": "appName",
															"value": "su",
															"disabled": true
														},
														{
															"key": "appVersion",
															"value": "2.5.5.1",
															"disabled": true
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "get-single Copy2 Code-200",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{Url_firmwareApi}}/{{appName-sucan}}/{{Firmware-sucan-stagged}}",
													"host": [
														"{{Url_firmwareApi}}"
													],
													"path": [
														"{{appName-sucan}}",
														"{{Firmware-sucan-stagged}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Release Code-204",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 204\", function () {\r",
															"    pm.response.to.have.status(204);\r",
															"});\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"release\": true,\r\n  \"releaseDate\": \"2025-06-26T06:48:50.080876Z\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{Url_firmwareApi}}/{{appName-sucan}}/{{Firmware-sucan-stagged}}/release",
													"host": [
														"{{Url_firmwareApi}}"
													],
													"path": [
														"{{appName-sucan}}",
														"{{Firmware-sucan-stagged}}",
														"release"
													]
												}
											},
											"response": []
										},
										{
											"name": "get-single Copy3 Code-200",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{Url_firmwareApi}}/{{appName-sucan}}/{{Firmware-sucan-stagged}}",
													"host": [
														"{{Url_firmwareApi}}"
													],
													"path": [
														"{{appName-sucan}}",
														"{{Firmware-sucan-stagged}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "generate Code-200",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"console.log(`Resolved URL: ${pm.variables.get(\"Url_firmwareApi\")}/${pm.collectionVariables.get(\"appName\")}/${pm.collectionVariables.get(\"appVersion\")}/generate`);\r",
															"\r",
															"\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"console.log(\"Response Body:\", pm.response.text());\r",
															"// console.log(\"Response Headers:\", pm.response.headers.toJSON());\r",
															"\r",
															"\r",
															"if (pm.response.code === 404) {\r",
															"    pm.visualizer.set(`<p>No firmware found for the selected version.</p>`);\r",
															"} else {\r",
															"    // existing logic for Content-Disposition\r",
															"}\r",
															"\r",
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"deviceIds\": [\r\n    \"2829866CDE70\"\r\n  ]\r\n}\r\n",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{Url_firmwareApi}}/{{appName-sucan}}/{{Firmware-sucan-stagged}}/generate",
													"host": [
														"{{Url_firmwareApi}}"
													],
													"path": [
														"{{appName-sucan}}",
														"{{Firmware-sucan-stagged}}",
														"generate"
													]
												}
											},
											"response": []
										},
										{
											"name": "stagged Code-204",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 204\", function () {\r",
															"    pm.response.to.have.status(204);\r",
															"});\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"release\": false\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{Url_firmwareApi}}/{{appName-sucan}}/{{Firmware-sucan-stagged}}/release",
													"host": [
														"{{Url_firmwareApi}}"
													],
													"path": [
														"{{appName-sucan}}",
														"{{Firmware-sucan-stagged}}",
														"release"
													]
												}
											},
											"response": []
										},
										{
											"name": "get-single Copy4 Code-200",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{Url_firmwareApi}}/{{appName-sucan}}/{{Firmware-sucan-stagged}}",
													"host": [
														"{{Url_firmwareApi}}"
													],
													"path": [
														"{{appName-sucan}}",
														"{{Firmware-sucan-stagged}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Deleting Code-403",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"if (!pm.collectionVariables.get(\"appName\") || !pm.collectionVariables.get(\"appVersion\")) {\r",
															"    throw new Error(\"appName or appVersion is missing. Please run the GET request first.\");\r",
															"}\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 403\", function () {\r",
															"    pm.response.to.have.status(403);\r",
															"});"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [],
												"url": {
													"raw": "{{Url_firmwareApi}}/{{appName-sucan}}/{{Firmware-sucan-stagged}}",
													"host": [
														"{{Url_firmwareApi}}"
													],
													"path": [
														"{{appName-sucan}}",
														"{{Firmware-sucan-stagged}}"
													],
													"query": [
														{
															"key": "appName",
															"value": "su",
															"disabled": true
														},
														{
															"key": "appVersion",
															"value": "2.5.5.1",
															"disabled": true
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "get-single Copy5 Code-404",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{Url_firmwareApi}}/{{appName-sucan}}/{{Firmware-sucan-stagged}}",
													"host": [
														"{{Url_firmwareApi}}"
													],
													"path": [
														"{{appName-sucan}}",
														"{{Firmware-sucan-stagged}}"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Firmware API_rpdu2g",
									"item": [
										{
											"name": "firmware Code-403",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"// Try to get values from the response first\r",
															"try {\r",
															"    const response = pm.response.json();\r",
															"    if (response.appName) {\r",
															"        pm.environment.set(\"appName\", response.appName);\r",
															"    }\r",
															"    if (response.appVersion) {\r",
															"        pm.environment.set(\"appVersion\", response.appVersion);\r",
															"    }\r",
															"} catch (e) {\r",
															"    console.warn(\"No JSON response or missing fields.\");\r",
															"}\r",
															"\r",
															"// Fallback: get values from the request body if not already set\r",
															"if (!pm.environment.get(\"appName\") || !pm.environment.get(\"appVersion\")) {\r",
															"    try {\r",
															"        const requestBody = pm.request.body.raw ? JSON.parse(pm.request.body.raw) : {};\r",
															"        if (requestBody.appName) {\r",
															"            pm.environment.set(\"appName\", requestBody.appName);\r",
															"        }\r",
															"        if (requestBody.appVersion) {\r",
															"            pm.environment.set(\"appVersion\", requestBody.appVersion);\r",
															"        }\r",
															"    } catch (e) {\r",
															"        console.warn(\"Failed to parse request body.\");\r",
															"    }\r",
															"}\r",
															"\r",
															"pm.test(\"Status code is 403\", function () {\r",
															"    pm.response.to.have.status(403);\r",
															"});\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "formdata",
													"formdata": [
														{
															"key": "Criticality",
															"value": "{{criticality_Recommended}}",
															"type": "text"
														},
														{
															"key": "Description",
															"value": "{{Description}}",
															"type": "text"
														},
														{
															"key": "ReleaseNotesUrl",
															"value": "{{ReleaseNotesUrl}}",
															"type": "text"
														},
														{
															"key": "file",
															"type": "file",
															"src": "apc_hw21_rpdu2g_3-2-1-2.nmc3"
														}
													]
												},
												"url": {
													"raw": "{{Url_firmwareApi}}",
													"host": [
														"{{Url_firmwareApi}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "get-all Code-200",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"// pm.test(\"Status code is 200\", function () {\r",
															"//     pm.response.to.have.status(200);\r",
															"// });\r",
															"\r",
															"// // // Parse response\r",
															"// // let firmwareList = pm.response.json();\r",
															"\r",
															"// // // Randomly select one firmware entry\r",
															"// // let selected = firmwareList[Math.floor(Math.random() * firmwareList.length)];\r",
															"\r",
															"// // // Set variables for next request\r",
															"// // pm.collectionVariables.set(\"appName\", selected.appName);\r",
															"// // pm.collectionVariables.set(\"appVersion\", selected.appVersion);\r",
															"\r",
															"// // console.log(\"Selected firmware:\", selected.appName, selected.appVersion);\r",
															"\r",
															"// let firmwareList = pm.response.json();\r",
															"\r",
															"// // Filter entries that have valid appName and appVersion\r",
															"// let validEntries = firmwareList.filter(fw => fw.appName && fw.appVersion);\r",
															"\r",
															"// // Randomly select one\r",
															"// let selected = validEntries[Math.floor(Math.random() * validEntries.length)];\r",
															"\r",
															"// pm.collectionVariables.set(\"appName\", selected.appName);\r",
															"// pm.collectionVariables.set(\"appVersion\", selected.appVersion);\r",
															"\r",
															"// console.log(\"Selected firmware:\", selected.appName, selected.appVersion);\r",
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{Url_firmwareApi}}",
													"host": [
														"{{Url_firmwareApi}}"
													],
													"query": [
														{
															"key": "snst",
															"value": null,
															"disabled": true
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "get-single Code-200",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{Url_firmwareApi}}/{{appName-rpdu2g}}/{{Firmware-rpdu2g1-stagged}}",
													"host": [
														"{{Url_firmwareApi}}"
													],
													"path": [
														"{{appName-rpdu2g}}",
														"{{Firmware-rpdu2g1-stagged}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Updating Code-403",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"if (!pm.collectionVariables.get(\"appName\") || !pm.collectionVariables.get(\"appVersion\")) {\r",
															"    throw new Error(\"appName or appVersion is missing. Please run the GET request first.\");\r",
															"}\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 403\", function () {\r",
															"    pm.response.to.have.status(403);\r",
															"});"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"criticality\": \"{{criticality_Optional}}\",\r\n  \"description\": \"{{Description}}\",\r\n  \"releaseNotesUrl\": \"{{ReleaseNotesUrl}}\"\r\n}\r\n\r\n",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{Url_firmwareApi}}/{{appName-rpdu2g}}/{{Firmware-rpdu2g1-stagged}}",
													"host": [
														"{{Url_firmwareApi}}"
													],
													"path": [
														"{{appName-rpdu2g}}",
														"{{Firmware-rpdu2g1-stagged}}"
													],
													"query": [
														{
															"key": "appName",
															"value": "su",
															"disabled": true
														},
														{
															"key": "appVersion",
															"value": "2.5.5.1",
															"disabled": true
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "get-single Copy 1 Code-200",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{Url_firmwareApi}}/{{appName-rpdu2g}}/{{Firmware-rpdu2g1-stagged}}",
													"host": [
														"{{Url_firmwareApi}}"
													],
													"path": [
														"{{appName-rpdu2g}}",
														"{{Firmware-rpdu2g1-stagged}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Updating Code-403",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"if (!pm.collectionVariables.get(\"appName\") || !pm.collectionVariables.get(\"appVersion\")) {\r",
															"    throw new Error(\"appName or appVersion is missing. Please run the GET request first.\");\r",
															"}\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 403\", function () {\r",
															"    pm.response.to.have.status(403);\r",
															"});"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"criticality\": \"{{criticality_Optional}}\",\r\n  \"description\": \"{{Description}}\",\r\n  \"releaseNotesUrl\": \"{{ReleaseNotesUrl}}\"\r\n}\r\n\r\n",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{Url_firmwareApi}}/{{appName-rpdu2g}}/{{Firmware-rpdu2g1-stagged}}",
													"host": [
														"{{Url_firmwareApi}}"
													],
													"path": [
														"{{appName-rpdu2g}}",
														"{{Firmware-rpdu2g1-stagged}}"
													],
													"query": [
														{
															"key": "appName",
															"value": "su",
															"disabled": true
														},
														{
															"key": "appVersion",
															"value": "2.5.5.1",
															"disabled": true
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "get-single Copy2 Code-200",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{Url_firmwareApi}}/{{appName-rpdu2g}}/{{Firmware-rpdu2g1-stagged}}",
													"host": [
														"{{Url_firmwareApi}}"
													],
													"path": [
														"{{appName-rpdu2g}}",
														"{{Firmware-rpdu2g1-stagged}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Release Code-204",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 204\", function () {\r",
															"    pm.response.to.have.status(204);\r",
															"});\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"release\": true,\r\n  \"releaseDate\": \"2025-06-26T06:48:50.080876Z\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{Url_firmwareApi}}/{{appName-rpdu2g}}/{{Firmware-rpdu2g1-stagged}}/release",
													"host": [
														"{{Url_firmwareApi}}"
													],
													"path": [
														"{{appName-rpdu2g}}",
														"{{Firmware-rpdu2g1-stagged}}",
														"release"
													]
												}
											},
											"response": []
										},
										{
											"name": "get-single Copy3 Code-200",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{Url_firmwareApi}}/{{appName-rpdu2g}}/{{Firmware-rpdu2g1-stagged}}",
													"host": [
														"{{Url_firmwareApi}}"
													],
													"path": [
														"{{appName-rpdu2g}}",
														"{{Firmware-rpdu2g1-stagged}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "generate Code-200",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"console.log(`Resolved URL: ${pm.variables.get(\"Url_firmwareApi\")}/${pm.collectionVariables.get(\"appName\")}/${pm.collectionVariables.get(\"appVersion\")}/generate`);\r",
															"\r",
															"\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"console.log(\"Response Body:\", pm.response.text());\r",
															"// console.log(\"Response Headers:\", pm.response.headers.toJSON());\r",
															"\r",
															"\r",
															"if (pm.response.code === 404) {\r",
															"    pm.visualizer.set(`<p>No firmware found for the selected version.</p>`);\r",
															"} else {\r",
															"    // existing logic for Content-Disposition\r",
															"}\r",
															"\r",
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"deviceIds\": [\r\n    \"2829866CDE70\"\r\n  ]\r\n}\r\n",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{Url_firmwareApi}}/{{appName-rpdu2g}}/{{Firmware-rpdu2g1-stagged}}/generate",
													"host": [
														"{{Url_firmwareApi}}"
													],
													"path": [
														"{{appName-rpdu2g}}",
														"{{Firmware-rpdu2g1-stagged}}",
														"generate"
													]
												}
											},
											"response": []
										},
										{
											"name": "stagged Code-204",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 204\", function () {\r",
															"    pm.response.to.have.status(204);\r",
															"});\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"release\": false\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{Url_firmwareApi}}/{{appName-rpdu2g}}/{{Firmware-rpdu2g1-stagged}}/release",
													"host": [
														"{{Url_firmwareApi}}"
													],
													"path": [
														"{{appName-rpdu2g}}",
														"{{Firmware-rpdu2g1-stagged}}",
														"release"
													]
												}
											},
											"response": []
										},
										{
											"name": "get-single Copy4 Code-200",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{Url_firmwareApi}}/{{appName-rpdu2g}}/{{Firmware-rpdu2g1-stagged}}",
													"host": [
														"{{Url_firmwareApi}}"
													],
													"path": [
														"{{appName-rpdu2g}}",
														"{{Firmware-rpdu2g1-stagged}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Deleting Code-403",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"if (!pm.collectionVariables.get(\"appName\") || !pm.collectionVariables.get(\"appVersion\")) {\r",
															"    throw new Error(\"appName or appVersion is missing. Please run the GET request first.\");\r",
															"}\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 403\", function () {\r",
															"    pm.response.to.have.status(403);\r",
															"});"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [],
												"url": {
													"raw": "{{Url_firmwareApi}}/{{appName-rpdu2g}}/{{Firmware-rpdu2g1-stagged}}",
													"host": [
														"{{Url_firmwareApi}}"
													],
													"path": [
														"{{appName-rpdu2g}}",
														"{{Firmware-rpdu2g1-stagged}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "get-single Copy5 Code-404",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{Url_firmwareApi}}/{{appName-rpdu2g}}/{{Firmware-rpdu2g1-stagged}}",
													"host": [
														"{{Url_firmwareApi}}"
													],
													"path": [
														"{{appName-rpdu2g}}",
														"{{Firmware-rpdu2g1-stagged}}"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Firmware API_eu1p",
									"item": [
										{
											"name": "firmware Code-403",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"// Try to get values from the response first\r",
															"try {\r",
															"    const response = pm.response.json();\r",
															"    if (response.appName) {\r",
															"        pm.environment.set(\"appName\", response.appName);\r",
															"    }\r",
															"    if (response.appVersion) {\r",
															"        pm.environment.set(\"appVersion\", response.appVersion);\r",
															"    }\r",
															"} catch (e) {\r",
															"    console.warn(\"No JSON response or missing fields.\");\r",
															"}\r",
															"\r",
															"// Fallback: get values from the request body if not already set\r",
															"if (!pm.environment.get(\"appName\") || !pm.environment.get(\"appVersion\")) {\r",
															"    try {\r",
															"        const requestBody = pm.request.body.raw ? JSON.parse(pm.request.body.raw) : {};\r",
															"        if (requestBody.appName) {\r",
															"            pm.environment.set(\"appName\", requestBody.appName);\r",
															"        }\r",
															"        if (requestBody.appVersion) {\r",
															"            pm.environment.set(\"appVersion\", requestBody.appVersion);\r",
															"        }\r",
															"    } catch (e) {\r",
															"        console.warn(\"Failed to parse request body.\");\r",
															"    }\r",
															"}\r",
															"\r",
															"pm.test(\"Status code is 403\", function () {\r",
															"    pm.response.to.have.status(403);\r",
															"});\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "formdata",
													"formdata": [
														{
															"key": "Criticality",
															"value": "{{criticality_Recommended}}",
															"type": "text"
														},
														{
															"key": "Description",
															"value": "{{Description}}",
															"type": "text"
														},
														{
															"key": "ReleaseNotesUrl",
															"value": "{{ReleaseNotesUrl}}",
															"type": "text"
														},
														{
															"key": "file",
															"type": "file",
															"src": "apc_hw21_eu1p_3-2-0-6.nmc3"
														}
													]
												},
												"url": {
													"raw": "{{Url_firmwareApi}}",
													"host": [
														"{{Url_firmwareApi}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "get-all Code-200",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"// pm.test(\"Status code is 200\", function () {\r",
															"//     pm.response.to.have.status(200);\r",
															"// });\r",
															"\r",
															"// // // Parse response\r",
															"// // let firmwareList = pm.response.json();\r",
															"\r",
															"// // // Randomly select one firmware entry\r",
															"// // let selected = firmwareList[Math.floor(Math.random() * firmwareList.length)];\r",
															"\r",
															"// // // Set variables for next request\r",
															"// // pm.collectionVariables.set(\"appName\", selected.appName);\r",
															"// // pm.collectionVariables.set(\"appVersion\", selected.appVersion);\r",
															"\r",
															"// // console.log(\"Selected firmware:\", selected.appName, selected.appVersion);\r",
															"\r",
															"// let firmwareList = pm.response.json();\r",
															"\r",
															"// // Filter entries that have valid appName and appVersion\r",
															"// let validEntries = firmwareList.filter(fw => fw.appName && fw.appVersion);\r",
															"\r",
															"// // Randomly select one\r",
															"// let selected = validEntries[Math.floor(Math.random() * validEntries.length)];\r",
															"\r",
															"// pm.collectionVariables.set(\"appName\", selected.appName);\r",
															"// pm.collectionVariables.set(\"appVersion\", selected.appVersion);\r",
															"\r",
															"// console.log(\"Selected firmware:\", selected.appName, selected.appVersion);\r",
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{Url_firmwareApi}}",
													"host": [
														"{{Url_firmwareApi}}"
													],
													"query": [
														{
															"key": "snst",
															"value": null,
															"disabled": true
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "get-single Code-200",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{Url_firmwareApi}}/{{appName-eu1p}}/{{Firmware-eu1p1-stagged}}",
													"host": [
														"{{Url_firmwareApi}}"
													],
													"path": [
														"{{appName-eu1p}}",
														"{{Firmware-eu1p1-stagged}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Updating Code-403",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"if (!pm.collectionVariables.get(\"appName\") || !pm.collectionVariables.get(\"appVersion\")) {\r",
															"    throw new Error(\"appName or appVersion is missing. Please run the GET request first.\");\r",
															"}\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 403\", function () {\r",
															"    pm.response.to.have.status(403);\r",
															"});"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"criticality\": \"{{criticality_Optional}}\",\r\n  \"description\": \"{{Description}}\",\r\n  \"releaseNotesUrl\": \"{{ReleaseNotesUrl}}\"\r\n}\r\n\r\n",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{Url_firmwareApi}}/{{appName-eu1p}}/{{Firmware-eu1p1-stagged}}",
													"host": [
														"{{Url_firmwareApi}}"
													],
													"path": [
														"{{appName-eu1p}}",
														"{{Firmware-eu1p1-stagged}}"
													],
													"query": [
														{
															"key": "appName",
															"value": "su",
															"disabled": true
														},
														{
															"key": "appVersion",
															"value": "2.5.5.1",
															"disabled": true
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "get-single Copy 1 Code-200",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{Url_firmwareApi}}/{{appName-eu1p}}/{{Firmware-eu1p1-stagged}}",
													"host": [
														"{{Url_firmwareApi}}"
													],
													"path": [
														"{{appName-eu1p}}",
														"{{Firmware-eu1p1-stagged}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Updating Code-403",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"if (!pm.collectionVariables.get(\"appName\") || !pm.collectionVariables.get(\"appVersion\")) {\r",
															"    throw new Error(\"appName or appVersion is missing. Please run the GET request first.\");\r",
															"}\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 403\", function () {\r",
															"    pm.response.to.have.status(403);\r",
															"});"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"criticality\": \"{{criticality_Optional}}\",\r\n  \"description\": \"{{Description}}\",\r\n  \"releaseNotesUrl\": \"{{ReleaseNotesUrl}}\"\r\n}\r\n\r\n",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{Url_firmwareApi}}/{{appName-eu1p}}/{{Firmware-eu1p1-stagged}}",
													"host": [
														"{{Url_firmwareApi}}"
													],
													"path": [
														"{{appName-eu1p}}",
														"{{Firmware-eu1p1-stagged}}"
													],
													"query": [
														{
															"key": "appName",
															"value": "su",
															"disabled": true
														},
														{
															"key": "appVersion",
															"value": "2.5.5.1",
															"disabled": true
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "get-single Copy2 Code-200",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{Url_firmwareApi}}/{{appName-eu1p}}/{{Firmware-eu1p1-stagged}}",
													"host": [
														"{{Url_firmwareApi}}"
													],
													"path": [
														"{{appName-eu1p}}",
														"{{Firmware-eu1p1-stagged}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Release Code-204",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 204\", function () {\r",
															"    pm.response.to.have.status(204);\r",
															"});\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"release\": true,\r\n  \"releaseDate\": \"2025-06-26T06:48:50.080876Z\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{Url_firmwareApi}}/{{appName-eu1p}}/{{Firmware-eu1p1-stagged}}/release",
													"host": [
														"{{Url_firmwareApi}}"
													],
													"path": [
														"{{appName-eu1p}}",
														"{{Firmware-eu1p1-stagged}}",
														"release"
													]
												}
											},
											"response": []
										},
										{
											"name": "get-single Copy3 Code-200",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{Url_firmwareApi}}/{{appName-eu1p}}/{{Firmware-eu1p1-stagged}}",
													"host": [
														"{{Url_firmwareApi}}"
													],
													"path": [
														"{{appName-eu1p}}",
														"{{Firmware-eu1p1-stagged}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "generate Code-200",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"console.log(`Resolved URL: ${pm.variables.get(\"Url_firmwareApi\")}/${pm.collectionVariables.get(\"appName\")}/${pm.collectionVariables.get(\"appVersion\")}/generate`);\r",
															"\r",
															"\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"console.log(\"Response Body:\", pm.response.text());\r",
															"// console.log(\"Response Headers:\", pm.response.headers.toJSON());\r",
															"\r",
															"\r",
															"if (pm.response.code === 404) {\r",
															"    pm.visualizer.set(`<p>No firmware found for the selected version.</p>`);\r",
															"} else {\r",
															"    // existing logic for Content-Disposition\r",
															"}\r",
															"\r",
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"deviceIds\": [\r\n    \"2829866CDE70\"\r\n  ]\r\n}\r\n",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{Url_firmwareApi}}/{{appName-eu1p}}/{{Firmware-eu1p1-stagged}}/generate",
													"host": [
														"{{Url_firmwareApi}}"
													],
													"path": [
														"{{appName-eu1p}}",
														"{{Firmware-eu1p1-stagged}}",
														"generate"
													]
												}
											},
											"response": []
										},
										{
											"name": "stagged Code-204",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 204\", function () {\r",
															"    pm.response.to.have.status(204);\r",
															"});\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"release\": false\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{Url_firmwareApi}}/{{appName-eu1p}}/{{Firmware-eu1p1-stagged}}/release",
													"host": [
														"{{Url_firmwareApi}}"
													],
													"path": [
														"{{appName-eu1p}}",
														"{{Firmware-eu1p1-stagged}}",
														"release"
													]
												}
											},
											"response": []
										},
										{
											"name": "get-single Copy4 Code-200",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{Url_firmwareApi}}/{{appName-eu1p}}/{{Firmware-eu1p1-stagged}}",
													"host": [
														"{{Url_firmwareApi}}"
													],
													"path": [
														"{{appName-eu1p}}",
														"{{Firmware-eu1p1-stagged}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Deleting Code-403",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"if (!pm.collectionVariables.get(\"appName\") || !pm.collectionVariables.get(\"appVersion\")) {\r",
															"    throw new Error(\"appName or appVersion is missing. Please run the GET request first.\");\r",
															"}\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 403\", function () {\r",
															"    pm.response.to.have.status(403);\r",
															"});"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [],
												"url": {
													"raw": "{{Url_firmwareApi}}/{{appName-eu1p}}/{{Firmware-eu1p1-stagged}}",
													"host": [
														"{{Url_firmwareApi}}"
													],
													"path": [
														"{{appName-eu1p}}",
														"{{Firmware-eu1p1-stagged}}"
													],
													"query": [
														{
															"key": "appName",
															"value": "su",
															"disabled": true
														},
														{
															"key": "appVersion",
															"value": "2.5.5.1",
															"disabled": true
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "get-single Copy5 Code-404",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{Url_firmwareApi}}/{{appName-eu1p}}/{{Firmware-eu1p1-stagged}}",
													"host": [
														"{{Url_firmwareApi}}"
													],
													"path": [
														"{{appName-eu1p}}",
														"{{Firmware-eu1p1-stagged}}"
													]
												}
											},
											"response": []
										}
									]
								}
							]
						},
						{
							"name": "Software API",
							"item": [
								{
									"name": "win",
									"item": [
										{
											"name": "Software API_win- stagged",
											"item": [
												{
													"name": "single-software-win Code-200",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Response is exactly an empty array\", function () {\r",
																	"    pm.expect(pm.response.text()).to.eql(\"[]\");\r",
																	"});\r",
																	""
																],
																"type": "text/javascript",
																"packages": {}
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{Url_software}}software?name={{Software_Name}}&version={{Software-win-stagged}}&platform={{Software_Platform_win}}",
															"host": [
																"{{Url_software}}software"
															],
															"query": [
																{
																	"key": "name",
																	"value": "{{Software_Name}}"
																},
																{
																	"key": "version",
																	"value": "{{Software-win-stagged}}"
																},
																{
																	"key": "platform",
																	"value": "{{Software_Platform_win}}"
																}
															]
														}
													},
													"response": []
												},
												{
													"name": "all-software-win Code-200",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});\r",
																	""
																],
																"type": "text/javascript",
																"packages": {}
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{Url_software}}software?name={{Software_Name}}",
															"host": [
																"{{Url_software}}software"
															],
															"query": [
																{
																	"key": "name",
																	"value": "{{Software_Name}}"
																}
															]
														}
													},
													"response": []
												},
												{
													"name": "New-Software-win Code-403 Copy",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 403\", function () {\r",
																	"    pm.response.to.have.status(403);\r",
																	"});\r",
																	""
																],
																"type": "text/javascript",
																"packages": {}
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [],
														"body": {
															"mode": "formdata",
															"formdata": [
																{
																	"key": "Name",
																	"value": "snst",
																	"type": "text"
																},
																{
																	"key": "Version",
																	"value": "{{Software_Version_win}}",
																	"type": "text"
																},
																{
																	"key": "Platform",
																	"value": "{{Software_Platform_win}}",
																	"type": "text"
																},
																{
																	"key": "Criticality",
																	"value": "{{criticality_Recommended}}",
																	"type": "text"
																},
																{
																	"key": "Description",
																	"value": "{{Description}}",
																	"type": "text"
																},
																{
																	"key": "ReleaseNotesUrl",
																	"value": "{{ReleaseNotesUrl}}",
																	"type": "text"
																},
																{
																	"key": "file",
																	"type": "file",
																	"src": "SecureNMCSystemTool_4.0.0.1_win-x64 Installer (4) (1).exe"
																}
															]
														},
														"url": {
															"raw": "{{Url_software}}software",
															"host": [
																"{{Url_software}}software"
															]
														}
													},
													"response": []
												},
												{
													"name": "criticality-update-win Code-403",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 403\", function () {\r",
																	"    pm.response.to.have.status(403);\r",
																	"});\r",
																	""
																],
																"type": "text/javascript",
																"packages": {}
															}
														}
													],
													"request": {
														"method": "PUT",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\r\n  \"criticality\": \"{{criticality_Optional}}\",\r\n  \"description\": \"{{Description}}\",\r\n  \"releaseNotesUrl\": \"{{ReleaseNotesUrl}}\"\r\n}\r\n",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{Url_software}}software/{{Software_Name}}/{{Software-win-stagged}}/{{Software_Platform_win}}",
															"host": [
																"{{Url_software}}software"
															],
															"path": [
																"{{Software_Name}}",
																"{{Software-win-stagged}}",
																"{{Software_Platform_win}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "download-win Code-404",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 404\", function () {\r",
																	"    pm.response.to.have.status(404);\r",
																	"});\r",
																	"// pm.test(\"Status is 200 and response time > 10s\", function () {\r",
																	"//     pm.expect(pm.response.code).to.eql(200);\r",
																	"//     pm.expect(pm.response.responseTime).to.be.above(10000); // 10,000 ms = 10 seconds\r",
																	"// });\r",
																	""
																],
																"type": "text/javascript",
																"packages": {}
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{Url_software}}software/{{Software_Name}}/{{Software-win-stagged}}/{{Software_Platform_win}}/download",
															"host": [
																"{{Url_software}}software"
															],
															"path": [
																"{{Software_Name}}",
																"{{Software-win-stagged}}",
																"{{Software_Platform_win}}",
																"download"
															]
														}
													},
													"response": []
												},
												{
													"name": "win-delete Code-403",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 403\", function () {\r",
																	"    pm.response.to.have.status(403);\r",
																	"});\r",
																	""
																],
																"type": "text/javascript",
																"packages": {}
															}
														}
													],
													"request": {
														"method": "DELETE",
														"header": [],
														"url": {
															"raw": "https://dit-sds-software-webapp.azurewebsites.net/api/software/{{Software_Name}}/{{Software-win-stagged}}/{{Software_Platform_win}}",
															"protocol": "https",
															"host": [
																"dit-sds-software-webapp",
																"azurewebsites",
																"net"
															],
															"path": [
																"api",
																"software",
																"{{Software_Name}}",
																"{{Software-win-stagged}}",
																"{{Software_Platform_win}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "check deleted-win Code-200",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});\r",
																	"pm.test(\"Response is exactly an empty array\", function () {\r",
																	"    pm.expect(pm.response.text()).to.eql(\"[]\");\r",
																	"});\r",
																	""
																],
																"type": "text/javascript",
																"packages": {}
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{Url_software}}software?name={{Software_Name}}&version={{Software-win-stagged}}&platform={{Software_Platform_win}}",
															"host": [
																"{{Url_software}}software"
															],
															"query": [
																{
																	"key": "name",
																	"value": "{{Software_Name}}"
																},
																{
																	"key": "version",
																	"value": "{{Software-win-stagged}}"
																},
																{
																	"key": "platform",
																	"value": "{{Software_Platform_win}}"
																}
															]
														}
													},
													"response": []
												},
												{
													"name": "Scheduled-win Code-403",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 403\", function () {\r",
																	"    pm.response.to.have.status(403);\r",
																	"});\r",
																	""
																],
																"type": "text/javascript",
																"packages": {}
															}
														}
													],
													"request": {
														"method": "PUT",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\r\n  \"release\": true,\r\n  \"releaseDate\": \"{{ReleaseDate}}\"\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{Url_software}}software/{{Software_Name}}/{{Software-win-stagged}}/{{Software_Platform_win}}/release",
															"host": [
																"{{Url_software}}software"
															],
															"path": [
																"{{Software_Name}}",
																"{{Software-win-stagged}}",
																"{{Software_Platform_win}}",
																"release"
															]
														}
													},
													"response": []
												},
												{
													"name": "Scheduled-win-status Code-200",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Response is exactly an empty array\", function () {\r",
																	"    pm.expect(pm.response.text()).to.eql(\"[]\");\r",
																	"});"
																],
																"type": "text/javascript",
																"packages": {}
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{Url_software}}software?name={{Software_Name}}&version={{Software-win-stagged}}&platform={{Software_Platform_win}}",
															"host": [
																"{{Url_software}}software"
															],
															"query": [
																{
																	"key": "name",
																	"value": "{{Software_Name}}"
																},
																{
																	"key": "version",
																	"value": "{{Software-win-stagged}}"
																},
																{
																	"key": "platform",
																	"value": "{{Software_Platform_win}}"
																}
															]
														}
													},
													"response": []
												},
												{
													"name": "stagged-win Code-403",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 403\", function () {\r",
																	"    pm.response.to.have.status(403);\r",
																	"});\r",
																	""
																],
																"type": "text/javascript",
																"packages": {}
															}
														}
													],
													"request": {
														"method": "PUT",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\r\n  \"release\": false\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{Url_software}}software/{{Software_Name}}/{{Software-win-stagged}}/{{Software_Platform_win}}/release",
															"host": [
																"{{Url_software}}software"
															],
															"path": [
																"{{Software_Name}}",
																"{{Software-win-stagged}}",
																"{{Software_Platform_win}}",
																"release"
															]
														}
													},
													"response": []
												},
												{
													"name": "Stagged-win-status Code-200",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});\r",
																	"\r",
																	"\r",
																	"pm.test(\"Response is exactly an empty array\", function () {\r",
																	"    pm.expect(pm.response.text()).to.eql(\"[]\");\r",
																	"});\r",
																	""
																],
																"type": "text/javascript",
																"packages": {}
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{Url_software}}software?name={{Software_Name}}&version={{Software-win-stagged}}&platform={{Software_Platform_win}}",
															"host": [
																"{{Url_software}}software"
															],
															"query": [
																{
																	"key": "name",
																	"value": "{{Software_Name}}"
																},
																{
																	"key": "version",
																	"value": "{{Software-win-stagged}}"
																},
																{
																	"key": "platform",
																	"value": "{{Software_Platform_win}}"
																}
															]
														}
													},
													"response": []
												},
												{
													"name": "remove-from-db-win Code-403",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 403\", function () {\r",
																	"    pm.response.to.have.status(403);\r",
																	"});\r",
																	""
																],
																"type": "text/javascript",
																"packages": {}
															}
														}
													],
													"request": {
														"method": "DELETE",
														"header": [],
														"url": {
															"raw": "https://dit-sds-software-webapp.azurewebsites.net/api/software/{{Software_Name}}/{{Software-win-stagged}}/{{Software_Platform_win}}",
															"protocol": "https",
															"host": [
																"dit-sds-software-webapp",
																"azurewebsites",
																"net"
															],
															"path": [
																"api",
																"software",
																"{{Software_Name}}",
																"{{Software-win-stagged}}",
																"{{Software_Platform_win}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "check deleted-win Code-200",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Response is exactly an empty array\", function () {\r",
																	"    pm.expect(pm.response.text()).to.eql(\"[]\");\r",
																	"});\r",
																	""
																],
																"type": "text/javascript",
																"packages": {}
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{Url_software}}software?name={{Software_Name}}&version={{Software_Version_win}}&platform={{Software_Platform_win}}",
															"host": [
																"{{Url_software}}software"
															],
															"query": [
																{
																	"key": "name",
																	"value": "{{Software_Name}}"
																},
																{
																	"key": "version",
																	"value": "{{Software_Version_win}}"
																},
																{
																	"key": "platform",
																	"value": "{{Software_Platform_win}}"
																}
															]
														}
													},
													"response": []
												}
											]
										},
										{
											"name": "Software API_win-released",
											"item": [
												{
													"name": "all-software-win Code-200",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});\r",
																	""
																],
																"type": "text/javascript",
																"packages": {}
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{Url_software}}software?name={{Software_Name}}",
															"host": [
																"{{Url_software}}software"
															],
															"query": [
																{
																	"key": "name",
																	"value": "{{Software_Name}}"
																}
															]
														}
													},
													"response": []
												},
												{
													"name": "single-software-win Code-200",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});\r",
																	"\r",
																	""
																],
																"type": "text/javascript",
																"packages": {}
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{Url_software}}software?name={{Software_Name}}&version={{Software-win-released}}&platform={{Software_Platform_win}}",
															"host": [
																"{{Url_software}}software"
															],
															"query": [
																{
																	"key": "name",
																	"value": "{{Software_Name}}"
																},
																{
																	"key": "version",
																	"value": "{{Software-win-released}}"
																},
																{
																	"key": "platform",
																	"value": "{{Software_Platform_win}}"
																}
															]
														}
													},
													"response": []
												},
												{
													"name": "New-Software-win Code-403",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 403\", function () {\r",
																	"    pm.response.to.have.status(403);\r",
																	"});\r",
																	""
																],
																"type": "text/javascript",
																"packages": {}
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [],
														"body": {
															"mode": "formdata",
															"formdata": [
																{
																	"key": "Name",
																	"value": "snst",
																	"type": "text"
																},
																{
																	"key": "Version",
																	"value": "{{Software_Version_win}}",
																	"type": "text"
																},
																{
																	"key": "Platform",
																	"value": "{{Software_Platform_win}}",
																	"type": "text"
																},
																{
																	"key": "Criticality",
																	"value": "{{criticality_Recommended}}",
																	"type": "text"
																},
																{
																	"key": "Description",
																	"value": "{{Description}}",
																	"type": "text"
																},
																{
																	"key": "ReleaseNotesUrl",
																	"value": "{{ReleaseNotesUrl}}",
																	"type": "text"
																},
																{
																	"key": "file",
																	"type": "file",
																	"src": "SecureNMCSystemTool_4.0.0.1_win-x64 Installer (12).exe"
																}
															]
														},
														"url": {
															"raw": "{{Url_software}}software",
															"host": [
																"{{Url_software}}software"
															]
														}
													},
													"response": []
												},
												{
													"name": "criticality-update-win Code-403",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 403\", function () {\r",
																	"    pm.response.to.have.status(403);\r",
																	"});\r",
																	""
																],
																"type": "text/javascript",
																"packages": {}
															}
														}
													],
													"request": {
														"method": "PUT",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\r\n  \"criticality\": \"{{criticality_Optional}}\",\r\n  \"description\": \"{{Description}}\",\r\n  \"releaseNotesUrl\": \"{{ReleaseNotesUrl}}\"\r\n}\r\n",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{Url_software}}software/{{Software_Name}}/{{Software-win-released}}/{{Software_Platform_win}}",
															"host": [
																"{{Url_software}}software"
															],
															"path": [
																"{{Software_Name}}",
																"{{Software-win-released}}",
																"{{Software_Platform_win}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "download-win Code-200",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});\r",
																	"// pm.test(\"Status is 200 and response time > 10s\", function () {\r",
																	"//     pm.expect(pm.response.code).to.eql(200);\r",
																	"//     pm.expect(pm.response.responseTime).to.be.above(10000); // 10,000 ms = 10 seconds\r",
																	"// });\r",
																	""
																],
																"type": "text/javascript",
																"packages": {}
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{Url_software}}software/{{Software_Name}}/{{Software-win-released}}/{{Software_Platform_win}}/download",
															"host": [
																"{{Url_software}}software"
															],
															"path": [
																"{{Software_Name}}",
																"{{Software-win-released}}",
																"{{Software_Platform_win}}",
																"download"
															]
														}
													},
													"response": []
												},
												{
													"name": "win-delete Code-403",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 403\", function () {\r",
																	"    pm.response.to.have.status(403);\r",
																	"});\r",
																	""
																],
																"type": "text/javascript",
																"packages": {}
															}
														}
													],
													"request": {
														"method": "DELETE",
														"header": [],
														"url": {
															"raw": "https://dit-sds-software-webapp.azurewebsites.net/api/software/{{Software_Name}}/{{Software-win-released}}/{{Software_Platform_win}}",
															"protocol": "https",
															"host": [
																"dit-sds-software-webapp",
																"azurewebsites",
																"net"
															],
															"path": [
																"api",
																"software",
																"{{Software_Name}}",
																"{{Software-win-released}}",
																"{{Software_Platform_win}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "check deleted-win Code-200",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});\r",
																	""
																],
																"type": "text/javascript",
																"packages": {}
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{Url_software}}software?name={{Software_Name}}&version={{Software-win-released}}&platform={{Software_Platform_win}}",
															"host": [
																"{{Url_software}}software"
															],
															"query": [
																{
																	"key": "name",
																	"value": "{{Software_Name}}"
																},
																{
																	"key": "version",
																	"value": "{{Software-win-released}}"
																},
																{
																	"key": "platform",
																	"value": "{{Software_Platform_win}}"
																}
															]
														}
													},
													"response": []
												},
												{
													"name": "Scheduled-win Code-403",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 403\", function () {\r",
																	"    pm.response.to.have.status(403);\r",
																	"});\r",
																	""
																],
																"type": "text/javascript",
																"packages": {}
															}
														}
													],
													"request": {
														"method": "PUT",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\r\n  \"release\": true,\r\n  \"releaseDate\": \"{{ReleaseDate}}\"\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{Url_software}}software/{{Software_Name}}/{{Software-win-released}}/{{Software_Platform_win}}/release",
															"host": [
																"{{Url_software}}software"
															],
															"path": [
																"{{Software_Name}}",
																"{{Software-win-released}}",
																"{{Software_Platform_win}}",
																"release"
															]
														}
													},
													"response": []
												},
												{
													"name": "Scheduled-win-status Code-200",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});\r",
																	"\r",
																	""
																],
																"type": "text/javascript",
																"packages": {}
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{Url_software}}software?name={{Software_Name}}&version={{Software-win-released}}&platform={{Software_Platform_win}}",
															"host": [
																"{{Url_software}}software"
															],
															"query": [
																{
																	"key": "name",
																	"value": "{{Software_Name}}"
																},
																{
																	"key": "version",
																	"value": "{{Software-win-released}}"
																},
																{
																	"key": "platform",
																	"value": "{{Software_Platform_win}}"
																}
															]
														}
													},
													"response": []
												},
												{
													"name": "stagged-win Code-403",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 403\", function () {\r",
																	"    pm.response.to.have.status(403);\r",
																	"});\r",
																	""
																],
																"type": "text/javascript",
																"packages": {}
															}
														}
													],
													"request": {
														"method": "PUT",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\r\n  \"release\": false\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{Url_software}}software/{{Software_Name}}/{{Software-win-released}}/{{Software_Platform_win}}/release",
															"host": [
																"{{Url_software}}software"
															],
															"path": [
																"{{Software_Name}}",
																"{{Software-win-released}}",
																"{{Software_Platform_win}}",
																"release"
															]
														}
													},
													"response": []
												},
												{
													"name": "Stagged-win-status Code-200",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});\r",
																	"\r",
																	"\r",
																	""
																],
																"type": "text/javascript",
																"packages": {}
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{Url_software}}software?name={{Software_Name}}&version={{Software-win-released}}&platform={{Software_Platform_win}}",
															"host": [
																"{{Url_software}}software"
															],
															"query": [
																{
																	"key": "name",
																	"value": "{{Software_Name}}"
																},
																{
																	"key": "version",
																	"value": "{{Software-win-released}}"
																},
																{
																	"key": "platform",
																	"value": "{{Software_Platform_win}}"
																}
															]
														}
													},
													"response": []
												},
												{
													"name": "remove-from-db-win Code-403",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 403\", function () {\r",
																	"    pm.response.to.have.status(403);\r",
																	"});\r",
																	""
																],
																"type": "text/javascript",
																"packages": {}
															}
														}
													],
													"request": {
														"method": "DELETE",
														"header": [],
														"url": {
															"raw": "https://dit-sds-software-webapp.azurewebsites.net/api/software/{{Software_Name}}/{{Software-win-released}}/{{Software_Platform_win}}",
															"protocol": "https",
															"host": [
																"dit-sds-software-webapp",
																"azurewebsites",
																"net"
															],
															"path": [
																"api",
																"software",
																"{{Software_Name}}",
																"{{Software-win-released}}",
																"{{Software_Platform_win}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "check deleted-win Code-200",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});\r",
																	"\r",
																	""
																],
																"type": "text/javascript",
																"packages": {}
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{Url_software}}software?name={{Software_Name}}&version={{Software-win-released}}&platform={{Software_Platform_win}}",
															"host": [
																"{{Url_software}}software"
															],
															"query": [
																{
																	"key": "name",
																	"value": "{{Software_Name}}"
																},
																{
																	"key": "version",
																	"value": "{{Software-win-released}}"
																},
																{
																	"key": "platform",
																	"value": "{{Software_Platform_win}}"
																}
															]
														}
													},
													"response": []
												}
											]
										}
									]
								},
								{
									"name": "linux Copy",
									"item": [
										{
											"name": "Software API_linux Schduled",
											"item": [
												{
													"name": "all software-linux Code-200",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});\r",
																	""
																],
																"type": "text/javascript",
																"packages": {}
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{Url_software}}software?name={{Software_Name}}",
															"host": [
																"{{Url_software}}software"
															],
															"query": [
																{
																	"key": "name",
																	"value": "{{Software_Name}}"
																}
															]
														}
													},
													"response": []
												},
												{
													"name": "single software-linux Code-200",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Response is exactly an empty array\", function () {\r",
																	"    pm.expect(pm.response.text()).to.eql(\"[]\");\r",
																	"});\r",
																	""
																],
																"type": "text/javascript",
																"packages": {}
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{Url_software}}software?name={{Software_Name}}&version={{Software-linux-stagged}}&platform={{Software_Platform_linux}}",
															"host": [
																"{{Url_software}}software"
															],
															"query": [
																{
																	"key": "name",
																	"value": "{{Software_Name}}"
																},
																{
																	"key": "version",
																	"value": "{{Software-linux-stagged}}"
																},
																{
																	"key": "platform",
																	"value": "{{Software_Platform_linux}}"
																}
															]
														}
													},
													"response": []
												},
												{
													"name": "new-software-linux Code-403",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 403\", function () {\r",
																	"    pm.response.to.have.status(403);\r",
																	"});\r",
																	""
																],
																"type": "text/javascript",
																"packages": {}
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [],
														"body": {
															"mode": "formdata",
															"formdata": [
																{
																	"key": "Name",
																	"value": "snst",
																	"type": "text"
																},
																{
																	"key": "Version",
																	"value": "{{Software_Version_linux}}",
																	"type": "text"
																},
																{
																	"key": "Platform",
																	"value": "{{Software_Platform_linux}}",
																	"type": "text"
																},
																{
																	"key": "Criticality",
																	"value": "{{criticality_Recommended}}",
																	"type": "text"
																},
																{
																	"key": "Description",
																	"value": "{{Description}}",
																	"type": "text"
																},
																{
																	"key": "releaseNotesUrl",
																	"value": "{{ReleaseNotesUrl}}",
																	"type": "text"
																},
																{
																	"key": "file",
																	"type": "file",
																	"src": "SecureNMCSystemTool_4.0.0.1_linux-x64 (2).tar.gz"
																},
																{
																	"key": "",
																	"value": "",
																	"type": "text"
																}
															]
														},
														"url": {
															"raw": "{{Url_software}}software",
															"host": [
																"{{Url_software}}software"
															]
														}
													},
													"response": []
												},
												{
													"name": "criticality update-linux Code-403",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 403\", function () {\r",
																	"    pm.response.to.have.status(403);\r",
																	"});\r",
																	""
																],
																"type": "text/javascript",
																"packages": {}
															}
														}
													],
													"request": {
														"method": "PUT",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\r\n  \"criticality\": \"{{criticality_Optional}}\",\r\n  \"description\": \"{{Description}}\",\r\n  \"releaseNotesUrl\": \"{{ReleaseNotesUrl}}\"\r\n}\r\n",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{Url_software}}software/{{Software_Name}}/{{Software-linux-stagged}}/{{Software_Platform_linux}}",
															"host": [
																"{{Url_software}}software"
															],
															"path": [
																"{{Software_Name}}",
																"{{Software-linux-stagged}}",
																"{{Software_Platform_linux}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "download-linux Code-404",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 404\", function () {\r",
																	"    pm.response.to.have.status(404);\r",
																	"});\r",
																	"\r",
																	"// pm.test(\"Status is 200 and response time > 10s\", function () {\r",
																	"//     pm.expect(pm.response.code).to.eql(200);\r",
																	"//     pm.expect(pm.response.responseTime).to.be.above(10000); // 10,000 ms = 10 seconds\r",
																	"// });\r",
																	""
																],
																"type": "text/javascript",
																"packages": {}
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{Url_software}}software/{{Software_Name}}/{{Software_Version_linux}}/{{Software_Platform_linux}}/download",
															"host": [
																"{{Url_software}}software"
															],
															"path": [
																"{{Software_Name}}",
																"{{Software_Version_linux}}",
																"{{Software_Platform_linux}}",
																"download"
															]
														}
													},
													"response": []
												},
												{
													"name": "linux-delete Code-403",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 403\", function () {\r",
																	"    pm.response.to.have.status(403);\r",
																	"});\r",
																	""
																],
																"type": "text/javascript",
																"packages": {}
															}
														}
													],
													"request": {
														"method": "DELETE",
														"header": [],
														"url": {
															"raw": "https://dit-sds-software-webapp.azurewebsites.net/api/software/{{Software_Name}}/{{Software-linux-stagged}}/{{Software_Platform_linux}}",
															"protocol": "https",
															"host": [
																"dit-sds-software-webapp",
																"azurewebsites",
																"net"
															],
															"path": [
																"api",
																"software",
																"{{Software_Name}}",
																"{{Software-linux-stagged}}",
																"{{Software_Platform_linux}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "delete-check-linux Code-200",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Response is exactly an empty array\", function () {\r",
																	"    pm.expect(pm.response.text()).to.eql(\"[]\");\r",
																	"});\r",
																	""
																],
																"type": "text/javascript",
																"packages": {}
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{Url_software}}software?name={{Software_Name}}&version={{Software-linux-stagged}}&platform={{Software_Platform_linux}}",
															"host": [
																"{{Url_software}}software"
															],
															"query": [
																{
																	"key": "name",
																	"value": "{{Software_Name}}"
																},
																{
																	"key": "version",
																	"value": "{{Software-linux-stagged}}"
																},
																{
																	"key": "platform",
																	"value": "{{Software_Platform_linux}}"
																}
															]
														}
													},
													"response": []
												},
												{
													"name": "Scheduled_linux Code-403",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 403\", function () {\r",
																	"    pm.response.to.have.status(403);\r",
																	"});\r",
																	""
																],
																"type": "text/javascript",
																"packages": {}
															}
														}
													],
													"request": {
														"method": "PUT",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\r\n  \"release\": true,\r\n  \"releaseDate\": \"2025-08-02T16:15:44.3988046Z\"\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{Url_software}}software/{{Software_Name}}/{{Software-linux-stagged}}/{{Software_Platform_linux}}/release",
															"host": [
																"{{Url_software}}software"
															],
															"path": [
																"{{Software_Name}}",
																"{{Software-linux-stagged}}",
																"{{Software_Platform_linux}}",
																"release"
															]
														}
													},
													"response": []
												},
												{
													"name": "Scheduled check linux Code-200",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});\r",
																	"pm.test(\"Response is exactly an empty array\", function () {\r",
																	"    pm.expect(pm.response.text()).to.eql(\"[]\");\r",
																	"});\r",
																	""
																],
																"type": "text/javascript",
																"packages": {}
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{Url_software}}software?name={{Software_Name}}&version={{Software-linux-stagged}}&platform={{Software_Platform_linux}}",
															"host": [
																"{{Url_software}}software"
															],
															"query": [
																{
																	"key": "name",
																	"value": "{{Software_Name}}"
																},
																{
																	"key": "version",
																	"value": "{{Software-linux-stagged}}"
																},
																{
																	"key": "platform",
																	"value": "{{Software_Platform_linux}}"
																}
															]
														}
													},
													"response": []
												},
												{
													"name": "stagged-linux Code-403",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 403\", function () {\r",
																	"    pm.response.to.have.status(403);\r",
																	"});\r",
																	""
																],
																"type": "text/javascript",
																"packages": {}
															}
														}
													],
													"request": {
														"method": "PUT",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\r\n  \"release\": false\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{Url_software}}software/{{Software_Name}}/{{Software-linux-stagged}}/{{Software_Platform_linux}}/release",
															"host": [
																"{{Url_software}}software"
															],
															"path": [
																"{{Software_Name}}",
																"{{Software-linux-stagged}}",
																"{{Software_Platform_linux}}",
																"release"
															]
														}
													},
													"response": []
												},
												{
													"name": "check Stagged-linux Code-200",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});\r",
																	"pm.test(\"Response is exactly an empty array\", function () {\r",
																	"    pm.expect(pm.response.text()).to.eql(\"[]\");\r",
																	"});\r",
																	""
																],
																"type": "text/javascript",
																"packages": {}
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{Url_software}}software?name={{Software_Name}}&version={{Software-linux-stagged}}&platform={{Software_Platform_linux}}",
															"host": [
																"{{Url_software}}software"
															],
															"query": [
																{
																	"key": "name",
																	"value": "{{Software_Name}}"
																},
																{
																	"key": "version",
																	"value": "{{Software-linux-stagged}}"
																},
																{
																	"key": "platform",
																	"value": "{{Software_Platform_linux}}"
																}
															]
														}
													},
													"response": []
												},
												{
													"name": "remove from db-linux Code-403",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 403\", function () {\r",
																	"    pm.response.to.have.status(403);\r",
																	"});\r",
																	""
																],
																"type": "text/javascript",
																"packages": {}
															}
														}
													],
													"request": {
														"method": "DELETE",
														"header": [],
														"url": {
															"raw": "https://dit-sds-software-webapp.azurewebsites.net/api/software/{{Software_Name}}/{{Software-linux-stagged}}/{{Software_Platform_linux}}",
															"protocol": "https",
															"host": [
																"dit-sds-software-webapp",
																"azurewebsites",
																"net"
															],
															"path": [
																"api",
																"software",
																"{{Software_Name}}",
																"{{Software-linux-stagged}}",
																"{{Software_Platform_linux}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "check deleted-linux Code-404",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Response is exactly an empty array\", function () {\r",
																	"    pm.expect(pm.response.text()).to.eql(\"[]\");\r",
																	"});\r",
																	""
																],
																"type": "text/javascript",
																"packages": {}
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{Url_software}}software?name={{Software_Name}}&version={{Software-linux-stagged}}&platform={{Software_Platform_linux}}",
															"host": [
																"{{Url_software}}software"
															],
															"query": [
																{
																	"key": "name",
																	"value": "{{Software_Name}}"
																},
																{
																	"key": "version",
																	"value": "{{Software-linux-stagged}}"
																},
																{
																	"key": "platform",
																	"value": "{{Software_Platform_linux}}"
																}
															]
														}
													},
													"response": []
												}
											]
										},
										{
											"name": "Software API_linux Released",
											"item": [
												{
													"name": "all software-linux Code-200",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});\r",
																	""
																],
																"type": "text/javascript",
																"packages": {}
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{Url_software}}software?name={{Software_Name}}",
															"host": [
																"{{Url_software}}software"
															],
															"query": [
																{
																	"key": "name",
																	"value": "{{Software_Name}}"
																}
															]
														}
													},
													"response": []
												},
												{
													"name": "single software-linux Code-200",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});\r",
																	"\r",
																	""
																],
																"type": "text/javascript",
																"packages": {}
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{Url_software}}software?name={{Software_Name}}&version={{Software-linux-released}}&platform={{Software_Platform_linux}}",
															"host": [
																"{{Url_software}}software"
															],
															"query": [
																{
																	"key": "name",
																	"value": "{{Software_Name}}"
																},
																{
																	"key": "version",
																	"value": "{{Software-linux-released}}"
																},
																{
																	"key": "platform",
																	"value": "{{Software_Platform_linux}}"
																}
															]
														}
													},
													"response": []
												},
												{
													"name": "new-software-linux Code-403",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 403\", function () {\r",
																	"    pm.response.to.have.status(403);\r",
																	"});\r",
																	""
																],
																"type": "text/javascript",
																"packages": {}
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [],
														"body": {
															"mode": "formdata",
															"formdata": [
																{
																	"key": "Name",
																	"value": "snst",
																	"type": "text"
																},
																{
																	"key": "Version",
																	"value": "{{Software_Version_linux}}",
																	"type": "text"
																},
																{
																	"key": "Platform",
																	"value": "{{Software_Platform_linux}}",
																	"type": "text"
																},
																{
																	"key": "Criticality",
																	"value": "{{criticality_Recommended}}",
																	"type": "text"
																},
																{
																	"key": "Description",
																	"value": "{{Description}}",
																	"type": "text"
																},
																{
																	"key": "releaseNotesUrl",
																	"value": "{{ReleaseNotesUrl}}",
																	"type": "text"
																},
																{
																	"key": "file",
																	"type": "file",
																	"src": "SecureNMCSystemTool_4.0.0.1_linux-x64 (2).tar.gz"
																},
																{
																	"key": "",
																	"value": "",
																	"type": "text"
																}
															]
														},
														"url": {
															"raw": "{{Url_software}}software",
															"host": [
																"{{Url_software}}software"
															]
														}
													},
													"response": []
												},
												{
													"name": "criticality update-linux Code-403",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 403\", function () {\r",
																	"    pm.response.to.have.status(403);\r",
																	"});\r",
																	""
																],
																"type": "text/javascript",
																"packages": {}
															}
														}
													],
													"request": {
														"method": "PUT",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\r\n  \"criticality\": \"{{criticality_Optional}}\",\r\n  \"description\": \"{{Description}}\",\r\n  \"releaseNotesUrl\": \"{{ReleaseNotesUrl}}\"\r\n}\r\n",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{Url_software}}software/{{Software_Name}}/{{Software-linux-released}}/{{Software_Platform_linux}}",
															"host": [
																"{{Url_software}}software"
															],
															"path": [
																"{{Software_Name}}",
																"{{Software-linux-released}}",
																"{{Software_Platform_linux}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "download-linux Code-200",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});\r",
																	"\r",
																	"// pm.test(\"Status is 200 and response time > 10s\", function () {\r",
																	"//     pm.expect(pm.response.code).to.eql(200);\r",
																	"//     pm.expect(pm.response.responseTime).to.be.above(10000); // 10,000 ms = 10 seconds\r",
																	"// });\r",
																	""
																],
																"type": "text/javascript",
																"packages": {}
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{Url_software}}software/{{Software_Name}}/{{Software-linux-released}}/{{Software_Platform_linux}}/download",
															"host": [
																"{{Url_software}}software"
															],
															"path": [
																"{{Software_Name}}",
																"{{Software-linux-released}}",
																"{{Software_Platform_linux}}",
																"download"
															]
														}
													},
													"response": []
												},
												{
													"name": "linux-delete Code-403",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 403\", function () {\r",
																	"    pm.response.to.have.status(403);\r",
																	"});\r",
																	""
																],
																"type": "text/javascript",
																"packages": {}
															}
														}
													],
													"request": {
														"method": "DELETE",
														"header": [],
														"url": {
															"raw": "https://dit-sds-software-webapp.azurewebsites.net/api/software/{{Software_Name}}/{{Software-linux-released}}/{{Software_Platform_linux}}",
															"protocol": "https",
															"host": [
																"dit-sds-software-webapp",
																"azurewebsites",
																"net"
															],
															"path": [
																"api",
																"software",
																"{{Software_Name}}",
																"{{Software-linux-released}}",
																"{{Software_Platform_linux}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "delete-check-linux Code-200",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});\r",
																	"\r",
																	""
																],
																"type": "text/javascript",
																"packages": {}
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{Url_software}}software?name={{Software_Name}}&version={{Software-linux-released}}&platform={{Software_Platform_linux}}",
															"host": [
																"{{Url_software}}software"
															],
															"query": [
																{
																	"key": "name",
																	"value": "{{Software_Name}}"
																},
																{
																	"key": "version",
																	"value": "{{Software-linux-released}}"
																},
																{
																	"key": "platform",
																	"value": "{{Software_Platform_linux}}"
																}
															]
														}
													},
													"response": []
												},
												{
													"name": "Scheduled_linux Code-403",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 403\", function () {\r",
																	"    pm.response.to.have.status(403);\r",
																	"});\r",
																	""
																],
																"type": "text/javascript",
																"packages": {}
															}
														}
													],
													"request": {
														"method": "PUT",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\r\n  \"release\": true,\r\n  \"releaseDate\": \"2025-08-02T16:15:44.3988046Z\"\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{Url_software}}software/{{Software_Name}}/{{Software-linux-released}}/{{Software_Platform_linux}}/release",
															"host": [
																"{{Url_software}}software"
															],
															"path": [
																"{{Software_Name}}",
																"{{Software-linux-released}}",
																"{{Software_Platform_linux}}",
																"release"
															]
														}
													},
													"response": []
												},
												{
													"name": "Scheduled check linux Code-200",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});\r",
																	""
																],
																"type": "text/javascript",
																"packages": {}
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{Url_software}}software?name={{Software_Name}}&version={{Software-linux-released}}&platform={{Software_Platform_linux}}",
															"host": [
																"{{Url_software}}software"
															],
															"query": [
																{
																	"key": "name",
																	"value": "{{Software_Name}}"
																},
																{
																	"key": "version",
																	"value": "{{Software-linux-released}}"
																},
																{
																	"key": "platform",
																	"value": "{{Software_Platform_linux}}"
																}
															]
														}
													},
													"response": []
												},
												{
													"name": "stagged-linux Code-403",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 403\", function () {\r",
																	"    pm.response.to.have.status(403);\r",
																	"});\r",
																	""
																],
																"type": "text/javascript",
																"packages": {}
															}
														}
													],
													"request": {
														"method": "PUT",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\r\n  \"release\": false\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{Url_software}}software/{{Software_Name}}/{{Software-linux-released}}/{{Software_Platform_linux}}/release",
															"host": [
																"{{Url_software}}software"
															],
															"path": [
																"{{Software_Name}}",
																"{{Software-linux-released}}",
																"{{Software_Platform_linux}}",
																"release"
															]
														}
													},
													"response": []
												},
												{
													"name": "check Stagged-linux Code-200",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});\r",
																	""
																],
																"type": "text/javascript",
																"packages": {}
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{Url_software}}software?name={{Software_Name}}&version={{Software-linux-released}}&platform={{Software_Platform_linux}}",
															"host": [
																"{{Url_software}}software"
															],
															"query": [
																{
																	"key": "name",
																	"value": "{{Software_Name}}"
																},
																{
																	"key": "version",
																	"value": "{{Software-linux-released}}"
																},
																{
																	"key": "platform",
																	"value": "{{Software_Platform_linux}}"
																}
															]
														}
													},
													"response": []
												},
												{
													"name": "remove from db-linux Code-403",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 403\", function () {\r",
																	"    pm.response.to.have.status(403);\r",
																	"});\r",
																	""
																],
																"type": "text/javascript",
																"packages": {}
															}
														}
													],
													"request": {
														"method": "DELETE",
														"header": [],
														"url": {
															"raw": "https://dit-sds-software-webapp.azurewebsites.net/api/software/{{Software_Name}}/{{Software-linux-released}}/{{Software_Platform_linux}}",
															"protocol": "https",
															"host": [
																"dit-sds-software-webapp",
																"azurewebsites",
																"net"
															],
															"path": [
																"api",
																"software",
																"{{Software_Name}}",
																"{{Software-linux-released}}",
																"{{Software_Platform_linux}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "check deleted-linux Code-200",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});\r",
																	"\r",
																	""
																],
																"type": "text/javascript",
																"packages": {}
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{Url_software}}software?name={{Software_Name}}&version={{Software-linux-released}}&platform={{Software_Platform_linux}}",
															"host": [
																"{{Url_software}}software"
															],
															"query": [
																{
																	"key": "name",
																	"value": "{{Software_Name}}"
																},
																{
																	"key": "version",
																	"value": "{{Software-linux-released}}"
																},
																{
																	"key": "platform",
																	"value": "{{Software_Platform_linux}}"
																}
															]
														}
													},
													"response": []
												}
											]
										}
									]
								},
								{
									"name": "osx Copy",
									"item": [
										{
											"name": "Software API _osx stagged",
											"item": [
												{
													"name": "all software osx Code-200",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});\r",
																	""
																],
																"type": "text/javascript",
																"packages": {}
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{Url_software}}software?name={{Software_Name}}",
															"host": [
																"{{Url_software}}software"
															],
															"query": [
																{
																	"key": "name",
																	"value": "{{Software_Name}}"
																}
															]
														}
													},
													"response": []
												},
												{
													"name": "single software osx Code-200",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Response is exactly an empty array\", function () {\r",
																	"    pm.expect(pm.response.text()).to.eql(\"[]\");\r",
																	"});\r",
																	""
																],
																"type": "text/javascript",
																"packages": {}
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{Url_software}}software?name={{Software_Name}}&version={{Software-osx-stagged}}&platform={{Software_Platform_osx}}",
															"host": [
																"{{Url_software}}software"
															],
															"query": [
																{
																	"key": "name",
																	"value": "{{Software_Name}}"
																},
																{
																	"key": "version",
																	"value": "{{Software-osx-stagged}}"
																},
																{
																	"key": "platform",
																	"value": "{{Software_Platform_osx}}"
																}
															]
														}
													},
													"response": []
												},
												{
													"name": "New-Software-osx Code-403",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 403\", function () {\r",
																	"    pm.response.to.have.status(403);\r",
																	"});\r",
																	""
																],
																"type": "text/javascript",
																"packages": {}
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [],
														"body": {
															"mode": "formdata",
															"formdata": [
																{
																	"key": "Name",
																	"value": "snst",
																	"type": "text"
																},
																{
																	"key": "Version",
																	"value": "{{Software_Version_osx}}",
																	"type": "text"
																},
																{
																	"key": "Platform",
																	"value": "{{Software_Platform_osx}}",
																	"type": "text"
																},
																{
																	"key": "Criticality",
																	"value": "{{criticality_Recommended}}",
																	"type": "text"
																},
																{
																	"key": "Description",
																	"value": "{{Description}}",
																	"type": "text"
																},
																{
																	"key": "releaseNotesUrl",
																	"value": "{{ReleaseNotesUrl}}",
																	"type": "text"
																},
																{
																	"key": "file",
																	"type": "file",
																	"src": "SecureNMCSystemTool_4.0.0.1_osx-arm64 (3).tar.gz"
																},
																{
																	"key": "",
																	"value": "",
																	"type": "text"
																}
															]
														},
														"url": {
															"raw": "{{Url_software}}software",
															"host": [
																"{{Url_software}}software"
															]
														}
													},
													"response": []
												},
												{
													"name": "criticality update-osx Code-403",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 403\", function () {\r",
																	"    pm.response.to.have.status(403);\r",
																	"});\r",
																	""
																],
																"type": "text/javascript",
																"packages": {}
															}
														}
													],
													"request": {
														"method": "PUT",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\r\n  \"criticality\": \"{{criticality_Optional}}\",\r\n  \"description\": \"{{Description}}\",\r\n  \"releaseNotesUrl\": \"{{ReleaseNotesUrl}}\"\r\n}\r\n",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{Url_software}}software/{{Software_Name}}/{{Software-osx-stagged}}/{{Software_Platform_osx}}",
															"host": [
																"{{Url_software}}software"
															],
															"path": [
																"{{Software_Name}}",
																"{{Software-osx-stagged}}",
																"{{Software_Platform_osx}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "download-osx Code-200",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 404\", function () {\r",
																	"    pm.response.to.have.status(404);\r",
																	"});\r",
																	"\r",
																	"// pm.test(\"Status is 200 and response time > 10s\", function () {\r",
																	"//     pm.expect(pm.response.code).to.eql(200);\r",
																	"//     pm.expect(pm.response.responseTime).to.be.above(10000); // 10,000 ms = 10 seconds\r",
																	"// });\r",
																	""
																],
																"type": "text/javascript",
																"packages": {}
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{Url_software}}software/{{Software_Name}}/{{Software-osx-stagged}}/{{Software_Platform_osx}}/download",
															"host": [
																"{{Url_software}}software"
															],
															"path": [
																"{{Software_Name}}",
																"{{Software-osx-stagged}}",
																"{{Software_Platform_osx}}",
																"download"
															]
														}
													},
													"response": []
												},
												{
													"name": "remove from db osx Code-403",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 403\", function () {\r",
																	"    pm.response.to.have.status(403);\r",
																	"});\r",
																	""
																],
																"type": "text/javascript",
																"packages": {}
															}
														}
													],
													"request": {
														"method": "DELETE",
														"header": [],
														"url": {
															"raw": "https://dit-sds-software-webapp.azurewebsites.net/api/software/{{Software_Name}}/{{Software-osx-stagged}}/{{Software_Platform_osx}}",
															"protocol": "https",
															"host": [
																"dit-sds-software-webapp",
																"azurewebsites",
																"net"
															],
															"path": [
																"api",
																"software",
																"{{Software_Name}}",
																"{{Software-osx-stagged}}",
																"{{Software_Platform_osx}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "check deleted-osx Code-200",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});\r",
																	""
																],
																"type": "text/javascript",
																"packages": {}
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{Url_software}}software?name={{Software_Name}}&version={{Software-osx-stagged}}&platform={{Software_Platform_osx}}",
															"host": [
																"{{Url_software}}software"
															],
															"query": [
																{
																	"key": "name",
																	"value": "{{Software_Name}}"
																},
																{
																	"key": "version",
																	"value": "{{Software-osx-stagged}}"
																},
																{
																	"key": "platform",
																	"value": "{{Software_Platform_osx}}"
																}
															]
														}
													},
													"response": []
												},
												{
													"name": "Scheduled-osx Code-403",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 403\", function () {\r",
																	"    pm.response.to.have.status(403);\r",
																	"});\r",
																	""
																],
																"type": "text/javascript",
																"packages": {}
															}
														}
													],
													"request": {
														"method": "PUT",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\r\n  \"release\": true,\r\n  \"releaseDate\": \"2025-08-02T16:15:44.3988046Z\"\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{Url_software}}software/{{Software_Name}}/{{Software-osx-stagged}}/{{Software_Platform_osx}}/release",
															"host": [
																"{{Url_software}}software"
															],
															"path": [
																"{{Software_Name}}",
																"{{Software-osx-stagged}}",
																"{{Software_Platform_osx}}",
																"release"
															]
														}
													},
													"response": []
												},
												{
													"name": "check scheduled-osx Code-200",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});\r",
																	""
																],
																"type": "text/javascript",
																"packages": {}
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{Url_software}}software?name={{Software_Name}}&version={{Software-osx-stagged}}&platform={{Software_Platform_osx}}",
															"host": [
																"{{Url_software}}software"
															],
															"query": [
																{
																	"key": "name",
																	"value": "{{Software_Name}}"
																},
																{
																	"key": "version",
																	"value": "{{Software-osx-stagged}}"
																},
																{
																	"key": "platform",
																	"value": "{{Software_Platform_osx}}"
																}
															]
														}
													},
													"response": []
												},
												{
													"name": "stagged-osx Code-403",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 403\", function () {\r",
																	"    pm.response.to.have.status(403);\r",
																	"});\r",
																	""
																],
																"type": "text/javascript",
																"packages": {}
															}
														}
													],
													"request": {
														"method": "PUT",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\r\n  \"release\": false\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{Url_software}}software/{{Software_Name}}/{{Software-osx-stagged}}/{{Software_Platform_osx}}/release",
															"host": [
																"{{Url_software}}software"
															],
															"path": [
																"{{Software_Name}}",
																"{{Software-osx-stagged}}",
																"{{Software_Platform_osx}}",
																"release"
															]
														}
													},
													"response": []
												},
												{
													"name": "check-stagged-osx Code-200",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});\r",
																	"pm.test(\"Response is exactly an empty array\", function () {\r",
																	"    pm.expect(pm.response.text()).to.eql(\"[]\");\r",
																	"});\r",
																	""
																],
																"type": "text/javascript",
																"packages": {}
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{Url_software}}software?name={{Software_Name}}&version={{Software-osx-stagged}}&platform={{Software_Platform_osx}}",
															"host": [
																"{{Url_software}}software"
															],
															"query": [
																{
																	"key": "name",
																	"value": "{{Software_Name}}"
																},
																{
																	"key": "version",
																	"value": "{{Software-osx-stagged}}"
																},
																{
																	"key": "platform",
																	"value": "{{Software_Platform_osx}}"
																}
															]
														}
													},
													"response": []
												},
												{
													"name": "delete from db-osx Code-403",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 403\", function () {\r",
																	"    pm.response.to.have.status(403);\r",
																	"});\r",
																	""
																],
																"type": "text/javascript",
																"packages": {}
															}
														}
													],
													"request": {
														"method": "DELETE",
														"header": [],
														"url": {
															"raw": "https://dit-sds-software-webapp.azurewebsites.net/api/software/{{Software_Name}}/{{Software-osx-stagged}}/{{Software_Platform_osx}}",
															"protocol": "https",
															"host": [
																"dit-sds-software-webapp",
																"azurewebsites",
																"net"
															],
															"path": [
																"api",
																"software",
																"{{Software_Name}}",
																"{{Software-osx-stagged}}",
																"{{Software_Platform_osx}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "check deleted-osx Code-200",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Response is exactly an empty array\", function () {\r",
																	"    pm.expect(pm.response.text()).to.eql(\"[]\");\r",
																	"});\r",
																	""
																],
																"type": "text/javascript",
																"packages": {}
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{Url_software}}software?name={{Software_Name}}&version={{Software-osx-stagged}}&platform={{Software_Platform_osx}}",
															"host": [
																"{{Url_software}}software"
															],
															"query": [
																{
																	"key": "name",
																	"value": "{{Software_Name}}"
																},
																{
																	"key": "version",
																	"value": "{{Software-osx-stagged}}"
																},
																{
																	"key": "platform",
																	"value": "{{Software_Platform_osx}}"
																}
															]
														}
													},
													"response": []
												}
											]
										},
										{
											"name": "Software API _osx released",
											"item": [
												{
													"name": "all software osx Code-200",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});\r",
																	""
																],
																"type": "text/javascript",
																"packages": {}
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{Url_software}}software?name={{Software_Name}}",
															"host": [
																"{{Url_software}}software"
															],
															"query": [
																{
																	"key": "name",
																	"value": "{{Software_Name}}"
																}
															]
														}
													},
													"response": []
												},
												{
													"name": "single software osx Code-200",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});\r",
																	"\r",
																	""
																],
																"type": "text/javascript",
																"packages": {}
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{Url_software}}software?name={{Software_Name}}&version={{Software-osx-released}}&platform={{Software_Platform_osx}}",
															"host": [
																"{{Url_software}}software"
															],
															"query": [
																{
																	"key": "name",
																	"value": "{{Software_Name}}"
																},
																{
																	"key": "version",
																	"value": "{{Software-osx-released}}"
																},
																{
																	"key": "platform",
																	"value": "{{Software_Platform_osx}}"
																}
															]
														}
													},
													"response": []
												},
												{
													"name": "New-Software-osx Code-403",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 403\", function () {\r",
																	"    pm.response.to.have.status(403);\r",
																	"});\r",
																	""
																],
																"type": "text/javascript",
																"packages": {}
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [],
														"body": {
															"mode": "formdata",
															"formdata": [
																{
																	"key": "Name",
																	"value": "snst",
																	"type": "text"
																},
																{
																	"key": "Version",
																	"value": "{{Software_Version_osx}}",
																	"type": "text"
																},
																{
																	"key": "Platform",
																	"value": "{{Software_Platform_osx}}",
																	"type": "text"
																},
																{
																	"key": "Criticality",
																	"value": "{{criticality_Recommended}}",
																	"type": "text"
																},
																{
																	"key": "Description",
																	"value": "{{Description}}",
																	"type": "text"
																},
																{
																	"key": "releaseNotesUrl",
																	"value": "{{ReleaseNotesUrl}}",
																	"type": "text"
																},
																{
																	"key": "file",
																	"type": "file",
																	"src": "SecureNMCSystemTool_4.0.0.1_osx-arm64 (3).tar.gz"
																},
																{
																	"key": "",
																	"value": "",
																	"type": "text"
																}
															]
														},
														"url": {
															"raw": "{{Url_software}}software",
															"host": [
																"{{Url_software}}software"
															]
														}
													},
													"response": []
												},
												{
													"name": "criticality update-osx Code-403",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 403\", function () {\r",
																	"    pm.response.to.have.status(403);\r",
																	"});\r",
																	""
																],
																"type": "text/javascript",
																"packages": {}
															}
														}
													],
													"request": {
														"method": "PUT",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\r\n  \"criticality\": \"{{criticality_Optional}}\",\r\n  \"description\": \"{{Description}}\",\r\n  \"releaseNotesUrl\": \"{{ReleaseNotesUrl}}\"\r\n}\r\n",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{Url_software}}software/{{Software_Name}}/{{Software-osx-released}}/{{Software_Platform_osx}}",
															"host": [
																"{{Url_software}}software"
															],
															"path": [
																"{{Software_Name}}",
																"{{Software-osx-released}}",
																"{{Software_Platform_osx}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "download-osx Code-200",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});\r",
																	"\r",
																	"// pm.test(\"Status is 200 and response time > 10s\", function () {\r",
																	"//     pm.expect(pm.response.code).to.eql(200);\r",
																	"//     pm.expect(pm.response.responseTime).to.be.above(10000); // 10,000 ms = 10 seconds\r",
																	"// });\r",
																	""
																],
																"type": "text/javascript",
																"packages": {}
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{Url_software}}software/{{Software_Name}}/{{Software-osx-released}}/{{Software_Platform_osx}}/download",
															"host": [
																"{{Url_software}}software"
															],
															"path": [
																"{{Software_Name}}",
																"{{Software-osx-released}}",
																"{{Software_Platform_osx}}",
																"download"
															]
														}
													},
													"response": []
												},
												{
													"name": "remove from db osx Code-403",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 403\", function () {\r",
																	"    pm.response.to.have.status(403);\r",
																	"});\r",
																	""
																],
																"type": "text/javascript",
																"packages": {}
															}
														}
													],
													"request": {
														"method": "DELETE",
														"header": [],
														"url": {
															"raw": "https://dit-sds-software-webapp.azurewebsites.net/api/software/{{Software_Name}}/{{Software-osx-released}}/{{Software_Platform_osx}}",
															"protocol": "https",
															"host": [
																"dit-sds-software-webapp",
																"azurewebsites",
																"net"
															],
															"path": [
																"api",
																"software",
																"{{Software_Name}}",
																"{{Software-osx-released}}",
																"{{Software_Platform_osx}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "check deleted-osx Code-200",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});\r",
																	""
																],
																"type": "text/javascript",
																"packages": {}
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{Url_software}}software?name={{Software_Name}}&version={{Software-osx-released}}&platform={{Software_Platform_osx}}",
															"host": [
																"{{Url_software}}software"
															],
															"query": [
																{
																	"key": "name",
																	"value": "{{Software_Name}}"
																},
																{
																	"key": "version",
																	"value": "{{Software-osx-released}}"
																},
																{
																	"key": "platform",
																	"value": "{{Software_Platform_osx}}"
																}
															]
														}
													},
													"response": []
												},
												{
													"name": "Scheduled-osx Code-403",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 403\", function () {\r",
																	"    pm.response.to.have.status(403);\r",
																	"});\r",
																	""
																],
																"type": "text/javascript",
																"packages": {}
															}
														}
													],
													"request": {
														"method": "PUT",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\r\n  \"release\": true,\r\n  \"releaseDate\": \"2025-08-02T16:15:44.3988046Z\"\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{Url_software}}software/{{Software_Name}}/{{Software-osx-released}}/{{Software_Platform_osx}}/release",
															"host": [
																"{{Url_software}}software"
															],
															"path": [
																"{{Software_Name}}",
																"{{Software-osx-released}}",
																"{{Software_Platform_osx}}",
																"release"
															]
														}
													},
													"response": []
												},
												{
													"name": "check scheduled-osx Code-200",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});\r",
																	"pm.test(\"Response is exactly an empty array\", function () {\r",
																	"    pm.expect(pm.response.text()).to.eql(\"[]\");\r",
																	"});\r",
																	""
																],
																"type": "text/javascript",
																"packages": {}
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{Url_software}}software?name={{Software_Name}}&version={{Software_Version_osx}}&platform={{Software_Platform_osx}}",
															"host": [
																"{{Url_software}}software"
															],
															"query": [
																{
																	"key": "name",
																	"value": "{{Software_Name}}"
																},
																{
																	"key": "version",
																	"value": "{{Software_Version_osx}}"
																},
																{
																	"key": "platform",
																	"value": "{{Software_Platform_osx}}"
																}
															]
														}
													},
													"response": []
												},
												{
													"name": "stagged-osx Code-403",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 403\", function () {\r",
																	"    pm.response.to.have.status(403);\r",
																	"});\r",
																	""
																],
																"type": "text/javascript",
																"packages": {}
															}
														}
													],
													"request": {
														"method": "PUT",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\r\n  \"release\": false\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{Url_software}}software/{{Software_Name}}/{{Software_Version_osx}}/{{Software_Platform_osx}}/release",
															"host": [
																"{{Url_software}}software"
															],
															"path": [
																"{{Software_Name}}",
																"{{Software_Version_osx}}",
																"{{Software_Platform_osx}}",
																"release"
															]
														}
													},
													"response": []
												},
												{
													"name": "check-stagged-osx Code-200",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});\r",
																	""
																],
																"type": "text/javascript",
																"packages": {}
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{Url_software}}software?name={{Software_Name}}&version={{Software-osx-released}}&platform={{Software_Platform_osx}}",
															"host": [
																"{{Url_software}}software"
															],
															"query": [
																{
																	"key": "name",
																	"value": "{{Software_Name}}"
																},
																{
																	"key": "version",
																	"value": "{{Software-osx-released}}"
																},
																{
																	"key": "platform",
																	"value": "{{Software_Platform_osx}}"
																}
															]
														}
													},
													"response": []
												},
												{
													"name": "delete from db-osx Code-403",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 403\", function () {\r",
																	"    pm.response.to.have.status(403);\r",
																	"});\r",
																	""
																],
																"type": "text/javascript",
																"packages": {}
															}
														}
													],
													"request": {
														"method": "DELETE",
														"header": [],
														"url": {
															"raw": "https://dit-sds-software-webapp.azurewebsites.net/api/software/{{Software_Name}}/{{Software-osx-released}}/{{Software_Platform_osx}}",
															"protocol": "https",
															"host": [
																"dit-sds-software-webapp",
																"azurewebsites",
																"net"
															],
															"path": [
																"api",
																"software",
																"{{Software_Name}}",
																"{{Software-osx-released}}",
																"{{Software_Platform_osx}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "check deleted-osx Code-200",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});\r",
																	"\r",
																	""
																],
																"type": "text/javascript",
																"packages": {}
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{Url_software}}software?name={{Software_Name}}&version={{Software-osx-released}}&platform={{Software_Platform_osx}}",
															"host": [
																"{{Url_software}}software"
															],
															"query": [
																{
																	"key": "name",
																	"value": "{{Software_Name}}"
																},
																{
																	"key": "version",
																	"value": "{{Software-osx-released}}"
																},
																{
																	"key": "platform",
																	"value": "{{Software_Platform_osx}}"
																}
															]
														}
													},
													"response": []
												}
											]
										}
									]
								}
							]
						}
					],
					"auth": {
						"type": "apikey",
						"apikey": [
							{
								"key": "value",
								"value": "{{Api_key_User}}",
								"type": "string"
							},
							{
								"key": "key",
								"value": "Authorization",
								"type": "string"
							}
						]
					},
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"packages": {},
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"packages": {},
								"exec": [
									""
								]
							}
						}
					]
				}
			],
			"auth": {
				"type": "noauth"
			},
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"packages": {},
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"packages": {},
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "SoftwareManager",
			"item": [
				{
					"name": "Role Update",
					"item": [
						{
							"name": "roles Code-200",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url_userApi}}{{user_federatedId}}/roles",
									"host": [
										"{{url_userApi}}{{user_federatedId}}"
									],
									"path": [
										"roles"
									]
								}
							},
							"response": []
						},
						{
							"name": "role Code-204",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{url_userApi}}{{user_federatedId}}/roles/{{Role_FirmwareReleaseManager}}",
									"host": [
										"{{url_userApi}}{{user_federatedId}}"
									],
									"path": [
										"roles",
										"{{Role_FirmwareReleaseManager}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "role Code-204",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// let selected = {\r",
											"//     firmware: \"https://dit-sds-users-webapp.azurewebsites.net/api/users\",\r",
											"//     federatedId : \"SESA823251\",\r",
											"//     roles: \"roles\",\r",
											"//     userroles:\"SoftwareManager\"\r",
											"\r",
											"\r",
											"// };\r",
											"\r",
											"// pm.collectionVariables.set(\"federatedId \", selected.federatedId );\r",
											"// pm.collectionVariables.set(\"roles\", selected.roles);\r",
											"// pm.collectionVariables.set(\"userroles\", selected.userroles);\r",
											"\r",
											"\r",
											"// // Optional: Log to console\r",
											"// console.log(\"Selected User:\", selected.federatedId , selected.roles, selected.userroles);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{url_userApi}}{{user_federatedId}}/roles/{{Role_Softwaremnager}}",
									"host": [
										"{{url_userApi}}{{user_federatedId}}"
									],
									"path": [
										"roles",
										"{{Role_Softwaremnager}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "roles Code-200 Copy",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url_userApi}}{{user_federatedId}}/roles",
									"host": [
										"{{url_userApi}}{{user_federatedId}}"
									],
									"path": [
										"roles"
									]
								}
							},
							"response": []
						}
					],
					"auth": {
						"type": "apikey",
						"apikey": [
							{
								"key": "value",
								"value": "{{APi-key_Admin}}",
								"type": "string"
							},
							{
								"key": "key",
								"value": "Authorization",
								"type": "string"
							}
						]
					},
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"packages": {},
								"exec": [
									"(function () {\r",
									"    const selectedRole = pm.collectionVariables.get(\"userroles\") || pm.collectionVariables.get(\"userroles\");\r",
									"\r",
									"    // const allowedRoles = [\r",
									"    //     \"UserRolesReader\",\r",
									"    //     \"Administrator\",\r",
									"    //     \"SoftwareManager\",\r",
									"    //     \"FirmwareManager\",\r",
									"    //     \"FirmwareReleaseManager\",\r",
									"    //     \"SoftwareReleaseManager\"\r",
									"    // ];\r",
									"\r",
									"    // if (!allowedRoles.includes(selectedRole)) {\r",
									"    //     throw new Error(`Invalid role selected: ${selectedRole}. Allowed roles are: ${allowedRoles.join(\", \")}`);\r",
									"    // }\r",
									"\r",
									"    console.log(\" Validated role:\", selectedRole);\r",
									"})();\r",
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"packages": {},
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "Test Suite",
					"item": [
						{
							"name": "User API",
							"item": [
								{
									"name": "ApiKeys all Code-200",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{Url_apikeys}}",
											"host": [
												"{{Url_apikeys}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "roles Code-403",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 403\", function () {\r",
													"    pm.response.to.have.status(403);\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url_userApi}}{{user_federatedId}}/roles",
											"host": [
												"{{url_userApi}}{{user_federatedId}}"
											],
											"path": [
												"roles"
											]
										}
									},
									"response": []
								},
								{
									"name": "role Code-403",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// let selected = {\r",
													"//     firmware: \"https://dit-sds-users-webapp.azurewebsites.net/api/users\",\r",
													"//     federatedId : \"SESA823251\",\r",
													"//     roles: \"roles\",\r",
													"//     userroles:\"SoftwareManager\"\r",
													"\r",
													"\r",
													"// };\r",
													"\r",
													"// pm.collectionVariables.set(\"federatedId \", selected.federatedId );\r",
													"// pm.collectionVariables.set(\"roles\", selected.roles);\r",
													"// pm.collectionVariables.set(\"userroles\", selected.userroles);\r",
													"\r",
													"\r",
													"// // Optional: Log to console\r",
													"// console.log(\"Selected User:\", selected.federatedId , selected.roles, selected.userroles);"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 403\", function () {\r",
													"    pm.response.to.have.status(403);\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{url_userApi}}{{user_federatedId}}/roles/{{Role_UserRolesReader}}",
											"host": [
												"{{url_userApi}}{{user_federatedId}}"
											],
											"path": [
												"roles",
												"{{Role_UserRolesReader}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "role Code-204",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 403\", function () {\r",
													"    pm.response.to.have.status(403);\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{url_userApi}}{{user_federatedId}}/roles/{{Role_UserRolesReader}}",
											"host": [
												"{{url_userApi}}{{user_federatedId}}"
											],
											"path": [
												"roles",
												"{{Role_UserRolesReader}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Device API",
							"item": [
								{
									"name": "PUT Device Details Code-403",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"let requestId = pm.response.headers.get('Request-Id');\r",
													"pm.environment.set('requestId', requestId);\r",
													"\r",
													"pm.test(\"Status code is 403\", function () {\r",
													"    pm.response.to.have.status(403);\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "[\r\n  {\r\n    \"mac\": \"282986484D84\",\r\n    \"serialNumber\": \"ZA2108005674\",\r\n    \"encryptionKey\": \"a1b2c3d4e5f60718293a4b5c6d7e8f90\"\r\n  }\r\n]"
										},
										"url": {
											"raw": "{{url_devices}}devices",
											"host": [
												"{{url_devices}}devices"
											]
										}
									},
									"response": []
								},
								{
									"name": "PUT Upload Devices Code-403",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let requestId1 = pm.response.headers.get('Request-Id');",
													"pm.environment.set('requestId1', requestId1);",
													"",
													"pm.test(\"Status code is 403\", function () {",
													"    pm.response.to.have.status(403);",
													"});",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "multipart/form-data",
												"type": "text"
											}
										],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "file",
													"type": "file",
													"src": "postman-cloud:///1f04c2db-79af-4330-abbf-52f49b7814aa"
												}
											]
										},
										"url": {
											"raw": "{{url_devices}}/devices/upload",
											"host": [
												"{{url_devices}}"
											],
											"path": [
												"devices",
												"upload"
											]
										}
									},
									"response": []
								},
								{
									"name": "GET Request Status Code-200",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url_devices}}status?requestId={{requestId}}",
											"host": [
												"{{url_devices}}status"
											],
											"query": [
												{
													"key": "requestId",
													"value": "{{requestId}}"
												}
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"packages": {},
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"packages": {},
										"exec": [
											""
										]
									}
								}
							]
						},
						{
							"name": "Firmware API",
							"item": [
								{
									"name": "Firmware API_su stagged schduled",
									"item": [
										{
											"name": "get-all Code-200",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"// pm.test(\"Status code is 200\", function () {\r",
															"//     pm.response.to.have.status(200);\r",
															"// });\r",
															"\r",
															"// // // Parse response\r",
															"// // let firmwareList = pm.response.json();\r",
															"\r",
															"// // // Randomly select one firmware entry\r",
															"// // let selected = firmwareList[Math.floor(Math.random() * firmwareList.length)];\r",
															"\r",
															"// // // Set variables for next request\r",
															"// // pm.collectionVariables.set(\"appName\", selected.appName);\r",
															"// // pm.collectionVariables.set(\"appVersion\", selected.appVersion);\r",
															"\r",
															"// // console.log(\"Selected firmware:\", selected.appName, selected.appVersion);\r",
															"\r",
															"// let firmwareList = pm.response.json();\r",
															"\r",
															"// // Filter entries that have valid appName and appVersion\r",
															"// let validEntries = firmwareList.filter(fw => fw.appName && fw.appVersion);\r",
															"\r",
															"// // Randomly select one\r",
															"// let selected = validEntries[Math.floor(Math.random() * validEntries.length)];\r",
															"\r",
															"// pm.collectionVariables.set(\"appName\", selected.appName);\r",
															"// pm.collectionVariables.set(\"appVersion\", selected.appVersion);\r",
															"\r",
															"// console.log(\"Selected firmware:\", selected.appName, selected.appVersion);\r",
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{Url_firmwareApi}}",
													"host": [
														"{{Url_firmwareApi}}"
													],
													"query": [
														{
															"key": "snst",
															"value": null,
															"disabled": true
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "get-single Code-404",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 404\", function () {\r",
															"    pm.response.to.have.status(404);\r",
															"});\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{Url_firmwareApi}}/{{appName-su}}/{{Firmware-su-stagged}}",
													"host": [
														"{{Url_firmwareApi}}"
													],
													"path": [
														"{{appName-su}}",
														"{{Firmware-su-stagged}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "firmware Code-403",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"// Try to get values from the response first\r",
															"try {\r",
															"    const response = pm.response.json();\r",
															"    if (response.appName) {\r",
															"        pm.environment.set(\"appName\", response.appName);\r",
															"    }\r",
															"    if (response.appVersion) {\r",
															"        pm.environment.set(\"appVersion\", response.appVersion);\r",
															"    }\r",
															"} catch (e) {\r",
															"    console.warn(\"No JSON response or missing fields.\");\r",
															"}\r",
															"\r",
															"// Fallback: get values from the request body if not already set\r",
															"if (!pm.environment.get(\"appName\") || !pm.environment.get(\"appVersion\")) {\r",
															"    try {\r",
															"        const requestBody = pm.request.body.raw ? JSON.parse(pm.request.body.raw) : {};\r",
															"        if (requestBody.appName) {\r",
															"            pm.environment.set(\"appName\", requestBody.appName);\r",
															"        }\r",
															"        if (requestBody.appVersion) {\r",
															"            pm.environment.set(\"appVersion\", requestBody.appVersion);\r",
															"        }\r",
															"    } catch (e) {\r",
															"        console.warn(\"Failed to parse request body.\");\r",
															"    }\r",
															"}\r",
															"\r",
															"pm.test(\"Status code is 403\", function () {\r",
															"    pm.response.to.have.status(403);\r",
															"});\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "formdata",
													"formdata": [
														{
															"key": "Criticality",
															"value": "{{criticality_Recommended}}",
															"type": "text"
														},
														{
															"key": "Description",
															"value": "{{Description}}",
															"type": "text"
														},
														{
															"key": "ReleaseNotesUrl",
															"value": "{{ReleaseNotesUrl}}",
															"type": "text"
														},
														{
															"key": "file",
															"type": "file",
															"src": "apc_hw21_su_3-3-0-8.nmc3"
														}
													]
												},
												"url": {
													"raw": "{{Url_firmwareApi}}",
													"host": [
														"{{Url_firmwareApi}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Updating Code-403",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"if (!pm.collectionVariables.get(\"appName\") || !pm.collectionVariables.get(\"appVersion\")) {\r",
															"    throw new Error(\"appName or appVersion is missing. Please run the GET request first.\");\r",
															"}\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 403\", function () {\r",
															"    pm.response.to.have.status(403);\r",
															"});"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"criticality\": \"{{criticality_Optional}}\",\r\n  \"description\": \"{{Description}}\",\r\n  \"releaseNotesUrl\": \"{{ReleaseNotesUrl}}\"\r\n}\r\n\r\n",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{Url_firmwareApi}}/{{appName-su}}/{{Firmware-su-stagged}}",
													"host": [
														"{{Url_firmwareApi}}"
													],
													"path": [
														"{{appName-su}}",
														"{{Firmware-su-stagged}}"
													],
													"query": [
														{
															"key": "appName",
															"value": "su",
															"disabled": true
														},
														{
															"key": "appVersion",
															"value": "2.5.5.1",
															"disabled": true
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "get-single Code-404",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 404\", function () {\r",
															"    pm.response.to.have.status(404);\r",
															"});\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{Url_firmwareApi}}/{{appName-su}}/{{Firmware-su-stagged}}",
													"host": [
														"{{Url_firmwareApi}}"
													],
													"path": [
														"{{appName-su}}",
														"{{Firmware-su-stagged}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Updating Code-403",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"if (!pm.collectionVariables.get(\"appName\") || !pm.collectionVariables.get(\"appVersion\")) {\r",
															"    throw new Error(\"appName or appVersion is missing. Please run the GET request first.\");\r",
															"}\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 403\", function () {\r",
															"    pm.response.to.have.status(403);\r",
															"});"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"criticality\": \"{{criticality_Optional}}\",\r\n  \"description\": \"{{Description}}\",\r\n  \"releaseNotesUrl\": \"{{ReleaseNotesUrl}}\"\r\n}\r\n\r\n",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{Url_firmwareApi}}/{{appName-su}}/{{Firmware-su-stagged}}",
													"host": [
														"{{Url_firmwareApi}}"
													],
													"path": [
														"{{appName-su}}",
														"{{Firmware-su-stagged}}"
													],
													"query": [
														{
															"key": "appName",
															"value": "su",
															"disabled": true
														},
														{
															"key": "appVersion",
															"value": "2.5.5.1",
															"disabled": true
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "get-single Code-404",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 404\", function () {\r",
															"    pm.response.to.have.status(404);\r",
															"});\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{Url_firmwareApi}}/{{appName-su}}/{{Firmware-su-stagged}}",
													"host": [
														"{{Url_firmwareApi}}"
													],
													"path": [
														"{{appName-su}}",
														"{{Firmware-su-stagged}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Release Code-403",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 403\", function () {\r",
															"    pm.response.to.have.status(403);\r",
															"});\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"release\": true,\r\n  \"releaseDate\": \"2025-06-26T06:48:50.080876Z\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{Url_firmwareApi}}/{{appName-su}}/{{Firmware-su-stagged}}/release",
													"host": [
														"{{Url_firmwareApi}}"
													],
													"path": [
														"{{appName-su}}",
														"{{Firmware-su-stagged}}",
														"release"
													]
												}
											},
											"response": []
										},
										{
											"name": "get-single Code-404",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 404\", function () {\r",
															"    pm.response.to.have.status(404);\r",
															"});\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{Url_firmwareApi}}/{{appName-su}}/{{Firmware-su-stagged}}",
													"host": [
														"{{Url_firmwareApi}}"
													],
													"path": [
														"{{appName-su}}",
														"{{Firmware-su-stagged}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "generate Code-404",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"console.log(`Resolved URL: ${pm.variables.get(\"Url_firmwareApi\")}/${pm.collectionVariables.get(\"appName\")}/${pm.collectionVariables.get(\"appVersion\")}/generate`);\r",
															"\r",
															"\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"console.log(\"Response Body:\", pm.response.text());\r",
															"// console.log(\"Response Headers:\", pm.response.headers.toJSON());\r",
															"\r",
															"\r",
															"if (pm.response.code === 404) {\r",
															"    pm.visualizer.set(`<p>No firmware found for the selected version.</p>`);\r",
															"} else {\r",
															"    // existing logic for Content-Disposition\r",
															"}\r",
															"\r",
															"pm.test(\"Status code is 404\", function () {\r",
															"    pm.response.to.have.status(404);\r",
															"});\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"deviceIds\": [\r\n    \"2829866CDE70\"\r\n  ]\r\n}\r\n",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{Url_firmwareApi}}/{{appName-su}}/{{Firmware-su-stagged}}/generate",
													"host": [
														"{{Url_firmwareApi}}"
													],
													"path": [
														"{{appName-su}}",
														"{{Firmware-su-stagged}}",
														"generate"
													]
												}
											},
											"response": []
										},
										{
											"name": "stagged Code-403",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 403\", function () {\r",
															"    pm.response.to.have.status(403);\r",
															"});\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"release\": false\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{Url_firmwareApi}}/{{appName-su}}/{{Firmware-su-stagged}}/release",
													"host": [
														"{{Url_firmwareApi}}"
													],
													"path": [
														"{{appName-su}}",
														"{{Firmware-su-stagged}}",
														"release"
													]
												}
											},
											"response": []
										},
										{
											"name": "get-single Code-404",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 404\", function () {\r",
															"    pm.response.to.have.status(404);\r",
															"});\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{Url_firmwareApi}}/{{appName-su}}/{{Firmware-su-stagged}}",
													"host": [
														"{{Url_firmwareApi}}"
													],
													"path": [
														"{{appName-su}}",
														"{{Firmware-su-stagged}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Deleting Code-403",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"if (!pm.collectionVariables.get(\"appName\") || !pm.collectionVariables.get(\"appVersion\")) {\r",
															"    throw new Error(\"appName or appVersion is missing. Please run the GET request first.\");\r",
															"}\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 403\", function () {\r",
															"    pm.response.to.have.status(403);\r",
															"});"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [],
												"url": {
													"raw": "{{Url_firmwareApi}}/{{appName-su}}/{{Firmware-su-stagged}}",
													"host": [
														"{{Url_firmwareApi}}"
													],
													"path": [
														"{{appName-su}}",
														"{{Firmware-su-stagged}}"
													],
													"query": [
														{
															"key": "appName",
															"value": "su",
															"disabled": true
														},
														{
															"key": "appVersion",
															"value": "2.5.5.1",
															"disabled": true
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "get-single Copy5 Code-404",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 404\", function () {\r",
															"    pm.response.to.have.status(404);\r",
															"});\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{Url_firmwareApi}}/{{appName-su}}/{{Firmware-su-stagged}}",
													"host": [
														"{{Url_firmwareApi}}"
													],
													"path": [
														"{{appName-su}}",
														"{{Firmware-su-stagged}}"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Firmware API_su released",
									"item": [
										{
											"name": "get-all Code-200",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"// pm.test(\"Status code is 200\", function () {\r",
															"//     pm.response.to.have.status(200);\r",
															"// });\r",
															"\r",
															"// // // Parse response\r",
															"// // let firmwareList = pm.response.json();\r",
															"\r",
															"// // // Randomly select one firmware entry\r",
															"// // let selected = firmwareList[Math.floor(Math.random() * firmwareList.length)];\r",
															"\r",
															"// // // Set variables for next request\r",
															"// // pm.collectionVariables.set(\"appName\", selected.appName);\r",
															"// // pm.collectionVariables.set(\"appVersion\", selected.appVersion);\r",
															"\r",
															"// // console.log(\"Selected firmware:\", selected.appName, selected.appVersion);\r",
															"\r",
															"// let firmwareList = pm.response.json();\r",
															"\r",
															"// // Filter entries that have valid appName and appVersion\r",
															"// let validEntries = firmwareList.filter(fw => fw.appName && fw.appVersion);\r",
															"\r",
															"// // Randomly select one\r",
															"// let selected = validEntries[Math.floor(Math.random() * validEntries.length)];\r",
															"\r",
															"// pm.collectionVariables.set(\"appName\", selected.appName);\r",
															"// pm.collectionVariables.set(\"appVersion\", selected.appVersion);\r",
															"\r",
															"// console.log(\"Selected firmware:\", selected.appName, selected.appVersion);\r",
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{Url_firmwareApi}}",
													"host": [
														"{{Url_firmwareApi}}"
													],
													"query": [
														{
															"key": "snst",
															"value": null,
															"disabled": true
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "get-single Code-200",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{Url_firmwareApi}}/{{appName-su}}/{{Firmware-su-released}}",
													"host": [
														"{{Url_firmwareApi}}"
													],
													"path": [
														"{{appName-su}}",
														"{{Firmware-su-released}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "firmware Code-403",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"// Try to get values from the response first\r",
															"try {\r",
															"    const response = pm.response.json();\r",
															"    if (response.appName) {\r",
															"        pm.environment.set(\"appName\", response.appName);\r",
															"    }\r",
															"    if (response.appVersion) {\r",
															"        pm.environment.set(\"appVersion\", response.appVersion);\r",
															"    }\r",
															"} catch (e) {\r",
															"    console.warn(\"No JSON response or missing fields.\");\r",
															"}\r",
															"\r",
															"// Fallback: get values from the request body if not already set\r",
															"if (!pm.environment.get(\"appName\") || !pm.environment.get(\"appVersion\")) {\r",
															"    try {\r",
															"        const requestBody = pm.request.body.raw ? JSON.parse(pm.request.body.raw) : {};\r",
															"        if (requestBody.appName) {\r",
															"            pm.environment.set(\"appName\", requestBody.appName);\r",
															"        }\r",
															"        if (requestBody.appVersion) {\r",
															"            pm.environment.set(\"appVersion\", requestBody.appVersion);\r",
															"        }\r",
															"    } catch (e) {\r",
															"        console.warn(\"Failed to parse request body.\");\r",
															"    }\r",
															"}\r",
															"\r",
															"pm.test(\"Status code is 403\", function () {\r",
															"    pm.response.to.have.status(403);\r",
															"});\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "formdata",
													"formdata": [
														{
															"key": "Criticality",
															"value": "{{criticality_Recommended}}",
															"type": "text"
														},
														{
															"key": "Description",
															"value": "{{Description}}",
															"type": "text"
														},
														{
															"key": "ReleaseNotesUrl",
															"value": "{{ReleaseNotesUrl}}",
															"type": "text"
														},
														{
															"key": "file",
															"type": "file",
															"src": "apc_hw21_su_3-3-0-8.nmc3"
														}
													]
												},
												"url": {
													"raw": "{{Url_firmwareApi}}",
													"host": [
														"{{Url_firmwareApi}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Updating Code-403",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"if (!pm.collectionVariables.get(\"appName\") || !pm.collectionVariables.get(\"appVersion\")) {\r",
															"    throw new Error(\"appName or appVersion is missing. Please run the GET request first.\");\r",
															"}\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 403\", function () {\r",
															"    pm.response.to.have.status(403);\r",
															"});"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"criticality\": \"{{criticality_Optional}}\",\r\n  \"description\": \"{{Description}}\",\r\n  \"releaseNotesUrl\": \"{{ReleaseNotesUrl}}\"\r\n}\r\n\r\n",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{Url_firmwareApi}}/{{appName-su}}/{{Firmware-su-released}}",
													"host": [
														"{{Url_firmwareApi}}"
													],
													"path": [
														"{{appName-su}}",
														"{{Firmware-su-released}}"
													],
													"query": [
														{
															"key": "appName",
															"value": "su",
															"disabled": true
														},
														{
															"key": "appVersion",
															"value": "2.5.5.1",
															"disabled": true
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "get-single Code-200",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{Url_firmwareApi}}/{{appName-su}}/{{Firmware-su-released}}",
													"host": [
														"{{Url_firmwareApi}}"
													],
													"path": [
														"{{appName-su}}",
														"{{Firmware-su-released}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Updating Code-403",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"if (!pm.collectionVariables.get(\"appName\") || !pm.collectionVariables.get(\"appVersion\")) {\r",
															"    throw new Error(\"appName or appVersion is missing. Please run the GET request first.\");\r",
															"}\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 403\", function () {\r",
															"    pm.response.to.have.status(403);\r",
															"});"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"criticality\": \"{{criticality_Optional}}\",\r\n  \"description\": \"{{Description}}\",\r\n  \"releaseNotesUrl\": \"{{ReleaseNotesUrl}}\"\r\n}\r\n\r\n",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{Url_firmwareApi}}/{{appName-su}}/{{Firmware-su-released}}",
													"host": [
														"{{Url_firmwareApi}}"
													],
													"path": [
														"{{appName-su}}",
														"{{Firmware-su-released}}"
													],
													"query": [
														{
															"key": "appName",
															"value": "su",
															"disabled": true
														},
														{
															"key": "appVersion",
															"value": "2.5.5.1",
															"disabled": true
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "get-single Code-200",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{Url_firmwareApi}}/{{appName-su}}/{{Firmware-su-released}}",
													"host": [
														"{{Url_firmwareApi}}"
													],
													"path": [
														"{{appName-su}}",
														"{{Firmware-su-released}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Release Code-403",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 403\", function () {\r",
															"    pm.response.to.have.status(403);\r",
															"});\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"release\": true,\r\n  \"releaseDate\": \"2025-06-26T06:48:50.080876Z\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{Url_firmwareApi}}/{{appName-su}}/{{Firmware-su-released}}/release",
													"host": [
														"{{Url_firmwareApi}}"
													],
													"path": [
														"{{appName-su}}",
														"{{Firmware-su-released}}",
														"release"
													]
												}
											},
											"response": []
										},
										{
											"name": "get-single Code-200",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{Url_firmwareApi}}/{{appName-su}}/{{Firmware-su-released}}",
													"host": [
														"{{Url_firmwareApi}}"
													],
													"path": [
														"{{appName-su}}",
														"{{Firmware-su-released}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "generate Code-200",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"console.log(`Resolved URL: ${pm.variables.get(\"Url_firmwareApi\")}/${pm.collectionVariables.get(\"appName\")}/${pm.collectionVariables.get(\"appVersion\")}/generate`);\r",
															"\r",
															"\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"console.log(\"Response Body:\", pm.response.text());\r",
															"// console.log(\"Response Headers:\", pm.response.headers.toJSON());\r",
															"\r",
															"\r",
															"if (pm.response.code === 404) {\r",
															"    pm.visualizer.set(`<p>No firmware found for the selected version.</p>`);\r",
															"} else {\r",
															"    // existing logic for Content-Disposition\r",
															"}\r",
															"\r",
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"deviceIds\": [\r\n    \"2829866CDE70\"\r\n  ]\r\n}\r\n",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{Url_firmwareApi}}/{{appName-su}}/{{Firmware-su-released}}/generate",
													"host": [
														"{{Url_firmwareApi}}"
													],
													"path": [
														"{{appName-su}}",
														"{{Firmware-su-released}}",
														"generate"
													]
												}
											},
											"response": []
										},
										{
											"name": "stagged Code-403",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 403\", function () {\r",
															"    pm.response.to.have.status(403);\r",
															"});\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"release\": false\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{Url_firmwareApi}}/{{appName-su}}/{{Firmware-su-released}}/release",
													"host": [
														"{{Url_firmwareApi}}"
													],
													"path": [
														"{{appName-su}}",
														"{{Firmware-su-released}}",
														"release"
													]
												}
											},
											"response": []
										},
										{
											"name": "get-single Code-200",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{Url_firmwareApi}}/{{appName-su}}/{{Firmware-su-released}}",
													"host": [
														"{{Url_firmwareApi}}"
													],
													"path": [
														"{{appName-su}}",
														"{{Firmware-su-released}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Deleting Code-403",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"if (!pm.collectionVariables.get(\"appName\") || !pm.collectionVariables.get(\"appVersion\")) {\r",
															"    throw new Error(\"appName or appVersion is missing. Please run the GET request first.\");\r",
															"}\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 403\", function () {\r",
															"    pm.response.to.have.status(403);\r",
															"});"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [],
												"url": {
													"raw": "{{Url_firmwareApi}}/{{appName-su}}/{{Firmware-su-released}}",
													"host": [
														"{{Url_firmwareApi}}"
													],
													"path": [
														"{{appName-su}}",
														"{{Firmware-su-released}}"
													],
													"query": [
														{
															"key": "appName",
															"value": "su",
															"disabled": true
														},
														{
															"key": "appVersion",
															"value": "2.5.5.1",
															"disabled": true
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "get-single Code-200",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{Url_firmwareApi}}/{{appName-su}}/{{Firmware-su-released}}",
													"host": [
														"{{Url_firmwareApi}}"
													],
													"path": [
														"{{appName-su}}",
														"{{Firmware-su-released}}"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Firmware API_sy stagged schduled",
									"item": [
										{
											"name": "get-all Code-200",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"// pm.test(\"Status code is 200\", function () {\r",
															"//     pm.response.to.have.status(200);\r",
															"// });\r",
															"\r",
															"// // // Parse response\r",
															"// // let firmwareList = pm.response.json();\r",
															"\r",
															"// // // Randomly select one firmware entry\r",
															"// // let selected = firmwareList[Math.floor(Math.random() * firmwareList.length)];\r",
															"\r",
															"// // // Set variables for next request\r",
															"// // pm.collectionVariables.set(\"appName\", selected.appName);\r",
															"// // pm.collectionVariables.set(\"appVersion\", selected.appVersion);\r",
															"\r",
															"// // console.log(\"Selected firmware:\", selected.appName, selected.appVersion);\r",
															"\r",
															"// let firmwareList = pm.response.json();\r",
															"\r",
															"// // Filter entries that have valid appName and appVersion\r",
															"// let validEntries = firmwareList.filter(fw => fw.appName && fw.appVersion);\r",
															"\r",
															"// // Randomly select one\r",
															"// let selected = validEntries[Math.floor(Math.random() * validEntries.length)];\r",
															"\r",
															"// pm.collectionVariables.set(\"appName\", selected.appName);\r",
															"// pm.collectionVariables.set(\"appVersion\", selected.appVersion);\r",
															"\r",
															"// console.log(\"Selected firmware:\", selected.appName, selected.appVersion);\r",
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{Url_firmwareApi}}",
													"host": [
														"{{Url_firmwareApi}}"
													],
													"query": [
														{
															"key": "snst",
															"value": null,
															"disabled": true
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "get-single Code-200",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 404\", function () {\r",
															"    pm.response.to.have.status(404);\r",
															"});\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{Url_firmwareApi}}/{{appName-sy}}/{{Firmware-sy-stagged}}",
													"host": [
														"{{Url_firmwareApi}}"
													],
													"path": [
														"{{appName-sy}}",
														"{{Firmware-sy-stagged}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "firmware Code-403",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"// Try to get values from the response first\r",
															"try {\r",
															"    const response = pm.response.json();\r",
															"    if (response.appName) {\r",
															"        pm.environment.set(\"appName\", response.appName);\r",
															"    }\r",
															"    if (response.appVersion) {\r",
															"        pm.environment.set(\"appVersion\", response.appVersion);\r",
															"    }\r",
															"} catch (e) {\r",
															"    console.warn(\"No JSON response or missing fields.\");\r",
															"}\r",
															"\r",
															"// Fallback: get values from the request body if not already set\r",
															"if (!pm.environment.get(\"appName\") || !pm.environment.get(\"appVersion\")) {\r",
															"    try {\r",
															"        const requestBody = pm.request.body.raw ? JSON.parse(pm.request.body.raw) : {};\r",
															"        if (requestBody.appName) {\r",
															"            pm.environment.set(\"appName\", requestBody.appName);\r",
															"        }\r",
															"        if (requestBody.appVersion) {\r",
															"            pm.environment.set(\"appVersion\", requestBody.appVersion);\r",
															"        }\r",
															"    } catch (e) {\r",
															"        console.warn(\"Failed to parse request body.\");\r",
															"    }\r",
															"}\r",
															"\r",
															"pm.test(\"Status code is 403\", function () {\r",
															"    pm.response.to.have.status(403);\r",
															"});\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "formdata",
													"formdata": [
														{
															"key": "Criticality",
															"value": "{{criticality_Recommended}}",
															"type": "text"
														},
														{
															"key": "Description",
															"value": "{{Description}}",
															"type": "text"
														},
														{
															"key": "ReleaseNotesUrl",
															"value": "{{ReleaseNotesUrl}}",
															"type": "text"
														},
														{
															"key": "file",
															"type": "file",
															"src": "apc_hw21_su_3-3-0-8.nmc3"
														}
													]
												},
												"url": {
													"raw": "{{Url_firmwareApi}}",
													"host": [
														"{{Url_firmwareApi}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Updating Code-403",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"if (!pm.collectionVariables.get(\"appName\") || !pm.collectionVariables.get(\"appVersion\")) {\r",
															"    throw new Error(\"appName or appVersion is missing. Please run the GET request first.\");\r",
															"}\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 403\", function () {\r",
															"    pm.response.to.have.status(403);\r",
															"});"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"criticality\": \"{{criticality_Optional}}\",\r\n  \"description\": \"{{Description}}\",\r\n  \"releaseNotesUrl\": \"{{ReleaseNotesUrl}}\"\r\n}\r\n\r\n",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{Url_firmwareApi}}/{{appName-sy}}/{{Firmware-sy-stagged}}",
													"host": [
														"{{Url_firmwareApi}}"
													],
													"path": [
														"{{appName-sy}}",
														"{{Firmware-sy-stagged}}"
													],
													"query": [
														{
															"key": "appName",
															"value": "su",
															"disabled": true
														},
														{
															"key": "appVersion",
															"value": "2.5.5.1",
															"disabled": true
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "get-single Code-404",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 404\", function () {\r",
															"    pm.response.to.have.status(404);\r",
															"});\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{Url_firmwareApi}}/{{appName-sy}}/{{Firmware-sy-stagged}}",
													"host": [
														"{{Url_firmwareApi}}"
													],
													"path": [
														"{{appName-sy}}",
														"{{Firmware-sy-stagged}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Updating Code-403",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"if (!pm.collectionVariables.get(\"appName\") || !pm.collectionVariables.get(\"appVersion\")) {\r",
															"    throw new Error(\"appName or appVersion is missing. Please run the GET request first.\");\r",
															"}\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 403\", function () {\r",
															"    pm.response.to.have.status(403);\r",
															"});"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"criticality\": \"{{criticality_Optional}}\",\r\n  \"description\": \"{{Description}}\",\r\n  \"releaseNotesUrl\": \"{{ReleaseNotesUrl}}\"\r\n}\r\n\r\n",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{Url_firmwareApi}}/{{appName-sy}}/{{Firmware-sy-stagged}}",
													"host": [
														"{{Url_firmwareApi}}"
													],
													"path": [
														"{{appName-sy}}",
														"{{Firmware-sy-stagged}}"
													],
													"query": [
														{
															"key": "appName",
															"value": "su",
															"disabled": true
														},
														{
															"key": "appVersion",
															"value": "2.5.5.1",
															"disabled": true
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "get-single Code-404",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 404\", function () {\r",
															"    pm.response.to.have.status(404);\r",
															"});\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{Url_firmwareApi}}/{{appName-sy}}/{{Firmware-sy-stagged}}",
													"host": [
														"{{Url_firmwareApi}}"
													],
													"path": [
														"{{appName-sy}}",
														"{{Firmware-sy-stagged}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Release Code-403",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 403\", function () {\r",
															"    pm.response.to.have.status(403);\r",
															"});\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"release\": true,\r\n  \"releaseDate\": \"2025-06-26T06:48:50.080876Z\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{Url_firmwareApi}}/{{appName-sy}}/{{Firmware-sy-stagged}}/release",
													"host": [
														"{{Url_firmwareApi}}"
													],
													"path": [
														"{{appName-sy}}",
														"{{Firmware-sy-stagged}}",
														"release"
													]
												}
											},
											"response": []
										},
										{
											"name": "get-single Code-404",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 404\", function () {\r",
															"    pm.response.to.have.status(404);\r",
															"});\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{Url_firmwareApi}}/{{appName-sy}}/{{Firmware-sy-stagged}}",
													"host": [
														"{{Url_firmwareApi}}"
													],
													"path": [
														"{{appName-sy}}",
														"{{Firmware-sy-stagged}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "generate Code-404",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"console.log(`Resolved URL: ${pm.variables.get(\"Url_firmwareApi\")}/${pm.collectionVariables.get(\"appName\")}/${pm.collectionVariables.get(\"appVersion\")}/generate`);\r",
															"\r",
															"\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"console.log(\"Response Body:\", pm.response.text());\r",
															"// console.log(\"Response Headers:\", pm.response.headers.toJSON());\r",
															"\r",
															"\r",
															"if (pm.response.code === 404) {\r",
															"    pm.visualizer.set(`<p>No firmware found for the selected version.</p>`);\r",
															"} else {\r",
															"    // existing logic for Content-Disposition\r",
															"}\r",
															"\r",
															"pm.test(\"Status code is 404\", function () {\r",
															"    pm.response.to.have.status(404);\r",
															"});\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"deviceIds\": [\r\n    \"2829866CDE70\"\r\n  ]\r\n}\r\n",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{Url_firmwareApi}}/{{appName-sy}}/{{Firmware-sy-stagged}}/generate",
													"host": [
														"{{Url_firmwareApi}}"
													],
													"path": [
														"{{appName-sy}}",
														"{{Firmware-sy-stagged}}",
														"generate"
													]
												}
											},
											"response": []
										},
										{
											"name": "stagged Code-403",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 403\", function () {\r",
															"    pm.response.to.have.status(403);\r",
															"});\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"release\": false\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{Url_firmwareApi}}/{{appName-sy}}/{{Firmware-sy-stagged}}/release",
													"host": [
														"{{Url_firmwareApi}}"
													],
													"path": [
														"{{appName-sy}}",
														"{{Firmware-sy-stagged}}",
														"release"
													]
												}
											},
											"response": []
										},
										{
											"name": "get-single Code-404",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 404\", function () {\r",
															"    pm.response.to.have.status(404);\r",
															"});\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{Url_firmwareApi}}/{{appName-sy}}/{{Firmware-sy-stagged}}",
													"host": [
														"{{Url_firmwareApi}}"
													],
													"path": [
														"{{appName-sy}}",
														"{{Firmware-sy-stagged}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Deleting Code-403",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"if (!pm.collectionVariables.get(\"appName\") || !pm.collectionVariables.get(\"appVersion\")) {\r",
															"    throw new Error(\"appName or appVersion is missing. Please run the GET request first.\");\r",
															"}\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 403\", function () {\r",
															"    pm.response.to.have.status(403);\r",
															"});"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [],
												"url": {
													"raw": "{{Url_firmwareApi}}/{{appName-sy}}/{{Firmware-sy-stagged}}",
													"host": [
														"{{Url_firmwareApi}}"
													],
													"path": [
														"{{appName-sy}}",
														"{{Firmware-sy-stagged}}"
													],
													"query": [
														{
															"key": "appName",
															"value": "su",
															"disabled": true
														},
														{
															"key": "appVersion",
															"value": "2.5.5.1",
															"disabled": true
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "get-single Copy5 Code-404",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 404\", function () {\r",
															"    pm.response.to.have.status(404);\r",
															"});\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{Url_firmwareApi}}/{{appName-sy}}/{{Firmware-sy-stagged}}",
													"host": [
														"{{Url_firmwareApi}}"
													],
													"path": [
														"{{appName-sy}}",
														"{{Firmware-sy-stagged}}"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Firmware API_sy released",
									"item": [
										{
											"name": "get-all Code-200",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"// pm.test(\"Status code is 200\", function () {\r",
															"//     pm.response.to.have.status(200);\r",
															"// });\r",
															"\r",
															"// // // Parse response\r",
															"// // let firmwareList = pm.response.json();\r",
															"\r",
															"// // // Randomly select one firmware entry\r",
															"// // let selected = firmwareList[Math.floor(Math.random() * firmwareList.length)];\r",
															"\r",
															"// // // Set variables for next request\r",
															"// // pm.collectionVariables.set(\"appName\", selected.appName);\r",
															"// // pm.collectionVariables.set(\"appVersion\", selected.appVersion);\r",
															"\r",
															"// // console.log(\"Selected firmware:\", selected.appName, selected.appVersion);\r",
															"\r",
															"// let firmwareList = pm.response.json();\r",
															"\r",
															"// // Filter entries that have valid appName and appVersion\r",
															"// let validEntries = firmwareList.filter(fw => fw.appName && fw.appVersion);\r",
															"\r",
															"// // Randomly select one\r",
															"// let selected = validEntries[Math.floor(Math.random() * validEntries.length)];\r",
															"\r",
															"// pm.collectionVariables.set(\"appName\", selected.appName);\r",
															"// pm.collectionVariables.set(\"appVersion\", selected.appVersion);\r",
															"\r",
															"// console.log(\"Selected firmware:\", selected.appName, selected.appVersion);\r",
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{Url_firmwareApi}}",
													"host": [
														"{{Url_firmwareApi}}"
													],
													"query": [
														{
															"key": "snst",
															"value": null,
															"disabled": true
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "get-single Code-200",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{Url_firmwareApi}}/{{appName-sy}}/{{Firmware-sy-released}}",
													"host": [
														"{{Url_firmwareApi}}"
													],
													"path": [
														"{{appName-sy}}",
														"{{Firmware-sy-released}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "firmware Code-403",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"// Try to get values from the response first\r",
															"try {\r",
															"    const response = pm.response.json();\r",
															"    if (response.appName) {\r",
															"        pm.environment.set(\"appName\", response.appName);\r",
															"    }\r",
															"    if (response.appVersion) {\r",
															"        pm.environment.set(\"appVersion\", response.appVersion);\r",
															"    }\r",
															"} catch (e) {\r",
															"    console.warn(\"No JSON response or missing fields.\");\r",
															"}\r",
															"\r",
															"// Fallback: get values from the request body if not already set\r",
															"if (!pm.environment.get(\"appName\") || !pm.environment.get(\"appVersion\")) {\r",
															"    try {\r",
															"        const requestBody = pm.request.body.raw ? JSON.parse(pm.request.body.raw) : {};\r",
															"        if (requestBody.appName) {\r",
															"            pm.environment.set(\"appName\", requestBody.appName);\r",
															"        }\r",
															"        if (requestBody.appVersion) {\r",
															"            pm.environment.set(\"appVersion\", requestBody.appVersion);\r",
															"        }\r",
															"    } catch (e) {\r",
															"        console.warn(\"Failed to parse request body.\");\r",
															"    }\r",
															"}\r",
															"\r",
															"pm.test(\"Status code is 403\", function () {\r",
															"    pm.response.to.have.status(403);\r",
															"});\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "formdata",
													"formdata": [
														{
															"key": "Criticality",
															"value": "{{criticality_Recommended}}",
															"type": "text"
														},
														{
															"key": "Description",
															"value": "{{Description}}",
															"type": "text"
														},
														{
															"key": "ReleaseNotesUrl",
															"value": "{{ReleaseNotesUrl}}",
															"type": "text"
														},
														{
															"key": "file",
															"type": "file",
															"src": "apc_hw21_su_3-3-0-8.nmc3"
														}
													]
												},
												"url": {
													"raw": "{{Url_firmwareApi}}",
													"host": [
														"{{Url_firmwareApi}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Updating Code-403",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"if (!pm.collectionVariables.get(\"appName\") || !pm.collectionVariables.get(\"appVersion\")) {\r",
															"    throw new Error(\"appName or appVersion is missing. Please run the GET request first.\");\r",
															"}\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 403\", function () {\r",
															"    pm.response.to.have.status(403);\r",
															"});"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"criticality\": \"{{criticality_Optional}}\",\r\n  \"description\": \"{{Description}}\",\r\n  \"releaseNotesUrl\": \"{{ReleaseNotesUrl}}\"\r\n}\r\n\r\n",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{Url_firmwareApi}}/{{appName-sy}}/{{Firmware-sy-released}}",
													"host": [
														"{{Url_firmwareApi}}"
													],
													"path": [
														"{{appName-sy}}",
														"{{Firmware-sy-released}}"
													],
													"query": [
														{
															"key": "appName",
															"value": "su",
															"disabled": true
														},
														{
															"key": "appVersion",
															"value": "2.5.5.1",
															"disabled": true
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "get-single Code-200",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{Url_firmwareApi}}/{{appName-sy}}/{{Firmware-sy-released}}",
													"host": [
														"{{Url_firmwareApi}}"
													],
													"path": [
														"{{appName-sy}}",
														"{{Firmware-sy-released}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Updating Code-403",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"if (!pm.collectionVariables.get(\"appName\") || !pm.collectionVariables.get(\"appVersion\")) {\r",
															"    throw new Error(\"appName or appVersion is missing. Please run the GET request first.\");\r",
															"}\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 403\", function () {\r",
															"    pm.response.to.have.status(403);\r",
															"});"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"criticality\": \"{{criticality_Optional}}\",\r\n  \"description\": \"{{Description}}\",\r\n  \"releaseNotesUrl\": \"{{ReleaseNotesUrl}}\"\r\n}\r\n\r\n",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{Url_firmwareApi}}/{{appName-sy}}/{{Firmware-sy-released}}",
													"host": [
														"{{Url_firmwareApi}}"
													],
													"path": [
														"{{appName-sy}}",
														"{{Firmware-sy-released}}"
													],
													"query": [
														{
															"key": "appName",
															"value": "su",
															"disabled": true
														},
														{
															"key": "appVersion",
															"value": "2.5.5.1",
															"disabled": true
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "get-single Code-200",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{Url_firmwareApi}}/{{appName-sy}}/{{Firmware-sy-released}}",
													"host": [
														"{{Url_firmwareApi}}"
													],
													"path": [
														"{{appName-sy}}",
														"{{Firmware-sy-released}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Release Code-403",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 403\", function () {\r",
															"    pm.response.to.have.status(403);\r",
															"});\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"release\": true,\r\n  \"releaseDate\": \"2025-06-26T06:48:50.080876Z\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{Url_firmwareApi}}/{{appName-sy}}/{{Firmware-sy-released}}/release",
													"host": [
														"{{Url_firmwareApi}}"
													],
													"path": [
														"{{appName-sy}}",
														"{{Firmware-sy-released}}",
														"release"
													]
												}
											},
											"response": []
										},
										{
											"name": "get-single Code-200",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{Url_firmwareApi}}/{{appName-sy}}/{{Firmware-sy-released}}",
													"host": [
														"{{Url_firmwareApi}}"
													],
													"path": [
														"{{appName-sy}}",
														"{{Firmware-sy-released}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "generate Code-200",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"console.log(`Resolved URL: ${pm.variables.get(\"Url_firmwareApi\")}/${pm.collectionVariables.get(\"appName\")}/${pm.collectionVariables.get(\"appVersion\")}/generate`);\r",
															"\r",
															"\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"console.log(\"Response Body:\", pm.response.text());\r",
															"// console.log(\"Response Headers:\", pm.response.headers.toJSON());\r",
															"\r",
															"\r",
															"if (pm.response.code === 404) {\r",
															"    pm.visualizer.set(`<p>No firmware found for the selected version.</p>`);\r",
															"} else {\r",
															"    // existing logic for Content-Disposition\r",
															"}\r",
															"\r",
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"deviceIds\": [\r\n    \"2829866CDE70\"\r\n  ]\r\n}\r\n",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{Url_firmwareApi}}/{{appName-sy}}/{{Firmware-sy-released}}/generate",
													"host": [
														"{{Url_firmwareApi}}"
													],
													"path": [
														"{{appName-sy}}",
														"{{Firmware-sy-released}}",
														"generate"
													]
												}
											},
											"response": []
										},
										{
											"name": "stagged Code-403",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 403\", function () {\r",
															"    pm.response.to.have.status(403);\r",
															"});\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"release\": false\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{Url_firmwareApi}}/{{appName-sy}}/{{Firmware-sy-released}}/release",
													"host": [
														"{{Url_firmwareApi}}"
													],
													"path": [
														"{{appName-sy}}",
														"{{Firmware-sy-released}}",
														"release"
													]
												}
											},
											"response": []
										},
										{
											"name": "get-single Code-200",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{Url_firmwareApi}}/{{appName-sy}}/{{Firmware-sy-released}}",
													"host": [
														"{{Url_firmwareApi}}"
													],
													"path": [
														"{{appName-sy}}",
														"{{Firmware-sy-released}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Deleting Code-403",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"if (!pm.collectionVariables.get(\"appName\") || !pm.collectionVariables.get(\"appVersion\")) {\r",
															"    throw new Error(\"appName or appVersion is missing. Please run the GET request first.\");\r",
															"}\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 403\", function () {\r",
															"    pm.response.to.have.status(403);\r",
															"});"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [],
												"url": {
													"raw": "{{Url_firmwareApi}}/{{appName-sy}}/{{Firmware-sy-released}}",
													"host": [
														"{{Url_firmwareApi}}"
													],
													"path": [
														"{{appName-sy}}",
														"{{Firmware-sy-released}}"
													],
													"query": [
														{
															"key": "appName",
															"value": "su",
															"disabled": true
														},
														{
															"key": "appVersion",
															"value": "2.5.5.1",
															"disabled": true
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "get-single Code-200",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{Url_firmwareApi}}/{{appName-sy}}/{{Firmware-sy-released}}",
													"host": [
														"{{Url_firmwareApi}}"
													],
													"path": [
														"{{appName-sy}}",
														"{{Firmware-sy-released}}"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Firmware API_sucan stagged schduled",
									"item": [
										{
											"name": "get-all Code-200",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"// pm.test(\"Status code is 200\", function () {\r",
															"//     pm.response.to.have.status(200);\r",
															"// });\r",
															"\r",
															"// // // Parse response\r",
															"// // let firmwareList = pm.response.json();\r",
															"\r",
															"// // // Randomly select one firmware entry\r",
															"// // let selected = firmwareList[Math.floor(Math.random() * firmwareList.length)];\r",
															"\r",
															"// // // Set variables for next request\r",
															"// // pm.collectionVariables.set(\"appName\", selected.appName);\r",
															"// // pm.collectionVariables.set(\"appVersion\", selected.appVersion);\r",
															"\r",
															"// // console.log(\"Selected firmware:\", selected.appName, selected.appVersion);\r",
															"\r",
															"// let firmwareList = pm.response.json();\r",
															"\r",
															"// // Filter entries that have valid appName and appVersion\r",
															"// let validEntries = firmwareList.filter(fw => fw.appName && fw.appVersion);\r",
															"\r",
															"// // Randomly select one\r",
															"// let selected = validEntries[Math.floor(Math.random() * validEntries.length)];\r",
															"\r",
															"// pm.collectionVariables.set(\"appName\", selected.appName);\r",
															"// pm.collectionVariables.set(\"appVersion\", selected.appVersion);\r",
															"\r",
															"// console.log(\"Selected firmware:\", selected.appName, selected.appVersion);\r",
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{Url_firmwareApi}}",
													"host": [
														"{{Url_firmwareApi}}"
													],
													"query": [
														{
															"key": "snst",
															"value": null,
															"disabled": true
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "get-single Code-404",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 404\", function () {\r",
															"    pm.response.to.have.status(404);\r",
															"});\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{Url_firmwareApi}}/{{appName-sucan}}/{{Firmware-sucan-stagged}}",
													"host": [
														"{{Url_firmwareApi}}"
													],
													"path": [
														"{{appName-sucan}}",
														"{{Firmware-sucan-stagged}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "firmware Code-403",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"// Try to get values from the response first\r",
															"try {\r",
															"    const response = pm.response.json();\r",
															"    if (response.appName) {\r",
															"        pm.environment.set(\"appName\", response.appName);\r",
															"    }\r",
															"    if (response.appVersion) {\r",
															"        pm.environment.set(\"appVersion\", response.appVersion);\r",
															"    }\r",
															"} catch (e) {\r",
															"    console.warn(\"No JSON response or missing fields.\");\r",
															"}\r",
															"\r",
															"// Fallback: get values from the request body if not already set\r",
															"if (!pm.environment.get(\"appName\") || !pm.environment.get(\"appVersion\")) {\r",
															"    try {\r",
															"        const requestBody = pm.request.body.raw ? JSON.parse(pm.request.body.raw) : {};\r",
															"        if (requestBody.appName) {\r",
															"            pm.environment.set(\"appName\", requestBody.appName);\r",
															"        }\r",
															"        if (requestBody.appVersion) {\r",
															"            pm.environment.set(\"appVersion\", requestBody.appVersion);\r",
															"        }\r",
															"    } catch (e) {\r",
															"        console.warn(\"Failed to parse request body.\");\r",
															"    }\r",
															"}\r",
															"\r",
															"pm.test(\"Status code is 403\", function () {\r",
															"    pm.response.to.have.status(403);\r",
															"});\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "formdata",
													"formdata": [
														{
															"key": "Criticality",
															"value": "{{criticality_Recommended}}",
															"type": "text"
														},
														{
															"key": "Description",
															"value": "{{Description}}",
															"type": "text"
														},
														{
															"key": "ReleaseNotesUrl",
															"value": "{{ReleaseNotesUrl}}",
															"type": "text"
														},
														{
															"key": "file",
															"type": "file",
															"src": "apc_hw21_su_3-3-0-8.nmc3"
														}
													]
												},
												"url": {
													"raw": "{{Url_firmwareApi}}",
													"host": [
														"{{Url_firmwareApi}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Updating Code-403",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"if (!pm.collectionVariables.get(\"appName\") || !pm.collectionVariables.get(\"appVersion\")) {\r",
															"    throw new Error(\"appName or appVersion is missing. Please run the GET request first.\");\r",
															"}\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 403\", function () {\r",
															"    pm.response.to.have.status(403);\r",
															"});"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"criticality\": \"{{criticality_Optional}}\",\r\n  \"description\": \"{{Description}}\",\r\n  \"releaseNotesUrl\": \"{{ReleaseNotesUrl}}\"\r\n}\r\n\r\n",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{Url_firmwareApi}}/{{appName-sucan}}/{{Firmware-sucan-stagged}}",
													"host": [
														"{{Url_firmwareApi}}"
													],
													"path": [
														"{{appName-sucan}}",
														"{{Firmware-sucan-stagged}}"
													],
													"query": [
														{
															"key": "appName",
															"value": "su",
															"disabled": true
														},
														{
															"key": "appVersion",
															"value": "2.5.5.1",
															"disabled": true
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "get-single Code-404",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 404\", function () {\r",
															"    pm.response.to.have.status(404);\r",
															"});\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{Url_firmwareApi}}/{{appName-sucan}}/{{Firmware-sucan-stagged}}",
													"host": [
														"{{Url_firmwareApi}}"
													],
													"path": [
														"{{appName-sucan}}",
														"{{Firmware-sucan-stagged}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Updating Code-403",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"if (!pm.collectionVariables.get(\"appName\") || !pm.collectionVariables.get(\"appVersion\")) {\r",
															"    throw new Error(\"appName or appVersion is missing. Please run the GET request first.\");\r",
															"}\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 403\", function () {\r",
															"    pm.response.to.have.status(403);\r",
															"});"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"criticality\": \"{{criticality_Optional}}\",\r\n  \"description\": \"{{Description}}\",\r\n  \"releaseNotesUrl\": \"{{ReleaseNotesUrl}}\"\r\n}\r\n\r\n",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{Url_firmwareApi}}/{{appName-sucan}}/{{Firmware-sucan-stagged}}",
													"host": [
														"{{Url_firmwareApi}}"
													],
													"path": [
														"{{appName-sucan}}",
														"{{Firmware-sucan-stagged}}"
													],
													"query": [
														{
															"key": "appName",
															"value": "su",
															"disabled": true
														},
														{
															"key": "appVersion",
															"value": "2.5.5.1",
															"disabled": true
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "get-single Code-404",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 404\", function () {\r",
															"    pm.response.to.have.status(404);\r",
															"});\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{Url_firmwareApi}}/{{appName-sucan}}/{{Firmware-sucan-stagged}}",
													"host": [
														"{{Url_firmwareApi}}"
													],
													"path": [
														"{{appName-sucan}}",
														"{{Firmware-sucan-stagged}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Release Code-403",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 403\", function () {\r",
															"    pm.response.to.have.status(403);\r",
															"});\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"release\": true,\r\n  \"releaseDate\": \"2025-06-26T06:48:50.080876Z\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{Url_firmwareApi}}/{{appName-sucan}}/{{Firmware-sucan-stagged}}/release",
													"host": [
														"{{Url_firmwareApi}}"
													],
													"path": [
														"{{appName-sucan}}",
														"{{Firmware-sucan-stagged}}",
														"release"
													]
												}
											},
											"response": []
										},
										{
											"name": "get-single Code-404",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 404\", function () {\r",
															"    pm.response.to.have.status(404);\r",
															"});\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{Url_firmwareApi}}/{{appName-sucan}}/{{Firmware-sucan-stagged}}",
													"host": [
														"{{Url_firmwareApi}}"
													],
													"path": [
														"{{appName-sucan}}",
														"{{Firmware-sucan-stagged}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "generate Code-404",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"console.log(`Resolved URL: ${pm.variables.get(\"Url_firmwareApi\")}/${pm.collectionVariables.get(\"appName\")}/${pm.collectionVariables.get(\"appVersion\")}/generate`);\r",
															"\r",
															"\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"console.log(\"Response Body:\", pm.response.text());\r",
															"// console.log(\"Response Headers:\", pm.response.headers.toJSON());\r",
															"\r",
															"\r",
															"if (pm.response.code === 404) {\r",
															"    pm.visualizer.set(`<p>No firmware found for the selected version.</p>`);\r",
															"} else {\r",
															"    // existing logic for Content-Disposition\r",
															"}\r",
															"\r",
															"pm.test(\"Status code is 404\", function () {\r",
															"    pm.response.to.have.status(404);\r",
															"});\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"deviceIds\": [\r\n    \"2829866CDE70\"\r\n  ]\r\n}\r\n",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{Url_firmwareApi}}/{{appName-sucan}}/{{Firmware-sucan-stagged}}/generate",
													"host": [
														"{{Url_firmwareApi}}"
													],
													"path": [
														"{{appName-sucan}}",
														"{{Firmware-sucan-stagged}}",
														"generate"
													]
												}
											},
											"response": []
										},
										{
											"name": "stagged Code-403",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 403\", function () {\r",
															"    pm.response.to.have.status(403);\r",
															"});\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"release\": false\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{Url_firmwareApi}}/{{appName-sucan}}/{{Firmware-sucan-stagged}}/release",
													"host": [
														"{{Url_firmwareApi}}"
													],
													"path": [
														"{{appName-sucan}}",
														"{{Firmware-sucan-stagged}}",
														"release"
													]
												}
											},
											"response": []
										},
										{
											"name": "get-single Code-404",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 404\", function () {\r",
															"    pm.response.to.have.status(404);\r",
															"});\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{Url_firmwareApi}}/{{appName-sucan}}/{{Firmware-sucan-stagged}}",
													"host": [
														"{{Url_firmwareApi}}"
													],
													"path": [
														"{{appName-sucan}}",
														"{{Firmware-sucan-stagged}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Deleting Code-403",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"if (!pm.collectionVariables.get(\"appName\") || !pm.collectionVariables.get(\"appVersion\")) {\r",
															"    throw new Error(\"appName or appVersion is missing. Please run the GET request first.\");\r",
															"}\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 403\", function () {\r",
															"    pm.response.to.have.status(403);\r",
															"});"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [],
												"url": {
													"raw": "{{Url_firmwareApi}}/{{appName-sucan}}/{{Firmware-sucan-stagged}}",
													"host": [
														"{{Url_firmwareApi}}"
													],
													"path": [
														"{{appName-sucan}}",
														"{{Firmware-sucan-stagged}}"
													],
													"query": [
														{
															"key": "appName",
															"value": "su",
															"disabled": true
														},
														{
															"key": "appVersion",
															"value": "2.5.5.1",
															"disabled": true
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "get-single Copy5 Code-404",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 404\", function () {\r",
															"    pm.response.to.have.status(404);\r",
															"});\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{Url_firmwareApi}}/{{appName-sucan}}/{{Firmware-sucan-stagged}}",
													"host": [
														"{{Url_firmwareApi}}"
													],
													"path": [
														"{{appName-sucan}}",
														"{{Firmware-sucan-stagged}}"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Firmware API_sucan released",
									"item": [
										{
											"name": "get-all Code-200",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"// pm.test(\"Status code is 200\", function () {\r",
															"//     pm.response.to.have.status(200);\r",
															"// });\r",
															"\r",
															"// // // Parse response\r",
															"// // let firmwareList = pm.response.json();\r",
															"\r",
															"// // // Randomly select one firmware entry\r",
															"// // let selected = firmwareList[Math.floor(Math.random() * firmwareList.length)];\r",
															"\r",
															"// // // Set variables for next request\r",
															"// // pm.collectionVariables.set(\"appName\", selected.appName);\r",
															"// // pm.collectionVariables.set(\"appVersion\", selected.appVersion);\r",
															"\r",
															"// // console.log(\"Selected firmware:\", selected.appName, selected.appVersion);\r",
															"\r",
															"// let firmwareList = pm.response.json();\r",
															"\r",
															"// // Filter entries that have valid appName and appVersion\r",
															"// let validEntries = firmwareList.filter(fw => fw.appName && fw.appVersion);\r",
															"\r",
															"// // Randomly select one\r",
															"// let selected = validEntries[Math.floor(Math.random() * validEntries.length)];\r",
															"\r",
															"// pm.collectionVariables.set(\"appName\", selected.appName);\r",
															"// pm.collectionVariables.set(\"appVersion\", selected.appVersion);\r",
															"\r",
															"// console.log(\"Selected firmware:\", selected.appName, selected.appVersion);\r",
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{Url_firmwareApi}}",
													"host": [
														"{{Url_firmwareApi}}"
													],
													"query": [
														{
															"key": "snst",
															"value": null,
															"disabled": true
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "get-single Code-200",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{Url_firmwareApi}}/{{appName-sucan}}/{{Firmware-sucan-released}}",
													"host": [
														"{{Url_firmwareApi}}"
													],
													"path": [
														"{{appName-sucan}}",
														"{{Firmware-sucan-released}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "firmware Code-403",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"// Try to get values from the response first\r",
															"try {\r",
															"    const response = pm.response.json();\r",
															"    if (response.appName) {\r",
															"        pm.environment.set(\"appName\", response.appName);\r",
															"    }\r",
															"    if (response.appVersion) {\r",
															"        pm.environment.set(\"appVersion\", response.appVersion);\r",
															"    }\r",
															"} catch (e) {\r",
															"    console.warn(\"No JSON response or missing fields.\");\r",
															"}\r",
															"\r",
															"// Fallback: get values from the request body if not already set\r",
															"if (!pm.environment.get(\"appName\") || !pm.environment.get(\"appVersion\")) {\r",
															"    try {\r",
															"        const requestBody = pm.request.body.raw ? JSON.parse(pm.request.body.raw) : {};\r",
															"        if (requestBody.appName) {\r",
															"            pm.environment.set(\"appName\", requestBody.appName);\r",
															"        }\r",
															"        if (requestBody.appVersion) {\r",
															"            pm.environment.set(\"appVersion\", requestBody.appVersion);\r",
															"        }\r",
															"    } catch (e) {\r",
															"        console.warn(\"Failed to parse request body.\");\r",
															"    }\r",
															"}\r",
															"\r",
															"pm.test(\"Status code is 403\", function () {\r",
															"    pm.response.to.have.status(403);\r",
															"});\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "formdata",
													"formdata": [
														{
															"key": "Criticality",
															"value": "{{criticality_Recommended}}",
															"type": "text"
														},
														{
															"key": "Description",
															"value": "{{Description}}",
															"type": "text"
														},
														{
															"key": "ReleaseNotesUrl",
															"value": "{{ReleaseNotesUrl}}",
															"type": "text"
														},
														{
															"key": "file",
															"type": "file",
															"src": "apc_hw21_su_3-3-0-8.nmc3"
														}
													]
												},
												"url": {
													"raw": "{{Url_firmwareApi}}",
													"host": [
														"{{Url_firmwareApi}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Updating Code-403",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"if (!pm.collectionVariables.get(\"appName\") || !pm.collectionVariables.get(\"appVersion\")) {\r",
															"    throw new Error(\"appName or appVersion is missing. Please run the GET request first.\");\r",
															"}\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 403\", function () {\r",
															"    pm.response.to.have.status(403);\r",
															"});"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"criticality\": \"{{criticality_Optional}}\",\r\n  \"description\": \"{{Description}}\",\r\n  \"releaseNotesUrl\": \"{{ReleaseNotesUrl}}\"\r\n}\r\n\r\n",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{Url_firmwareApi}}/{{appName-sucan}}/{{Firmware-sucan-released}}",
													"host": [
														"{{Url_firmwareApi}}"
													],
													"path": [
														"{{appName-sucan}}",
														"{{Firmware-sucan-released}}"
													],
													"query": [
														{
															"key": "appName",
															"value": "su",
															"disabled": true
														},
														{
															"key": "appVersion",
															"value": "2.5.5.1",
															"disabled": true
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "get-single Code-200",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{Url_firmwareApi}}/{{appName-sucan}}/{{Firmware-sucan-released}}",
													"host": [
														"{{Url_firmwareApi}}"
													],
													"path": [
														"{{appName-sucan}}",
														"{{Firmware-sucan-released}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Updating Code-403",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"if (!pm.collectionVariables.get(\"appName\") || !pm.collectionVariables.get(\"appVersion\")) {\r",
															"    throw new Error(\"appName or appVersion is missing. Please run the GET request first.\");\r",
															"}\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 403\", function () {\r",
															"    pm.response.to.have.status(403);\r",
															"});"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"criticality\": \"{{criticality_Optional}}\",\r\n  \"description\": \"{{Description}}\",\r\n  \"releaseNotesUrl\": \"{{ReleaseNotesUrl}}\"\r\n}\r\n\r\n",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{Url_firmwareApi}}/{{appName-sucan}}/{{Firmware-sucan-released}}",
													"host": [
														"{{Url_firmwareApi}}"
													],
													"path": [
														"{{appName-sucan}}",
														"{{Firmware-sucan-released}}"
													],
													"query": [
														{
															"key": "appName",
															"value": "su",
															"disabled": true
														},
														{
															"key": "appVersion",
															"value": "2.5.5.1",
															"disabled": true
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "get-single Code-200",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{Url_firmwareApi}}/{{appName-sucan}}/{{Firmware-sucan-released}}",
													"host": [
														"{{Url_firmwareApi}}"
													],
													"path": [
														"{{appName-sucan}}",
														"{{Firmware-sucan-released}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Release Code-403",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 403\", function () {\r",
															"    pm.response.to.have.status(403);\r",
															"});\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"release\": true,\r\n  \"releaseDate\": \"2025-06-26T06:48:50.080876Z\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{Url_firmwareApi}}/{{appName-sucan}}/{{Firmware-sucan-released}}/release",
													"host": [
														"{{Url_firmwareApi}}"
													],
													"path": [
														"{{appName-sucan}}",
														"{{Firmware-sucan-released}}",
														"release"
													]
												}
											},
											"response": []
										},
										{
											"name": "get-single Code-200",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{Url_firmwareApi}}/{{appName-sucan}}/{{Firmware-sucan-released}}",
													"host": [
														"{{Url_firmwareApi}}"
													],
													"path": [
														"{{appName-sucan}}",
														"{{Firmware-sucan-released}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "generate Code-200",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"console.log(`Resolved URL: ${pm.variables.get(\"Url_firmwareApi\")}/${pm.collectionVariables.get(\"appName\")}/${pm.collectionVariables.get(\"appVersion\")}/generate`);\r",
															"\r",
															"\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"console.log(\"Response Body:\", pm.response.text());\r",
															"// console.log(\"Response Headers:\", pm.response.headers.toJSON());\r",
															"\r",
															"\r",
															"if (pm.response.code === 404) {\r",
															"    pm.visualizer.set(`<p>No firmware found for the selected version.</p>`);\r",
															"} else {\r",
															"    // existing logic for Content-Disposition\r",
															"}\r",
															"\r",
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"deviceIds\": [\r\n    \"2829866CDE70\"\r\n  ]\r\n}\r\n",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{Url_firmwareApi}}/{{appName-sucan}}/{{Firmware-sucan-released}}/generate",
													"host": [
														"{{Url_firmwareApi}}"
													],
													"path": [
														"{{appName-sucan}}",
														"{{Firmware-sucan-released}}",
														"generate"
													]
												}
											},
											"response": []
										},
										{
											"name": "stagged Code-403",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 403\", function () {\r",
															"    pm.response.to.have.status(403);\r",
															"});\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"release\": false\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{Url_firmwareApi}}/{{appName-sucan}}/{{Firmware-sucan-released}}/release",
													"host": [
														"{{Url_firmwareApi}}"
													],
													"path": [
														"{{appName-sucan}}",
														"{{Firmware-sucan-released}}",
														"release"
													]
												}
											},
											"response": []
										},
										{
											"name": "get-single Code-200",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{Url_firmwareApi}}/{{appName-sucan}}/{{Firmware-sucan-released}}",
													"host": [
														"{{Url_firmwareApi}}"
													],
													"path": [
														"{{appName-sucan}}",
														"{{Firmware-sucan-released}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Deleting Code-403",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"if (!pm.collectionVariables.get(\"appName\") || !pm.collectionVariables.get(\"appVersion\")) {\r",
															"    throw new Error(\"appName or appVersion is missing. Please run the GET request first.\");\r",
															"}\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 403\", function () {\r",
															"    pm.response.to.have.status(403);\r",
															"});"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [],
												"url": {
													"raw": "{{Url_firmwareApi}}/{{appName-sucan}}/{{Firmware-sucan-released}}",
													"host": [
														"{{Url_firmwareApi}}"
													],
													"path": [
														"{{appName-sucan}}",
														"{{Firmware-sucan-released}}"
													],
													"query": [
														{
															"key": "appName",
															"value": "su",
															"disabled": true
														},
														{
															"key": "appVersion",
															"value": "2.5.5.1",
															"disabled": true
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "get-single Code-200",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{Url_firmwareApi}}/{{appName-sucan}}/{{Firmware-sucan-released}}",
													"host": [
														"{{Url_firmwareApi}}"
													],
													"path": [
														"{{appName-sucan}}",
														"{{Firmware-sucan-released}}"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Firmware API_rpdu2g stagged schduled",
									"item": [
										{
											"name": "get-all Code-200",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"// pm.test(\"Status code is 200\", function () {\r",
															"//     pm.response.to.have.status(200);\r",
															"// });\r",
															"\r",
															"// // // Parse response\r",
															"// // let firmwareList = pm.response.json();\r",
															"\r",
															"// // // Randomly select one firmware entry\r",
															"// // let selected = firmwareList[Math.floor(Math.random() * firmwareList.length)];\r",
															"\r",
															"// // // Set variables for next request\r",
															"// // pm.collectionVariables.set(\"appName\", selected.appName);\r",
															"// // pm.collectionVariables.set(\"appVersion\", selected.appVersion);\r",
															"\r",
															"// // console.log(\"Selected firmware:\", selected.appName, selected.appVersion);\r",
															"\r",
															"// let firmwareList = pm.response.json();\r",
															"\r",
															"// // Filter entries that have valid appName and appVersion\r",
															"// let validEntries = firmwareList.filter(fw => fw.appName && fw.appVersion);\r",
															"\r",
															"// // Randomly select one\r",
															"// let selected = validEntries[Math.floor(Math.random() * validEntries.length)];\r",
															"\r",
															"// pm.collectionVariables.set(\"appName\", selected.appName);\r",
															"// pm.collectionVariables.set(\"appVersion\", selected.appVersion);\r",
															"\r",
															"// console.log(\"Selected firmware:\", selected.appName, selected.appVersion);\r",
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{Url_firmwareApi}}",
													"host": [
														"{{Url_firmwareApi}}"
													],
													"query": [
														{
															"key": "snst",
															"value": null,
															"disabled": true
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "get-single Code-404",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 404\", function () {\r",
															"    pm.response.to.have.status(404);\r",
															"});\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{Url_firmwareApi}}/{{appName-rpdu2g}}/{{Firmware-rpdu2g-stagged}}",
													"host": [
														"{{Url_firmwareApi}}"
													],
													"path": [
														"{{appName-rpdu2g}}",
														"{{Firmware-rpdu2g-stagged}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "firmware Code-403",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"// Try to get values from the response first\r",
															"try {\r",
															"    const response = pm.response.json();\r",
															"    if (response.appName) {\r",
															"        pm.environment.set(\"appName\", response.appName);\r",
															"    }\r",
															"    if (response.appVersion) {\r",
															"        pm.environment.set(\"appVersion\", response.appVersion);\r",
															"    }\r",
															"} catch (e) {\r",
															"    console.warn(\"No JSON response or missing fields.\");\r",
															"}\r",
															"\r",
															"// Fallback: get values from the request body if not already set\r",
															"if (!pm.environment.get(\"appName\") || !pm.environment.get(\"appVersion\")) {\r",
															"    try {\r",
															"        const requestBody = pm.request.body.raw ? JSON.parse(pm.request.body.raw) : {};\r",
															"        if (requestBody.appName) {\r",
															"            pm.environment.set(\"appName\", requestBody.appName);\r",
															"        }\r",
															"        if (requestBody.appVersion) {\r",
															"            pm.environment.set(\"appVersion\", requestBody.appVersion);\r",
															"        }\r",
															"    } catch (e) {\r",
															"        console.warn(\"Failed to parse request body.\");\r",
															"    }\r",
															"}\r",
															"\r",
															"pm.test(\"Status code is 403\", function () {\r",
															"    pm.response.to.have.status(403);\r",
															"});\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "formdata",
													"formdata": [
														{
															"key": "Criticality",
															"value": "{{criticality_Recommended}}",
															"type": "text"
														},
														{
															"key": "Description",
															"value": "{{Description}}",
															"type": "text"
														},
														{
															"key": "ReleaseNotesUrl",
															"value": "{{ReleaseNotesUrl}}",
															"type": "text"
														},
														{
															"key": "file",
															"type": "file",
															"src": "apc_hw21_su_3-3-0-8.nmc3"
														}
													]
												},
												"url": {
													"raw": "{{Url_firmwareApi}}",
													"host": [
														"{{Url_firmwareApi}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Updating Code-403",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"if (!pm.collectionVariables.get(\"appName\") || !pm.collectionVariables.get(\"appVersion\")) {\r",
															"    throw new Error(\"appName or appVersion is missing. Please run the GET request first.\");\r",
															"}\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 403\", function () {\r",
															"    pm.response.to.have.status(403);\r",
															"});"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"criticality\": \"{{criticality_Optional}}\",\r\n  \"description\": \"{{Description}}\",\r\n  \"releaseNotesUrl\": \"{{ReleaseNotesUrl}}\"\r\n}\r\n\r\n",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{Url_firmwareApi}}/{{appName-rpdu2g}}/{{Firmware-rpdu2g-stagged}}",
													"host": [
														"{{Url_firmwareApi}}"
													],
													"path": [
														"{{appName-rpdu2g}}",
														"{{Firmware-rpdu2g-stagged}}"
													],
													"query": [
														{
															"key": "appName",
															"value": "su",
															"disabled": true
														},
														{
															"key": "appVersion",
															"value": "2.5.5.1",
															"disabled": true
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "get-single Code-404",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 404\", function () {\r",
															"    pm.response.to.have.status(404);\r",
															"});\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{Url_firmwareApi}}/{{appName-rpdu2g}}/{{Firmware-rpdu2g-stagged}}",
													"host": [
														"{{Url_firmwareApi}}"
													],
													"path": [
														"{{appName-rpdu2g}}",
														"{{Firmware-rpdu2g-stagged}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Updating Code-403",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"if (!pm.collectionVariables.get(\"appName\") || !pm.collectionVariables.get(\"appVersion\")) {\r",
															"    throw new Error(\"appName or appVersion is missing. Please run the GET request first.\");\r",
															"}\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 403\", function () {\r",
															"    pm.response.to.have.status(403);\r",
															"});"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"criticality\": \"{{criticality_Optional}}\",\r\n  \"description\": \"{{Description}}\",\r\n  \"releaseNotesUrl\": \"{{ReleaseNotesUrl}}\"\r\n}\r\n\r\n",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{Url_firmwareApi}}/{{appName-rpdu2g}}/{{Firmware-rpdu2g-stagged}}",
													"host": [
														"{{Url_firmwareApi}}"
													],
													"path": [
														"{{appName-rpdu2g}}",
														"{{Firmware-rpdu2g-stagged}}"
													],
													"query": [
														{
															"key": "appName",
															"value": "su",
															"disabled": true
														},
														{
															"key": "appVersion",
															"value": "2.5.5.1",
															"disabled": true
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "get-single Code-404",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 404\", function () {\r",
															"    pm.response.to.have.status(404);\r",
															"});\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{Url_firmwareApi}}/{{appName-rpdu2g}}/{{Firmware-rpdu2g-stagged}}",
													"host": [
														"{{Url_firmwareApi}}"
													],
													"path": [
														"{{appName-rpdu2g}}",
														"{{Firmware-rpdu2g-stagged}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Release Code-403",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 403\", function () {\r",
															"    pm.response.to.have.status(403);\r",
															"});\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"release\": true,\r\n  \"releaseDate\": \"2025-06-26T06:48:50.080876Z\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{Url_firmwareApi}}/{{appName-rpdu2g}}/{{Firmware-rpdu2g-stagged}}/release",
													"host": [
														"{{Url_firmwareApi}}"
													],
													"path": [
														"{{appName-rpdu2g}}",
														"{{Firmware-rpdu2g-stagged}}",
														"release"
													]
												}
											},
											"response": []
										},
										{
											"name": "get-single Code-404",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 404\", function () {\r",
															"    pm.response.to.have.status(404);\r",
															"});\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{Url_firmwareApi}}/{{appName-rpdu2g}}/{{Firmware-rpdu2g-stagged}}",
													"host": [
														"{{Url_firmwareApi}}"
													],
													"path": [
														"{{appName-rpdu2g}}",
														"{{Firmware-rpdu2g-stagged}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "generate Code-404",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"console.log(`Resolved URL: ${pm.variables.get(\"Url_firmwareApi\")}/${pm.collectionVariables.get(\"appName\")}/${pm.collectionVariables.get(\"appVersion\")}/generate`);\r",
															"\r",
															"\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"console.log(\"Response Body:\", pm.response.text());\r",
															"// console.log(\"Response Headers:\", pm.response.headers.toJSON());\r",
															"\r",
															"\r",
															"if (pm.response.code === 404) {\r",
															"    pm.visualizer.set(`<p>No firmware found for the selected version.</p>`);\r",
															"} else {\r",
															"    // existing logic for Content-Disposition\r",
															"}\r",
															"\r",
															"pm.test(\"Status code is 404\", function () {\r",
															"    pm.response.to.have.status(404);\r",
															"});\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"deviceIds\": [\r\n    \"2829866CDE70\"\r\n  ]\r\n}\r\n",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{Url_firmwareApi}}/{{appName-rpdu2g}}/{{Firmware-rpdu2g-stagged}}/generate",
													"host": [
														"{{Url_firmwareApi}}"
													],
													"path": [
														"{{appName-rpdu2g}}",
														"{{Firmware-rpdu2g-stagged}}",
														"generate"
													]
												}
											},
											"response": []
										},
										{
											"name": "stagged Code-403",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 403\", function () {\r",
															"    pm.response.to.have.status(403);\r",
															"});\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"release\": false\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{Url_firmwareApi}}/{{appName-rpdu2g}}/{{Firmware-rpdu2g-stagged}}/release",
													"host": [
														"{{Url_firmwareApi}}"
													],
													"path": [
														"{{appName-rpdu2g}}",
														"{{Firmware-rpdu2g-stagged}}",
														"release"
													]
												}
											},
											"response": []
										},
										{
											"name": "get-single Code-404",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 404\", function () {\r",
															"    pm.response.to.have.status(404);\r",
															"});\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{Url_firmwareApi}}/{{appName-rpdu2g}}/{{Firmware-rpdu2g-stagged}}",
													"host": [
														"{{Url_firmwareApi}}"
													],
													"path": [
														"{{appName-rpdu2g}}",
														"{{Firmware-rpdu2g-stagged}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Deleting Code-403",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"if (!pm.collectionVariables.get(\"appName\") || !pm.collectionVariables.get(\"appVersion\")) {\r",
															"    throw new Error(\"appName or appVersion is missing. Please run the GET request first.\");\r",
															"}\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 403\", function () {\r",
															"    pm.response.to.have.status(403);\r",
															"});"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [],
												"url": {
													"raw": "{{Url_firmwareApi}}/{{appName-rpdu2g}}/{{Firmware-rpdu2g-stagged}}",
													"host": [
														"{{Url_firmwareApi}}"
													],
													"path": [
														"{{appName-rpdu2g}}",
														"{{Firmware-rpdu2g-stagged}}"
													],
													"query": [
														{
															"key": "appName",
															"value": "su",
															"disabled": true
														},
														{
															"key": "appVersion",
															"value": "2.5.5.1",
															"disabled": true
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "get-single Copy5 Code-404",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 404\", function () {\r",
															"    pm.response.to.have.status(404);\r",
															"});\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{Url_firmwareApi}}/{{appName-rpdu2g}}/{{Firmware-rpdu2g-stagged}}",
													"host": [
														"{{Url_firmwareApi}}"
													],
													"path": [
														"{{appName-rpdu2g}}",
														"{{Firmware-rpdu2g-stagged}}"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Firmware API_rpdu2g released",
									"item": [
										{
											"name": "get-all Code-200",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"// pm.test(\"Status code is 200\", function () {\r",
															"//     pm.response.to.have.status(200);\r",
															"// });\r",
															"\r",
															"// // // Parse response\r",
															"// // let firmwareList = pm.response.json();\r",
															"\r",
															"// // // Randomly select one firmware entry\r",
															"// // let selected = firmwareList[Math.floor(Math.random() * firmwareList.length)];\r",
															"\r",
															"// // // Set variables for next request\r",
															"// // pm.collectionVariables.set(\"appName\", selected.appName);\r",
															"// // pm.collectionVariables.set(\"appVersion\", selected.appVersion);\r",
															"\r",
															"// // console.log(\"Selected firmware:\", selected.appName, selected.appVersion);\r",
															"\r",
															"// let firmwareList = pm.response.json();\r",
															"\r",
															"// // Filter entries that have valid appName and appVersion\r",
															"// let validEntries = firmwareList.filter(fw => fw.appName && fw.appVersion);\r",
															"\r",
															"// // Randomly select one\r",
															"// let selected = validEntries[Math.floor(Math.random() * validEntries.length)];\r",
															"\r",
															"// pm.collectionVariables.set(\"appName\", selected.appName);\r",
															"// pm.collectionVariables.set(\"appVersion\", selected.appVersion);\r",
															"\r",
															"// console.log(\"Selected firmware:\", selected.appName, selected.appVersion);\r",
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{Url_firmwareApi}}",
													"host": [
														"{{Url_firmwareApi}}"
													],
													"query": [
														{
															"key": "snst",
															"value": null,
															"disabled": true
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "get-single Code-200",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{Url_firmwareApi}}/{{appName-rpdu2g}}/{{Firmware-rpdu2g-released}}",
													"host": [
														"{{Url_firmwareApi}}"
													],
													"path": [
														"{{appName-rpdu2g}}",
														"{{Firmware-rpdu2g-released}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "firmware Code-403",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"// Try to get values from the response first\r",
															"try {\r",
															"    const response = pm.response.json();\r",
															"    if (response.appName) {\r",
															"        pm.environment.set(\"appName\", response.appName);\r",
															"    }\r",
															"    if (response.appVersion) {\r",
															"        pm.environment.set(\"appVersion\", response.appVersion);\r",
															"    }\r",
															"} catch (e) {\r",
															"    console.warn(\"No JSON response or missing fields.\");\r",
															"}\r",
															"\r",
															"// Fallback: get values from the request body if not already set\r",
															"if (!pm.environment.get(\"appName\") || !pm.environment.get(\"appVersion\")) {\r",
															"    try {\r",
															"        const requestBody = pm.request.body.raw ? JSON.parse(pm.request.body.raw) : {};\r",
															"        if (requestBody.appName) {\r",
															"            pm.environment.set(\"appName\", requestBody.appName);\r",
															"        }\r",
															"        if (requestBody.appVersion) {\r",
															"            pm.environment.set(\"appVersion\", requestBody.appVersion);\r",
															"        }\r",
															"    } catch (e) {\r",
															"        console.warn(\"Failed to parse request body.\");\r",
															"    }\r",
															"}\r",
															"\r",
															"pm.test(\"Status code is 403\", function () {\r",
															"    pm.response.to.have.status(403);\r",
															"});\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "formdata",
													"formdata": [
														{
															"key": "Criticality",
															"value": "{{criticality_Recommended}}",
															"type": "text"
														},
														{
															"key": "Description",
															"value": "{{Description}}",
															"type": "text"
														},
														{
															"key": "ReleaseNotesUrl",
															"value": "{{ReleaseNotesUrl}}",
															"type": "text"
														},
														{
															"key": "file",
															"type": "file",
															"src": "apc_hw21_su_3-3-0-8.nmc3"
														}
													]
												},
												"url": {
													"raw": "{{Url_firmwareApi}}",
													"host": [
														"{{Url_firmwareApi}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Updating Code-403",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"if (!pm.collectionVariables.get(\"appName\") || !pm.collectionVariables.get(\"appVersion\")) {\r",
															"    throw new Error(\"appName or appVersion is missing. Please run the GET request first.\");\r",
															"}\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 403\", function () {\r",
															"    pm.response.to.have.status(403);\r",
															"});"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"criticality\": \"{{criticality_Optional}}\",\r\n  \"description\": \"{{Description}}\",\r\n  \"releaseNotesUrl\": \"{{ReleaseNotesUrl}}\"\r\n}\r\n\r\n",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{Url_firmwareApi}}/{{appName-rpdu2g}}/{{Firmware-rpdu2g-released}}",
													"host": [
														"{{Url_firmwareApi}}"
													],
													"path": [
														"{{appName-rpdu2g}}",
														"{{Firmware-rpdu2g-released}}"
													],
													"query": [
														{
															"key": "appName",
															"value": "su",
															"disabled": true
														},
														{
															"key": "appVersion",
															"value": "2.5.5.1",
															"disabled": true
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "get-single Code-200",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{Url_firmwareApi}}/{{appName-rpdu2g}}/{{Firmware-rpdu2g-released}}",
													"host": [
														"{{Url_firmwareApi}}"
													],
													"path": [
														"{{appName-rpdu2g}}",
														"{{Firmware-rpdu2g-released}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Updating Code-403",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"if (!pm.collectionVariables.get(\"appName\") || !pm.collectionVariables.get(\"appVersion\")) {\r",
															"    throw new Error(\"appName or appVersion is missing. Please run the GET request first.\");\r",
															"}\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 403\", function () {\r",
															"    pm.response.to.have.status(403);\r",
															"});"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"criticality\": \"{{criticality_Optional}}\",\r\n  \"description\": \"{{Description}}\",\r\n  \"releaseNotesUrl\": \"{{ReleaseNotesUrl}}\"\r\n}\r\n\r\n",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{Url_firmwareApi}}/{{appName-rpdu2g}}/{{Firmware-rpdu2g-released}}",
													"host": [
														"{{Url_firmwareApi}}"
													],
													"path": [
														"{{appName-rpdu2g}}",
														"{{Firmware-rpdu2g-released}}"
													],
													"query": [
														{
															"key": "appName",
															"value": "su",
															"disabled": true
														},
														{
															"key": "appVersion",
															"value": "2.5.5.1",
															"disabled": true
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "get-single Code-200",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{Url_firmwareApi}}/{{appName-rpdu2g}}/{{Firmware-rpdu2g-released}}",
													"host": [
														"{{Url_firmwareApi}}"
													],
													"path": [
														"{{appName-rpdu2g}}",
														"{{Firmware-rpdu2g-released}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Release Code-403",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 403\", function () {\r",
															"    pm.response.to.have.status(403);\r",
															"});\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"release\": true,\r\n  \"releaseDate\": \"2025-06-26T06:48:50.080876Z\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{Url_firmwareApi}}/{{appName-rpdu2g}}/{{Firmware-rpdu2g-released}}/release",
													"host": [
														"{{Url_firmwareApi}}"
													],
													"path": [
														"{{appName-rpdu2g}}",
														"{{Firmware-rpdu2g-released}}",
														"release"
													]
												}
											},
											"response": []
										},
										{
											"name": "get-single Code-200",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{Url_firmwareApi}}/{{appName-rpdu2g}}/{{Firmware-rpdu2g-released}}",
													"host": [
														"{{Url_firmwareApi}}"
													],
													"path": [
														"{{appName-rpdu2g}}",
														"{{Firmware-rpdu2g-released}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "generate Code-200",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"console.log(`Resolved URL: ${pm.variables.get(\"Url_firmwareApi\")}/${pm.collectionVariables.get(\"appName\")}/${pm.collectionVariables.get(\"appVersion\")}/generate`);\r",
															"\r",
															"\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"console.log(\"Response Body:\", pm.response.text());\r",
															"// console.log(\"Response Headers:\", pm.response.headers.toJSON());\r",
															"\r",
															"\r",
															"if (pm.response.code === 404) {\r",
															"    pm.visualizer.set(`<p>No firmware found for the selected version.</p>`);\r",
															"} else {\r",
															"    // existing logic for Content-Disposition\r",
															"}\r",
															"\r",
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"deviceIds\": [\r\n    \"2829866CDE70\"\r\n  ]\r\n}\r\n",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{Url_firmwareApi}}/{{appName-rpdu2g}}/{{Firmware-rpdu2g-released}}/generate",
													"host": [
														"{{Url_firmwareApi}}"
													],
													"path": [
														"{{appName-rpdu2g}}",
														"{{Firmware-rpdu2g-released}}",
														"generate"
													]
												}
											},
											"response": []
										},
										{
											"name": "stagged Code-403",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 403\", function () {\r",
															"    pm.response.to.have.status(403);\r",
															"});\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"release\": false\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{Url_firmwareApi}}/{{appName-rpdu2g}}/{{Firmware-rpdu2g-released}}/release",
													"host": [
														"{{Url_firmwareApi}}"
													],
													"path": [
														"{{appName-rpdu2g}}",
														"{{Firmware-rpdu2g-released}}",
														"release"
													]
												}
											},
											"response": []
										},
										{
											"name": "get-single Code-200",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{Url_firmwareApi}}/{{appName-rpdu2g}}/{{Firmware-rpdu2g-released}}",
													"host": [
														"{{Url_firmwareApi}}"
													],
													"path": [
														"{{appName-rpdu2g}}",
														"{{Firmware-rpdu2g-released}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Deleting Code-403",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"if (!pm.collectionVariables.get(\"appName\") || !pm.collectionVariables.get(\"appVersion\")) {\r",
															"    throw new Error(\"appName or appVersion is missing. Please run the GET request first.\");\r",
															"}\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 403\", function () {\r",
															"    pm.response.to.have.status(403);\r",
															"});"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [],
												"url": {
													"raw": "{{Url_firmwareApi}}/{{appName-rpdu2g}}/{{Firmware-rpdu2g-released}}",
													"host": [
														"{{Url_firmwareApi}}"
													],
													"path": [
														"{{appName-rpdu2g}}",
														"{{Firmware-rpdu2g-released}}"
													],
													"query": [
														{
															"key": "appName",
															"value": "su",
															"disabled": true
														},
														{
															"key": "appVersion",
															"value": "2.5.5.1",
															"disabled": true
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "get-single Code-200",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{Url_firmwareApi}}/{{appName-rpdu2g}}/{{Firmware-rpdu2g-released}}",
													"host": [
														"{{Url_firmwareApi}}"
													],
													"path": [
														"{{appName-rpdu2g}}",
														"{{Firmware-rpdu2g-released}}"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Firmware API_eu1p stagged schduled",
									"item": [
										{
											"name": "get-all Code-200",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"// pm.test(\"Status code is 200\", function () {\r",
															"//     pm.response.to.have.status(200);\r",
															"// });\r",
															"\r",
															"// // // Parse response\r",
															"// // let firmwareList = pm.response.json();\r",
															"\r",
															"// // // Randomly select one firmware entry\r",
															"// // let selected = firmwareList[Math.floor(Math.random() * firmwareList.length)];\r",
															"\r",
															"// // // Set variables for next request\r",
															"// // pm.collectionVariables.set(\"appName\", selected.appName);\r",
															"// // pm.collectionVariables.set(\"appVersion\", selected.appVersion);\r",
															"\r",
															"// // console.log(\"Selected firmware:\", selected.appName, selected.appVersion);\r",
															"\r",
															"// let firmwareList = pm.response.json();\r",
															"\r",
															"// // Filter entries that have valid appName and appVersion\r",
															"// let validEntries = firmwareList.filter(fw => fw.appName && fw.appVersion);\r",
															"\r",
															"// // Randomly select one\r",
															"// let selected = validEntries[Math.floor(Math.random() * validEntries.length)];\r",
															"\r",
															"// pm.collectionVariables.set(\"appName\", selected.appName);\r",
															"// pm.collectionVariables.set(\"appVersion\", selected.appVersion);\r",
															"\r",
															"// console.log(\"Selected firmware:\", selected.appName, selected.appVersion);\r",
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{Url_firmwareApi}}",
													"host": [
														"{{Url_firmwareApi}}"
													],
													"query": [
														{
															"key": "snst",
															"value": null,
															"disabled": true
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "get-single Code-404",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 404\", function () {\r",
															"    pm.response.to.have.status(404);\r",
															"});\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{Url_firmwareApi}}/{{appName-eu1p}}/{{Firmware-eu1p-stagged}}",
													"host": [
														"{{Url_firmwareApi}}"
													],
													"path": [
														"{{appName-eu1p}}",
														"{{Firmware-eu1p-stagged}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "firmware Code-403",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"// Try to get values from the response first\r",
															"try {\r",
															"    const response = pm.response.json();\r",
															"    if (response.appName) {\r",
															"        pm.environment.set(\"appName\", response.appName);\r",
															"    }\r",
															"    if (response.appVersion) {\r",
															"        pm.environment.set(\"appVersion\", response.appVersion);\r",
															"    }\r",
															"} catch (e) {\r",
															"    console.warn(\"No JSON response or missing fields.\");\r",
															"}\r",
															"\r",
															"// Fallback: get values from the request body if not already set\r",
															"if (!pm.environment.get(\"appName\") || !pm.environment.get(\"appVersion\")) {\r",
															"    try {\r",
															"        const requestBody = pm.request.body.raw ? JSON.parse(pm.request.body.raw) : {};\r",
															"        if (requestBody.appName) {\r",
															"            pm.environment.set(\"appName\", requestBody.appName);\r",
															"        }\r",
															"        if (requestBody.appVersion) {\r",
															"            pm.environment.set(\"appVersion\", requestBody.appVersion);\r",
															"        }\r",
															"    } catch (e) {\r",
															"        console.warn(\"Failed to parse request body.\");\r",
															"    }\r",
															"}\r",
															"\r",
															"pm.test(\"Status code is 403\", function () {\r",
															"    pm.response.to.have.status(403);\r",
															"});\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "formdata",
													"formdata": [
														{
															"key": "Criticality",
															"value": "{{criticality_Recommended}}",
															"type": "text"
														},
														{
															"key": "Description",
															"value": "{{Description}}",
															"type": "text"
														},
														{
															"key": "ReleaseNotesUrl",
															"value": "{{ReleaseNotesUrl}}",
															"type": "text"
														},
														{
															"key": "file",
															"type": "file",
															"src": "apc_hw21_su_3-3-0-8.nmc3"
														}
													]
												},
												"url": {
													"raw": "{{Url_firmwareApi}}",
													"host": [
														"{{Url_firmwareApi}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Updating Code-403",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"if (!pm.collectionVariables.get(\"appName\") || !pm.collectionVariables.get(\"appVersion\")) {\r",
															"    throw new Error(\"appName or appVersion is missing. Please run the GET request first.\");\r",
															"}\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 403\", function () {\r",
															"    pm.response.to.have.status(403);\r",
															"});"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"criticality\": \"{{criticality_Optional}}\",\r\n  \"description\": \"{{Description}}\",\r\n  \"releaseNotesUrl\": \"{{ReleaseNotesUrl}}\"\r\n}\r\n\r\n",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{Url_firmwareApi}}/{{appName-eu1p}}/{{Firmware-eu1p-stagged}}",
													"host": [
														"{{Url_firmwareApi}}"
													],
													"path": [
														"{{appName-eu1p}}",
														"{{Firmware-eu1p-stagged}}"
													],
													"query": [
														{
															"key": "appName",
															"value": "su",
															"disabled": true
														},
														{
															"key": "appVersion",
															"value": "2.5.5.1",
															"disabled": true
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "get-single Code-404",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 404\", function () {\r",
															"    pm.response.to.have.status(404);\r",
															"});\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{Url_firmwareApi}}/{{appName-eu1p}}/{{Firmware-eu1p-stagged}}",
													"host": [
														"{{Url_firmwareApi}}"
													],
													"path": [
														"{{appName-eu1p}}",
														"{{Firmware-eu1p-stagged}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Updating Code-403",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"if (!pm.collectionVariables.get(\"appName\") || !pm.collectionVariables.get(\"appVersion\")) {\r",
															"    throw new Error(\"appName or appVersion is missing. Please run the GET request first.\");\r",
															"}\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 403\", function () {\r",
															"    pm.response.to.have.status(403);\r",
															"});"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"criticality\": \"{{criticality_Optional}}\",\r\n  \"description\": \"{{Description}}\",\r\n  \"releaseNotesUrl\": \"{{ReleaseNotesUrl}}\"\r\n}\r\n\r\n",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{Url_firmwareApi}}/{{appName-eu1p}}/{{Firmware-eu1p-stagged}}",
													"host": [
														"{{Url_firmwareApi}}"
													],
													"path": [
														"{{appName-eu1p}}",
														"{{Firmware-eu1p-stagged}}"
													],
													"query": [
														{
															"key": "appName",
															"value": "su",
															"disabled": true
														},
														{
															"key": "appVersion",
															"value": "2.5.5.1",
															"disabled": true
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "get-single Code-404",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 404\", function () {\r",
															"    pm.response.to.have.status(404);\r",
															"});\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{Url_firmwareApi}}/{{appName-eu1p}}/{{Firmware-eu1p-stagged}}",
													"host": [
														"{{Url_firmwareApi}}"
													],
													"path": [
														"{{appName-eu1p}}",
														"{{Firmware-eu1p-stagged}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Release Code-403",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 403\", function () {\r",
															"    pm.response.to.have.status(403);\r",
															"});\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"release\": true,\r\n  \"releaseDate\": \"2025-06-26T06:48:50.080876Z\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{Url_firmwareApi}}/{{appName-eu1p}}/{{Firmware-eu1p-stagged}}/release",
													"host": [
														"{{Url_firmwareApi}}"
													],
													"path": [
														"{{appName-eu1p}}",
														"{{Firmware-eu1p-stagged}}",
														"release"
													]
												}
											},
											"response": []
										},
										{
											"name": "get-single Code-404",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 404\", function () {\r",
															"    pm.response.to.have.status(404);\r",
															"});\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{Url_firmwareApi}}/{{appName-eu1p}}/{{Firmware-eu1p-stagged}}",
													"host": [
														"{{Url_firmwareApi}}"
													],
													"path": [
														"{{appName-eu1p}}",
														"{{Firmware-eu1p-stagged}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "generate Code-404",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"console.log(`Resolved URL: ${pm.variables.get(\"Url_firmwareApi\")}/${pm.collectionVariables.get(\"appName\")}/${pm.collectionVariables.get(\"appVersion\")}/generate`);\r",
															"\r",
															"\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"console.log(\"Response Body:\", pm.response.text());\r",
															"// console.log(\"Response Headers:\", pm.response.headers.toJSON());\r",
															"\r",
															"\r",
															"if (pm.response.code === 404) {\r",
															"    pm.visualizer.set(`<p>No firmware found for the selected version.</p>`);\r",
															"} else {\r",
															"    // existing logic for Content-Disposition\r",
															"}\r",
															"\r",
															"pm.test(\"Status code is 404\", function () {\r",
															"    pm.response.to.have.status(404);\r",
															"});\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"deviceIds\": [\r\n    \"2829866CDE70\"\r\n  ]\r\n}\r\n",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{Url_firmwareApi}}/{{appName-eu1p}}/{{Firmware-eu1p-stagged}}/generate",
													"host": [
														"{{Url_firmwareApi}}"
													],
													"path": [
														"{{appName-eu1p}}",
														"{{Firmware-eu1p-stagged}}",
														"generate"
													]
												}
											},
											"response": []
										},
										{
											"name": "stagged Code-403",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 403\", function () {\r",
															"    pm.response.to.have.status(403);\r",
															"});\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"release\": false\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{Url_firmwareApi}}/{{appName-eu1p}}/{{Firmware-eu1p-stagged}}/release",
													"host": [
														"{{Url_firmwareApi}}"
													],
													"path": [
														"{{appName-eu1p}}",
														"{{Firmware-eu1p-stagged}}",
														"release"
													]
												}
											},
											"response": []
										},
										{
											"name": "get-single Code-404",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 404\", function () {\r",
															"    pm.response.to.have.status(404);\r",
															"});\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{Url_firmwareApi}}/{{appName-eu1p}}/{{Firmware-eu1p-stagged}}",
													"host": [
														"{{Url_firmwareApi}}"
													],
													"path": [
														"{{appName-eu1p}}",
														"{{Firmware-eu1p-stagged}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Deleting Code-403",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"if (!pm.collectionVariables.get(\"appName\") || !pm.collectionVariables.get(\"appVersion\")) {\r",
															"    throw new Error(\"appName or appVersion is missing. Please run the GET request first.\");\r",
															"}\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 403\", function () {\r",
															"    pm.response.to.have.status(403);\r",
															"});"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [],
												"url": {
													"raw": "{{Url_firmwareApi}}/{{appName-eu1p}}/{{Firmware-eu1p-stagged}}",
													"host": [
														"{{Url_firmwareApi}}"
													],
													"path": [
														"{{appName-eu1p}}",
														"{{Firmware-eu1p-stagged}}"
													],
													"query": [
														{
															"key": "appName",
															"value": "su",
															"disabled": true
														},
														{
															"key": "appVersion",
															"value": "2.5.5.1",
															"disabled": true
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "get-single Copy5 Code-404",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 404\", function () {\r",
															"    pm.response.to.have.status(404);\r",
															"});\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{Url_firmwareApi}}/{{appName-eu1p}}/{{Firmware-eu1p-stagged}}",
													"host": [
														"{{Url_firmwareApi}}"
													],
													"path": [
														"{{appName-eu1p}}",
														"{{Firmware-eu1p-stagged}}"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Firmware API_eu1p released",
									"item": [
										{
											"name": "get-all Code-200",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"// pm.test(\"Status code is 200\", function () {\r",
															"//     pm.response.to.have.status(200);\r",
															"// });\r",
															"\r",
															"// // // Parse response\r",
															"// // let firmwareList = pm.response.json();\r",
															"\r",
															"// // // Randomly select one firmware entry\r",
															"// // let selected = firmwareList[Math.floor(Math.random() * firmwareList.length)];\r",
															"\r",
															"// // // Set variables for next request\r",
															"// // pm.collectionVariables.set(\"appName\", selected.appName);\r",
															"// // pm.collectionVariables.set(\"appVersion\", selected.appVersion);\r",
															"\r",
															"// // console.log(\"Selected firmware:\", selected.appName, selected.appVersion);\r",
															"\r",
															"// let firmwareList = pm.response.json();\r",
															"\r",
															"// // Filter entries that have valid appName and appVersion\r",
															"// let validEntries = firmwareList.filter(fw => fw.appName && fw.appVersion);\r",
															"\r",
															"// // Randomly select one\r",
															"// let selected = validEntries[Math.floor(Math.random() * validEntries.length)];\r",
															"\r",
															"// pm.collectionVariables.set(\"appName\", selected.appName);\r",
															"// pm.collectionVariables.set(\"appVersion\", selected.appVersion);\r",
															"\r",
															"// console.log(\"Selected firmware:\", selected.appName, selected.appVersion);\r",
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{Url_firmwareApi}}",
													"host": [
														"{{Url_firmwareApi}}"
													],
													"query": [
														{
															"key": "snst",
															"value": null,
															"disabled": true
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "get-single Code-200",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{Url_firmwareApi}}/{{appName-eu1p}}/{{Firmware-eu1p-released}}",
													"host": [
														"{{Url_firmwareApi}}"
													],
													"path": [
														"{{appName-eu1p}}",
														"{{Firmware-eu1p-released}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "firmware Code-403",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"// Try to get values from the response first\r",
															"try {\r",
															"    const response = pm.response.json();\r",
															"    if (response.appName) {\r",
															"        pm.environment.set(\"appName\", response.appName);\r",
															"    }\r",
															"    if (response.appVersion) {\r",
															"        pm.environment.set(\"appVersion\", response.appVersion);\r",
															"    }\r",
															"} catch (e) {\r",
															"    console.warn(\"No JSON response or missing fields.\");\r",
															"}\r",
															"\r",
															"// Fallback: get values from the request body if not already set\r",
															"if (!pm.environment.get(\"appName\") || !pm.environment.get(\"appVersion\")) {\r",
															"    try {\r",
															"        const requestBody = pm.request.body.raw ? JSON.parse(pm.request.body.raw) : {};\r",
															"        if (requestBody.appName) {\r",
															"            pm.environment.set(\"appName\", requestBody.appName);\r",
															"        }\r",
															"        if (requestBody.appVersion) {\r",
															"            pm.environment.set(\"appVersion\", requestBody.appVersion);\r",
															"        }\r",
															"    } catch (e) {\r",
															"        console.warn(\"Failed to parse request body.\");\r",
															"    }\r",
															"}\r",
															"\r",
															"pm.test(\"Status code is 403\", function () {\r",
															"    pm.response.to.have.status(403);\r",
															"});\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "formdata",
													"formdata": [
														{
															"key": "Criticality",
															"value": "{{criticality_Recommended}}",
															"type": "text"
														},
														{
															"key": "Description",
															"value": "{{Description}}",
															"type": "text"
														},
														{
															"key": "ReleaseNotesUrl",
															"value": "{{ReleaseNotesUrl}}",
															"type": "text"
														},
														{
															"key": "file",
															"type": "file",
															"src": "apc_hw21_su_3-3-0-8.nmc3"
														}
													]
												},
												"url": {
													"raw": "{{Url_firmwareApi}}",
													"host": [
														"{{Url_firmwareApi}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Updating Code-403",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"if (!pm.collectionVariables.get(\"appName\") || !pm.collectionVariables.get(\"appVersion\")) {\r",
															"    throw new Error(\"appName or appVersion is missing. Please run the GET request first.\");\r",
															"}\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 403\", function () {\r",
															"    pm.response.to.have.status(403);\r",
															"});"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"criticality\": \"{{criticality_Optional}}\",\r\n  \"description\": \"{{Description}}\",\r\n  \"releaseNotesUrl\": \"{{ReleaseNotesUrl}}\"\r\n}\r\n\r\n",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{Url_firmwareApi}}/{{appName-eu1p}}/{{Firmware-eu1p-released}}",
													"host": [
														"{{Url_firmwareApi}}"
													],
													"path": [
														"{{appName-eu1p}}",
														"{{Firmware-eu1p-released}}"
													],
													"query": [
														{
															"key": "appName",
															"value": "su",
															"disabled": true
														},
														{
															"key": "appVersion",
															"value": "2.5.5.1",
															"disabled": true
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "get-single Code-200",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{Url_firmwareApi}}/{{appName-eu1p}}/{{Firmware-eu1p-released}}",
													"host": [
														"{{Url_firmwareApi}}"
													],
													"path": [
														"{{appName-eu1p}}",
														"{{Firmware-eu1p-released}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Updating Code-403",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"if (!pm.collectionVariables.get(\"appName\") || !pm.collectionVariables.get(\"appVersion\")) {\r",
															"    throw new Error(\"appName or appVersion is missing. Please run the GET request first.\");\r",
															"}\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 403\", function () {\r",
															"    pm.response.to.have.status(403);\r",
															"});"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"criticality\": \"{{criticality_Optional}}\",\r\n  \"description\": \"{{Description}}\",\r\n  \"releaseNotesUrl\": \"{{ReleaseNotesUrl}}\"\r\n}\r\n\r\n",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{Url_firmwareApi}}/{{appName-eu1p}}/{{Firmware-eu1p-released}}",
													"host": [
														"{{Url_firmwareApi}}"
													],
													"path": [
														"{{appName-eu1p}}",
														"{{Firmware-eu1p-released}}"
													],
													"query": [
														{
															"key": "appName",
															"value": "su",
															"disabled": true
														},
														{
															"key": "appVersion",
															"value": "2.5.5.1",
															"disabled": true
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "get-single Code-200",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{Url_firmwareApi}}/{{appName-eu1p}}/{{Firmware-eu1p-released}}",
													"host": [
														"{{Url_firmwareApi}}"
													],
													"path": [
														"{{appName-eu1p}}",
														"{{Firmware-eu1p-released}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Release Code-403",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 403\", function () {\r",
															"    pm.response.to.have.status(403);\r",
															"});\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"release\": true,\r\n  \"releaseDate\": \"2025-06-26T06:48:50.080876Z\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{Url_firmwareApi}}/{{appName-eu1p}}/{{Firmware-eu1p-released}}/release",
													"host": [
														"{{Url_firmwareApi}}"
													],
													"path": [
														"{{appName-eu1p}}",
														"{{Firmware-eu1p-released}}",
														"release"
													]
												}
											},
											"response": []
										},
										{
											"name": "get-single Code-200",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{Url_firmwareApi}}/{{appName-eu1p}}/{{Firmware-eu1p-released}}",
													"host": [
														"{{Url_firmwareApi}}"
													],
													"path": [
														"{{appName-eu1p}}",
														"{{Firmware-eu1p-released}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "generate Code-200",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"console.log(`Resolved URL: ${pm.variables.get(\"Url_firmwareApi\")}/${pm.collectionVariables.get(\"appName\")}/${pm.collectionVariables.get(\"appVersion\")}/generate`);\r",
															"\r",
															"\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"console.log(\"Response Body:\", pm.response.text());\r",
															"// console.log(\"Response Headers:\", pm.response.headers.toJSON());\r",
															"\r",
															"\r",
															"if (pm.response.code === 404) {\r",
															"    pm.visualizer.set(`<p>No firmware found for the selected version.</p>`);\r",
															"} else {\r",
															"    // existing logic for Content-Disposition\r",
															"}\r",
															"\r",
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"deviceIds\": [\r\n    \"2829866CDE70\"\r\n  ]\r\n}\r\n",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{Url_firmwareApi}}/{{appName-eu1p}}/{{Firmware-eu1p-released}}/generate",
													"host": [
														"{{Url_firmwareApi}}"
													],
													"path": [
														"{{appName-eu1p}}",
														"{{Firmware-eu1p-released}}",
														"generate"
													]
												}
											},
											"response": []
										},
										{
											"name": "stagged Code-403",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 403\", function () {\r",
															"    pm.response.to.have.status(403);\r",
															"});\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"release\": false\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{Url_firmwareApi}}/{{appName-eu1p}}/{{Firmware-eu1p-released}}/release",
													"host": [
														"{{Url_firmwareApi}}"
													],
													"path": [
														"{{appName-eu1p}}",
														"{{Firmware-eu1p-released}}",
														"release"
													]
												}
											},
											"response": []
										},
										{
											"name": "get-single Code-200",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{Url_firmwareApi}}/{{appName-eu1p}}/{{Firmware-eu1p-released}}",
													"host": [
														"{{Url_firmwareApi}}"
													],
													"path": [
														"{{appName-eu1p}}",
														"{{Firmware-eu1p-released}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Deleting Code-403",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"if (!pm.collectionVariables.get(\"appName\") || !pm.collectionVariables.get(\"appVersion\")) {\r",
															"    throw new Error(\"appName or appVersion is missing. Please run the GET request first.\");\r",
															"}\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 403\", function () {\r",
															"    pm.response.to.have.status(403);\r",
															"});"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [],
												"url": {
													"raw": "{{Url_firmwareApi}}/{{appName-eu1p}}/{{Firmware-eu1p-released}}",
													"host": [
														"{{Url_firmwareApi}}"
													],
													"path": [
														"{{appName-eu1p}}",
														"{{Firmware-eu1p-released}}"
													],
													"query": [
														{
															"key": "appName",
															"value": "su",
															"disabled": true
														},
														{
															"key": "appVersion",
															"value": "2.5.5.1",
															"disabled": true
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "get-single Code-200",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{Url_firmwareApi}}/{{appName-eu1p}}/{{Firmware-eu1p-released}}",
													"host": [
														"{{Url_firmwareApi}}"
													],
													"path": [
														"{{appName-eu1p}}",
														"{{Firmware-eu1p-released}}"
													]
												}
											},
											"response": []
										}
									]
								}
							]
						},
						{
							"name": "Software API",
							"item": [
								{
									"name": "win",
									"item": [
										{
											"name": "Software API_win- stagged",
											"item": [
												{
													"name": "New-Software-win Code-201",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 201\", function () {\r",
																	"    pm.response.to.have.status(201);\r",
																	"});\r",
																	""
																],
																"type": "text/javascript",
																"packages": {}
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [],
														"body": {
															"mode": "formdata",
															"formdata": [
																{
																	"key": "Name",
																	"value": "snst",
																	"type": "text"
																},
																{
																	"key": "Version",
																	"value": "{{Software_Version_win}}",
																	"type": "text"
																},
																{
																	"key": "Platform",
																	"value": "{{Software_Platform_win}}",
																	"type": "text"
																},
																{
																	"key": "Criticality",
																	"value": "{{criticality_Recommended}}",
																	"type": "text"
																},
																{
																	"key": "Description",
																	"value": "{{Description}}",
																	"type": "text"
																},
																{
																	"key": "ReleaseNotesUrl",
																	"value": "{{ReleaseNotesUrl}}",
																	"type": "text"
																},
																{
																	"key": "file",
																	"type": "file",
																	"src": "SecureNMCSystemTool_4.0.0.1_win-x64 Installer (4) (1).exe"
																}
															]
														},
														"url": {
															"raw": "{{Url_software}}software",
															"host": [
																"{{Url_software}}software"
															]
														}
													},
													"response": []
												},
												{
													"name": "all-software-win Code-200",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});\r",
																	""
																],
																"type": "text/javascript",
																"packages": {}
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{Url_software}}software?name={{Software_Name}}",
															"host": [
																"{{Url_software}}software"
															],
															"query": [
																{
																	"key": "name",
																	"value": "{{Software_Name}}"
																}
															]
														}
													},
													"response": []
												},
												{
													"name": "single-software-win Code-200",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});\r",
																	"\r",
																	""
																],
																"type": "text/javascript",
																"packages": {}
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{Url_software}}software?name={{Software_Name}}&version={{Software_Version_win}}&platform={{Software_Platform_win}}",
															"host": [
																"{{Url_software}}software"
															],
															"query": [
																{
																	"key": "name",
																	"value": "{{Software_Name}}"
																},
																{
																	"key": "version",
																	"value": "{{Software_Version_win}}"
																},
																{
																	"key": "platform",
																	"value": "{{Software_Platform_win}}"
																}
															]
														}
													},
													"response": []
												},
												{
													"name": "criticality-update-win Code-204",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 204\", function () {\r",
																	"    pm.response.to.have.status(204);\r",
																	"});\r",
																	""
																],
																"type": "text/javascript",
																"packages": {}
															}
														}
													],
													"request": {
														"method": "PUT",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\r\n  \"criticality\": \"{{criticality_Optional}}\",\r\n  \"description\": \"{{Description}}\",\r\n  \"releaseNotesUrl\": \"{{ReleaseNotesUrl}}\"\r\n}\r\n",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{Url_software}}software/{{Software_Name}}/{{Software_Version_win}}/{{Software_Platform_win}}",
															"host": [
																"{{Url_software}}software"
															],
															"path": [
																"{{Software_Name}}",
																"{{Software_Version_win}}",
																"{{Software_Platform_win}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "download-win Code-200",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});\r",
																	"// pm.test(\"Status is 200 and response time > 10s\", function () {\r",
																	"//     pm.expect(pm.response.code).to.eql(200);\r",
																	"//     pm.expect(pm.response.responseTime).to.be.above(10000); // 10,000 ms = 10 seconds\r",
																	"// });\r",
																	""
																],
																"type": "text/javascript",
																"packages": {}
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{Url_software}}software/{{Software_Name}}/{{Software_Version_win}}/{{Software_Platform_win}}/download",
															"host": [
																"{{Url_software}}software"
															],
															"path": [
																"{{Software_Name}}",
																"{{Software_Version_win}}",
																"{{Software_Platform_win}}",
																"download"
															]
														}
													},
													"response": []
												},
												{
													"name": "win-delete Code-204",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 204\", function () {\r",
																	"    pm.response.to.have.status(204);\r",
																	"});\r",
																	""
																],
																"type": "text/javascript",
																"packages": {}
															}
														}
													],
													"request": {
														"method": "DELETE",
														"header": [],
														"url": {
															"raw": "https://dit-sds-software-webapp.azurewebsites.net/api/software/{{Software_Name}}/{{Software_Version_win}}/{{Software_Platform_win}}",
															"protocol": "https",
															"host": [
																"dit-sds-software-webapp",
																"azurewebsites",
																"net"
															],
															"path": [
																"api",
																"software",
																"{{Software_Name}}",
																"{{Software_Version_win}}",
																"{{Software_Platform_win}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "check deleted-win Code-200",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});\r",
																	"pm.test(\"Response is exactly an empty array\", function () {\r",
																	"    pm.expect(pm.response.text()).to.eql(\"[]\");\r",
																	"});\r",
																	""
																],
																"type": "text/javascript",
																"packages": {}
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{Url_software}}software?name={{Software_Name}}&version={{Software_Version_win}}&platform={{Software_Platform_win}}",
															"host": [
																"{{Url_software}}software"
															],
															"query": [
																{
																	"key": "name",
																	"value": "{{Software_Name}}"
																},
																{
																	"key": "version",
																	"value": "{{Software_Version_win}}"
																},
																{
																	"key": "platform",
																	"value": "{{Software_Platform_win}}"
																}
															]
														}
													},
													"response": []
												},
												{
													"name": "New-Software-win Code-201 Copy",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 201\", function () {\r",
																	"    pm.response.to.have.status(201);\r",
																	"});\r",
																	""
																],
																"type": "text/javascript",
																"packages": {}
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [],
														"body": {
															"mode": "formdata",
															"formdata": [
																{
																	"key": "Name",
																	"value": "snst",
																	"type": "text"
																},
																{
																	"key": "Version",
																	"value": "{{Software_Version_win}}",
																	"type": "text"
																},
																{
																	"key": "Platform",
																	"value": "{{Software_Platform_win}}",
																	"type": "text"
																},
																{
																	"key": "Criticality",
																	"value": "{{criticality_Recommended}}",
																	"type": "text"
																},
																{
																	"key": "Description",
																	"value": "{{Description}}",
																	"type": "text"
																},
																{
																	"key": "ReleaseNotesUrl",
																	"value": "{{ReleaseNotesUrl}}",
																	"type": "text"
																},
																{
																	"key": "file",
																	"type": "file",
																	"src": "SecureNMCSystemTool_4.0.0.1_win-x64 Installer (4) (1).exe"
																}
															]
														},
														"url": {
															"raw": "{{Url_software}}software",
															"host": [
																"{{Url_software}}software"
															]
														}
													},
													"response": []
												},
												{
													"name": "Scheduled-win-status Code-200",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});\r",
																	"\r",
																	""
																],
																"type": "text/javascript",
																"packages": {}
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{Url_software}}software?name={{Software_Name}}&version={{Software_Version_win}}&platform={{Software_Platform_win}}",
															"host": [
																"{{Url_software}}software"
															],
															"query": [
																{
																	"key": "name",
																	"value": "{{Software_Name}}"
																},
																{
																	"key": "version",
																	"value": "{{Software_Version_win}}"
																},
																{
																	"key": "platform",
																	"value": "{{Software_Platform_win}}"
																}
															]
														}
													},
													"response": []
												},
												{
													"name": "stagged-win Code-204",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 403\", function () {\r",
																	"    pm.response.to.have.status(403);\r",
																	"});\r",
																	""
																],
																"type": "text/javascript",
																"packages": {}
															}
														}
													],
													"request": {
														"method": "PUT",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\r\n  \"release\": false\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{Url_software}}software/{{Software_Name}}/{{Software_Version_win}}/{{Software_Platform_win}}/release",
															"host": [
																"{{Url_software}}software"
															],
															"path": [
																"{{Software_Name}}",
																"{{Software_Version_win}}",
																"{{Software_Platform_win}}",
																"release"
															]
														}
													},
													"response": []
												},
												{
													"name": "Stagged-win-status Code-200",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});\r",
																	"\r",
																	"\r",
																	""
																],
																"type": "text/javascript",
																"packages": {}
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{Url_software}}software?name={{Software_Name}}&version={{Software_Version_win}}&platform={{Software_Platform_win}}",
															"host": [
																"{{Url_software}}software"
															],
															"query": [
																{
																	"key": "name",
																	"value": "{{Software_Name}}"
																},
																{
																	"key": "version",
																	"value": "{{Software_Version_win}}"
																},
																{
																	"key": "platform",
																	"value": "{{Software_Platform_win}}"
																}
															]
														}
													},
													"response": []
												},
												{
													"name": "remove-from-db-win Code-204",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 204\", function () {\r",
																	"    pm.response.to.have.status(204);\r",
																	"});\r",
																	""
																],
																"type": "text/javascript",
																"packages": {}
															}
														}
													],
													"request": {
														"method": "DELETE",
														"header": [],
														"url": {
															"raw": "https://dit-sds-software-webapp.azurewebsites.net/api/software/{{Software_Name}}/{{Software_Version_win}}/{{Software_Platform_win}}",
															"protocol": "https",
															"host": [
																"dit-sds-software-webapp",
																"azurewebsites",
																"net"
															],
															"path": [
																"api",
																"software",
																"{{Software_Name}}",
																"{{Software_Version_win}}",
																"{{Software_Platform_win}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "check deleted-win Code-404",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Response is exactly an empty array\", function () {\r",
																	"    pm.expect(pm.response.text()).to.eql(\"[]\");\r",
																	"});\r",
																	""
																],
																"type": "text/javascript",
																"packages": {}
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{Url_software}}software?name={{Software_Name}}&version={{Software_Version_win}}&platform={{Software_Platform_win}}",
															"host": [
																"{{Url_software}}software"
															],
															"query": [
																{
																	"key": "name",
																	"value": "{{Software_Name}}"
																},
																{
																	"key": "version",
																	"value": "{{Software_Version_win}}"
																},
																{
																	"key": "platform",
																	"value": "{{Software_Platform_win}}"
																}
															]
														}
													},
													"response": []
												}
											]
										},
										{
											"name": "Software API_win-schduled",
											"item": [
												{
													"name": "New-Software-win Code-201",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 201\", function () {\r",
																	"    pm.response.to.have.status(201);\r",
																	"});\r",
																	""
																],
																"type": "text/javascript",
																"packages": {}
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [],
														"body": {
															"mode": "formdata",
															"formdata": [
																{
																	"key": "Name",
																	"value": "snst",
																	"type": "text"
																},
																{
																	"key": "Version",
																	"value": "{{Software_Version_win}}",
																	"type": "text"
																},
																{
																	"key": "Platform",
																	"value": "{{Software_Platform_win}}",
																	"type": "text"
																},
																{
																	"key": "Criticality",
																	"value": "{{criticality_Recommended}}",
																	"type": "text"
																},
																{
																	"key": "Description",
																	"value": "{{Description}}",
																	"type": "text"
																},
																{
																	"key": "ReleaseNotesUrl",
																	"value": "{{ReleaseNotesUrl}}",
																	"type": "text"
																},
																{
																	"key": "file",
																	"type": "file",
																	"src": "SecureNMCSystemTool_4.0.0.1_win-x64 Installer (4) (1).exe"
																}
															]
														},
														"url": {
															"raw": "{{Url_software}}software",
															"host": [
																"{{Url_software}}software"
															]
														}
													},
													"response": []
												},
												{
													"name": "all-software-win Code-200",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});\r",
																	""
																],
																"type": "text/javascript",
																"packages": {}
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{Url_software}}software?name={{Software_Name}}",
															"host": [
																"{{Url_software}}software"
															],
															"query": [
																{
																	"key": "name",
																	"value": "{{Software_Name}}"
																}
															]
														}
													},
													"response": []
												},
												{
													"name": "single-software-win Code-200",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});\r",
																	"\r",
																	""
																],
																"type": "text/javascript",
																"packages": {}
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{Url_software}}software?name={{Software_Name}}&version={{Software_Version_win}}&platform={{Software_Platform_win}}",
															"host": [
																"{{Url_software}}software"
															],
															"query": [
																{
																	"key": "name",
																	"value": "{{Software_Name}}"
																},
																{
																	"key": "version",
																	"value": "{{Software_Version_win}}"
																},
																{
																	"key": "platform",
																	"value": "{{Software_Platform_win}}"
																}
															]
														}
													},
													"response": []
												},
												{
													"name": "criticality-update-win Code-204",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 204\", function () {\r",
																	"    pm.response.to.have.status(204);\r",
																	"});\r",
																	""
																],
																"type": "text/javascript",
																"packages": {}
															}
														}
													],
													"request": {
														"method": "PUT",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\r\n  \"criticality\": \"{{criticality_Optional}}\",\r\n  \"description\": \"{{Description}}\",\r\n  \"releaseNotesUrl\": \"{{ReleaseNotesUrl}}\"\r\n}\r\n",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{Url_software}}software/{{Software_Name}}/{{Software_Version_win}}/{{Software_Platform_win}}",
															"host": [
																"{{Url_software}}software"
															],
															"path": [
																"{{Software_Name}}",
																"{{Software_Version_win}}",
																"{{Software_Platform_win}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "download-win Code-200",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});\r",
																	"// pm.test(\"Status is 200 and response time > 10s\", function () {\r",
																	"//     pm.expect(pm.response.code).to.eql(200);\r",
																	"//     pm.expect(pm.response.responseTime).to.be.above(10000); // 10,000 ms = 10 seconds\r",
																	"// });\r",
																	""
																],
																"type": "text/javascript",
																"packages": {}
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{Url_software}}software/{{Software_Name}}/{{Software_Version_win}}/{{Software_Platform_win}}/download",
															"host": [
																"{{Url_software}}software"
															],
															"path": [
																"{{Software_Name}}",
																"{{Software_Version_win}}",
																"{{Software_Platform_win}}",
																"download"
															]
														}
													},
													"response": []
												},
												{
													"name": "win-delete Code-204",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 204\", function () {\r",
																	"    pm.response.to.have.status(204);\r",
																	"});\r",
																	""
																],
																"type": "text/javascript",
																"packages": {}
															}
														}
													],
													"request": {
														"method": "DELETE",
														"header": [],
														"url": {
															"raw": "https://dit-sds-software-webapp.azurewebsites.net/api/software/{{Software_Name}}/{{Software_Version_win}}/{{Software_Platform_win}}",
															"protocol": "https",
															"host": [
																"dit-sds-software-webapp",
																"azurewebsites",
																"net"
															],
															"path": [
																"api",
																"software",
																"{{Software_Name}}",
																"{{Software_Version_win}}",
																"{{Software_Platform_win}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "New-Software-win Code-201 Copy",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 201\", function () {\r",
																	"    pm.response.to.have.status(201);\r",
																	"});\r",
																	""
																],
																"type": "text/javascript",
																"packages": {}
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [],
														"body": {
															"mode": "formdata",
															"formdata": [
																{
																	"key": "Name",
																	"value": "snst",
																	"type": "text"
																},
																{
																	"key": "Version",
																	"value": "{{Software_Version_win}}",
																	"type": "text"
																},
																{
																	"key": "Platform",
																	"value": "{{Software_Platform_win}}",
																	"type": "text"
																},
																{
																	"key": "Criticality",
																	"value": "{{criticality_Recommended}}",
																	"type": "text"
																},
																{
																	"key": "Description",
																	"value": "{{Description}}",
																	"type": "text"
																},
																{
																	"key": "ReleaseNotesUrl",
																	"value": "{{ReleaseNotesUrl}}",
																	"type": "text"
																},
																{
																	"key": "file",
																	"type": "file",
																	"src": "SecureNMCSystemTool_4.0.0.1_win-x64 Installer (4) (1).exe"
																}
															]
														},
														"url": {
															"raw": "{{Url_software}}software",
															"host": [
																"{{Url_software}}software"
															]
														}
													},
													"response": []
												},
												{
													"name": "check deleted-win Code-200",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});\r",
																	""
																],
																"type": "text/javascript",
																"packages": {}
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{Url_software}}software?name={{Software_Name}}&version={{Software_Version_win}}&platform={{Software_Platform_win}}",
															"host": [
																"{{Url_software}}software"
															],
															"query": [
																{
																	"key": "name",
																	"value": "{{Software_Name}}"
																},
																{
																	"key": "version",
																	"value": "{{Software_Version_win}}"
																},
																{
																	"key": "platform",
																	"value": "{{Software_Platform_win}}"
																}
															]
														}
													},
													"response": []
												},
												{
													"name": "Scheduled-win Code-204",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 403\", function () {\r",
																	"    pm.response.to.have.status(403);\r",
																	"});\r",
																	""
																],
																"type": "text/javascript",
																"packages": {}
															}
														}
													],
													"request": {
														"method": "PUT",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\r\n  \"release\": true,\r\n  \"releaseDate\": \"{{ReleaseDate}}\"\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{Url_software}}software/{{Software_Name}}/{{Software_Version_win}}/{{Software_Platform_win}}/release",
															"host": [
																"{{Url_software}}software"
															],
															"path": [
																"{{Software_Name}}",
																"{{Software_Version_win}}",
																"{{Software_Platform_win}}",
																"release"
															]
														}
													},
													"response": []
												},
												{
													"name": "Scheduled-win-status Code-200",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});\r",
																	"\r",
																	""
																],
																"type": "text/javascript",
																"packages": {}
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{Url_software}}software?name={{Software_Name}}&version={{Software_Version_win}}&platform={{Software_Platform_win}}",
															"host": [
																"{{Url_software}}software"
															],
															"query": [
																{
																	"key": "name",
																	"value": "{{Software_Name}}"
																},
																{
																	"key": "version",
																	"value": "{{Software_Version_win}}"
																},
																{
																	"key": "platform",
																	"value": "{{Software_Platform_win}}"
																}
															]
														}
													},
													"response": []
												},
												{
													"name": "remove-from-db-win Code-204",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 204\", function () {\r",
																	"    pm.response.to.have.status(204);\r",
																	"});\r",
																	""
																],
																"type": "text/javascript",
																"packages": {}
															}
														}
													],
													"request": {
														"method": "DELETE",
														"header": [],
														"url": {
															"raw": "https://dit-sds-software-webapp.azurewebsites.net/api/software/{{Software_Name}}/{{Software_Version_win}}/{{Software_Platform_win}}",
															"protocol": "https",
															"host": [
																"dit-sds-software-webapp",
																"azurewebsites",
																"net"
															],
															"path": [
																"api",
																"software",
																"{{Software_Name}}",
																"{{Software_Version_win}}",
																"{{Software_Platform_win}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "check deleted-win Code-404",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Response is exactly an empty array\", function () {\r",
																	"    pm.expect(pm.response.text()).to.eql(\"[]\");\r",
																	"});\r",
																	""
																],
																"type": "text/javascript",
																"packages": {}
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{Url_software}}software?name={{Software_Name}}&version={{Software_Version_win}}&platform={{Software_Platform_win}}",
															"host": [
																"{{Url_software}}software"
															],
															"query": [
																{
																	"key": "name",
																	"value": "{{Software_Name}}"
																},
																{
																	"key": "version",
																	"value": "{{Software_Version_win}}"
																},
																{
																	"key": "platform",
																	"value": "{{Software_Platform_win}}"
																}
															]
														}
													},
													"response": []
												}
											]
										},
										{
											"name": "Software API_win-released",
											"item": [
												{
													"name": "New-Software-win Code-201",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 201\", function () {\r",
																	"    pm.response.to.have.status(201);\r",
																	"});\r",
																	""
																],
																"type": "text/javascript",
																"packages": {}
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [],
														"body": {
															"mode": "formdata",
															"formdata": [
																{
																	"key": "Name",
																	"value": "snst",
																	"type": "text"
																},
																{
																	"key": "Version",
																	"value": "{{Software_Version_win}}",
																	"type": "text"
																},
																{
																	"key": "Platform",
																	"value": "{{Software_Platform_win}}",
																	"type": "text"
																},
																{
																	"key": "Criticality",
																	"value": "{{criticality_Recommended}}",
																	"type": "text"
																},
																{
																	"key": "Description",
																	"value": "{{Description}}",
																	"type": "text"
																},
																{
																	"key": "ReleaseNotesUrl",
																	"value": "{{ReleaseNotesUrl}}",
																	"type": "text"
																},
																{
																	"key": "file",
																	"type": "file",
																	"src": "SecureNMCSystemTool_4.0.0.1_win-x64 Installer (4) (1).exe"
																}
															]
														},
														"url": {
															"raw": "{{Url_software}}software",
															"host": [
																"{{Url_software}}software"
															]
														}
													},
													"response": []
												},
												{
													"name": "all-software-win Code-200",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});\r",
																	""
																],
																"type": "text/javascript",
																"packages": {}
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{Url_software}}software?name={{Software_Name}}",
															"host": [
																"{{Url_software}}software"
															],
															"query": [
																{
																	"key": "name",
																	"value": "{{Software_Name}}"
																}
															]
														}
													},
													"response": []
												},
												{
													"name": "single-software-win Code-200",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});\r",
																	"\r",
																	""
																],
																"type": "text/javascript",
																"packages": {}
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{Url_software}}software?name={{Software_Name}}&version={{Software_Version_win}}&platform={{Software_Platform_win}}",
															"host": [
																"{{Url_software}}software"
															],
															"query": [
																{
																	"key": "name",
																	"value": "{{Software_Name}}"
																},
																{
																	"key": "version",
																	"value": "{{Software_Version_win}}"
																},
																{
																	"key": "platform",
																	"value": "{{Software_Platform_win}}"
																}
															]
														}
													},
													"response": []
												},
												{
													"name": "criticality-update-win Code-204",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 204\", function () {\r",
																	"    pm.response.to.have.status(204);\r",
																	"});\r",
																	""
																],
																"type": "text/javascript",
																"packages": {}
															}
														}
													],
													"request": {
														"method": "PUT",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\r\n  \"criticality\": \"{{criticality_Optional}}\",\r\n  \"description\": \"{{Description}}\",\r\n  \"releaseNotesUrl\": \"{{ReleaseNotesUrl}}\"\r\n}\r\n",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{Url_software}}software/{{Software_Name}}/{{Software_Version_win}}/{{Software_Platform_win}}",
															"host": [
																"{{Url_software}}software"
															],
															"path": [
																"{{Software_Name}}",
																"{{Software_Version_win}}",
																"{{Software_Platform_win}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "download-win Code-200",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});\r",
																	"// pm.test(\"Status is 200 and response time > 10s\", function () {\r",
																	"//     pm.expect(pm.response.code).to.eql(200);\r",
																	"//     pm.expect(pm.response.responseTime).to.be.above(10000); // 10,000 ms = 10 seconds\r",
																	"// });\r",
																	""
																],
																"type": "text/javascript",
																"packages": {}
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{Url_software}}software/{{Software_Name}}/{{Software-win-released}}/{{Software_Platform_win}}/download",
															"host": [
																"{{Url_software}}software"
															],
															"path": [
																"{{Software_Name}}",
																"{{Software-win-released}}",
																"{{Software_Platform_win}}",
																"download"
															]
														}
													},
													"response": []
												},
												{
													"name": "win-delete Code-204",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 204\", function () {\r",
																	"    pm.response.to.have.status(204);\r",
																	"});\r",
																	""
																],
																"type": "text/javascript",
																"packages": {}
															}
														}
													],
													"request": {
														"method": "DELETE",
														"header": [],
														"url": {
															"raw": "https://dit-sds-software-webapp.azurewebsites.net/api/software/{{Software_Name}}/{{Software_Version_win}}/{{Software_Platform_win}}",
															"protocol": "https",
															"host": [
																"dit-sds-software-webapp",
																"azurewebsites",
																"net"
															],
															"path": [
																"api",
																"software",
																"{{Software_Name}}",
																"{{Software_Version_win}}",
																"{{Software_Platform_win}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "New-Software-win Code-201 Copy",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 201\", function () {\r",
																	"    pm.response.to.have.status(201);\r",
																	"});\r",
																	""
																],
																"type": "text/javascript",
																"packages": {}
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [],
														"body": {
															"mode": "formdata",
															"formdata": [
																{
																	"key": "Name",
																	"value": "snst",
																	"type": "text"
																},
																{
																	"key": "Version",
																	"value": "{{Software_Version_win}}",
																	"type": "text"
																},
																{
																	"key": "Platform",
																	"value": "{{Software_Platform_win}}",
																	"type": "text"
																},
																{
																	"key": "Criticality",
																	"value": "{{criticality_Recommended}}",
																	"type": "text"
																},
																{
																	"key": "Description",
																	"value": "{{Description}}",
																	"type": "text"
																},
																{
																	"key": "ReleaseNotesUrl",
																	"value": "{{ReleaseNotesUrl}}",
																	"type": "text"
																},
																{
																	"key": "file",
																	"type": "file",
																	"src": "SecureNMCSystemTool_4.0.0.1_win-x64 Installer (4) (1).exe"
																}
															]
														},
														"url": {
															"raw": "{{Url_software}}software",
															"host": [
																"{{Url_software}}software"
															]
														}
													},
													"response": []
												},
												{
													"name": "check deleted-win Code-200",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});\r",
																	""
																],
																"type": "text/javascript",
																"packages": {}
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{Url_software}}software?name={{Software_Name}}&version={{Software_Version_win}}&platform={{Software_Platform_win}}",
															"host": [
																"{{Url_software}}software"
															],
															"query": [
																{
																	"key": "name",
																	"value": "{{Software_Name}}"
																},
																{
																	"key": "version",
																	"value": "{{Software_Version_win}}"
																},
																{
																	"key": "platform",
																	"value": "{{Software_Platform_win}}"
																}
															]
														}
													},
													"response": []
												},
												{
													"name": "Scheduled-win Code-204",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 403\", function () {\r",
																	"    pm.response.to.have.status(403);\r",
																	"});\r",
																	""
																],
																"type": "text/javascript",
																"packages": {}
															}
														}
													],
													"request": {
														"method": "PUT",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\r\n  \"release\": true,\r\n  \"releaseDate\": \"{{ReleaseDate}}\"\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{Url_software}}software/{{Software_Name}}/{{Software_Version_win}}/{{Software_Platform_win}}/release",
															"host": [
																"{{Url_software}}software"
															],
															"path": [
																"{{Software_Name}}",
																"{{Software_Version_win}}",
																"{{Software_Platform_win}}",
																"release"
															]
														}
													},
													"response": []
												},
												{
													"name": "Scheduled-win-status Code-200",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});\r",
																	"\r",
																	""
																],
																"type": "text/javascript",
																"packages": {}
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{Url_software}}software?name={{Software_Name}}&version={{Software_Version_win}}&platform={{Software_Platform_win}}",
															"host": [
																"{{Url_software}}software"
															],
															"query": [
																{
																	"key": "name",
																	"value": "{{Software_Name}}"
																},
																{
																	"key": "version",
																	"value": "{{Software_Version_win}}"
																},
																{
																	"key": "platform",
																	"value": "{{Software_Platform_win}}"
																}
															]
														}
													},
													"response": []
												},
												{
													"name": "stagged-win Code-204",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 403\", function () {\r",
																	"    pm.response.to.have.status(403);\r",
																	"});\r",
																	""
																],
																"type": "text/javascript",
																"packages": {}
															}
														}
													],
													"request": {
														"method": "PUT",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\r\n  \"release\": false\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{Url_software}}software/{{Software_Name}}/{{Software_Version_win}}/{{Software_Platform_win}}/release",
															"host": [
																"{{Url_software}}software"
															],
															"path": [
																"{{Software_Name}}",
																"{{Software_Version_win}}",
																"{{Software_Platform_win}}",
																"release"
															]
														}
													},
													"response": []
												},
												{
													"name": "Stagged-win-status Code-200",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});\r",
																	"\r",
																	"\r",
																	""
																],
																"type": "text/javascript",
																"packages": {}
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{Url_software}}software?name={{Software_Name}}&version={{Software_Version_win}}&platform={{Software_Platform_win}}",
															"host": [
																"{{Url_software}}software"
															],
															"query": [
																{
																	"key": "name",
																	"value": "{{Software_Name}}"
																},
																{
																	"key": "version",
																	"value": "{{Software_Version_win}}"
																},
																{
																	"key": "platform",
																	"value": "{{Software_Platform_win}}"
																}
															]
														}
													},
													"response": []
												},
												{
													"name": "remove-from-db-win Code-204",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 204\", function () {\r",
																	"    pm.response.to.have.status(204);\r",
																	"});\r",
																	""
																],
																"type": "text/javascript",
																"packages": {}
															}
														}
													],
													"request": {
														"method": "DELETE",
														"header": [],
														"url": {
															"raw": "https://dit-sds-software-webapp.azurewebsites.net/api/software/{{Software_Name}}/{{Software_Version_win}}/{{Software_Platform_win}}",
															"protocol": "https",
															"host": [
																"dit-sds-software-webapp",
																"azurewebsites",
																"net"
															],
															"path": [
																"api",
																"software",
																"{{Software_Name}}",
																"{{Software_Version_win}}",
																"{{Software_Platform_win}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "check deleted-win Code-404",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Response is exactly an empty array\", function () {\r",
																	"    pm.expect(pm.response.text()).to.eql(\"[]\");\r",
																	"});\r",
																	""
																],
																"type": "text/javascript",
																"packages": {}
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{Url_software}}software?name={{Software_Name}}&version={{Software_Version_win}}&platform={{Software_Platform_win}}",
															"host": [
																"{{Url_software}}software"
															],
															"query": [
																{
																	"key": "name",
																	"value": "{{Software_Name}}"
																},
																{
																	"key": "version",
																	"value": "{{Software_Version_win}}"
																},
																{
																	"key": "platform",
																	"value": "{{Software_Platform_win}}"
																}
															]
														}
													},
													"response": []
												}
											]
										}
									]
								},
								{
									"name": "osx",
									"item": [
										{
											"name": "Software API _osx",
											"item": [
												{
													"name": "New-Software-osx Code-201",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 201\", function () {\r",
																	"    pm.response.to.have.status(201);\r",
																	"});\r",
																	""
																],
																"type": "text/javascript",
																"packages": {}
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [],
														"body": {
															"mode": "formdata",
															"formdata": [
																{
																	"key": "Name",
																	"value": "snst",
																	"type": "text"
																},
																{
																	"key": "Version",
																	"value": "{{Software_Version_osx}}",
																	"type": "text"
																},
																{
																	"key": "Platform",
																	"value": "{{Software_Platform_osx}}",
																	"type": "text"
																},
																{
																	"key": "Criticality",
																	"value": "{{criticality_Recommended}}",
																	"type": "text"
																},
																{
																	"key": "Description",
																	"value": "{{Description}}",
																	"type": "text"
																},
																{
																	"key": "releaseNotesUrl",
																	"value": "{{ReleaseNotesUrl}}",
																	"type": "text"
																},
																{
																	"key": "file",
																	"type": "file",
																	"src": "SecureNMCSystemTool_4.0.0.1_osx-arm64 (3).tar.gz"
																},
																{
																	"key": "",
																	"value": "",
																	"type": "text"
																}
															]
														},
														"url": {
															"raw": "{{Url_software}}software",
															"host": [
																"{{Url_software}}software"
															]
														}
													},
													"response": []
												},
												{
													"name": "all software osx Code-200",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});\r",
																	""
																],
																"type": "text/javascript",
																"packages": {}
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{Url_software}}software?name={{Software_Name}}",
															"host": [
																"{{Url_software}}software"
															],
															"query": [
																{
																	"key": "name",
																	"value": "{{Software_Name}}"
																}
															]
														}
													},
													"response": []
												},
												{
													"name": "single software osx Code-200",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});\r",
																	"\r",
																	""
																],
																"type": "text/javascript",
																"packages": {}
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{Url_software}}software?name={{Software_Name}}&version={{Software_Version_osx}}&platform={{Software_Platform_osx}}",
															"host": [
																"{{Url_software}}software"
															],
															"query": [
																{
																	"key": "name",
																	"value": "{{Software_Name}}"
																},
																{
																	"key": "version",
																	"value": "{{Software_Version_osx}}"
																},
																{
																	"key": "platform",
																	"value": "{{Software_Platform_osx}}"
																}
															]
														}
													},
													"response": []
												},
												{
													"name": "criticality update-osx Code-204",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 204\", function () {\r",
																	"    pm.response.to.have.status(204);\r",
																	"});\r",
																	""
																],
																"type": "text/javascript",
																"packages": {}
															}
														}
													],
													"request": {
														"method": "PUT",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\r\n  \"criticality\": \"{{criticality_Optional}}\",\r\n  \"description\": \"{{Description}}\",\r\n  \"releaseNotesUrl\": \"{{ReleaseNotesUrl}}\"\r\n}\r\n",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{Url_software}}software/{{Software_Name}}/{{Software_Version_osx}}/{{Software_Platform_osx}}",
															"host": [
																"{{Url_software}}software"
															],
															"path": [
																"{{Software_Name}}",
																"{{Software_Version_osx}}",
																"{{Software_Platform_osx}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "download-osx Code-200",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});\r",
																	"\r",
																	"// pm.test(\"Status is 200 and response time > 10s\", function () {\r",
																	"//     pm.expect(pm.response.code).to.eql(200);\r",
																	"//     pm.expect(pm.response.responseTime).to.be.above(10000); // 10,000 ms = 10 seconds\r",
																	"// });\r",
																	""
																],
																"type": "text/javascript",
																"packages": {}
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{Url_software}}software/{{Software_Name}}/{{Software_Version_osx}}/{{Software_Platform_osx}}/download",
															"host": [
																"{{Url_software}}software"
															],
															"path": [
																"{{Software_Name}}",
																"{{Software_Version_osx}}",
																"{{Software_Platform_osx}}",
																"download"
															]
														}
													},
													"response": []
												},
												{
													"name": "remove from db osx Code-204",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 204\", function () {\r",
																	"    pm.response.to.have.status(204);\r",
																	"});\r",
																	""
																],
																"type": "text/javascript",
																"packages": {}
															}
														}
													],
													"request": {
														"method": "DELETE",
														"header": [],
														"url": {
															"raw": "https://dit-sds-software-webapp.azurewebsites.net/api/software/{{Software_Name}}/{{Software_Version_osx}}/{{Software_Platform_osx}}",
															"protocol": "https",
															"host": [
																"dit-sds-software-webapp",
																"azurewebsites",
																"net"
															],
															"path": [
																"api",
																"software",
																"{{Software_Name}}",
																"{{Software_Version_osx}}",
																"{{Software_Platform_osx}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "check deleted-osx Code-200",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});\r",
																	""
																],
																"type": "text/javascript",
																"packages": {}
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{Url_software}}software?name={{Software_Name}}&version={{Software_Version_osx}}&platform={{Software_Platform_osx}}",
															"host": [
																"{{Url_software}}software"
															],
															"query": [
																{
																	"key": "name",
																	"value": "{{Software_Name}}"
																},
																{
																	"key": "version",
																	"value": "{{Software_Version_osx}}"
																},
																{
																	"key": "platform",
																	"value": "{{Software_Platform_osx}}"
																}
															]
														}
													},
													"response": []
												},
												{
													"name": "new-software-osx2 Code-201",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 201\", function () {\r",
																	"    pm.response.to.have.status(201);\r",
																	"});\r",
																	""
																],
																"type": "text/javascript",
																"packages": {}
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [],
														"body": {
															"mode": "formdata",
															"formdata": [
																{
																	"key": "Name",
																	"value": "snst",
																	"type": "text"
																},
																{
																	"key": "Version",
																	"value": "{{Software_Version_osx}}",
																	"type": "text"
																},
																{
																	"key": "Platform",
																	"value": "{{Software_Platform_osx}}",
																	"type": "text"
																},
																{
																	"key": "Criticality",
																	"value": "{{criticality_Recommended}}",
																	"type": "text"
																},
																{
																	"key": "Description",
																	"value": "{{Description}}",
																	"type": "text"
																},
																{
																	"key": "releaseNotesUrl",
																	"value": "{{ReleaseNotesUrl}}",
																	"type": "text"
																},
																{
																	"key": "file",
																	"type": "file",
																	"src": "SecureNMCSystemTool_4.0.0.1_osx-arm64 (3).tar.gz"
																},
																{
																	"key": "",
																	"value": "",
																	"type": "text"
																}
															]
														},
														"url": {
															"raw": "{{Url_software}}software",
															"host": [
																"{{Url_software}}software"
															]
														}
													},
													"response": []
												},
												{
													"name": "Scheduled-osx Code-204",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 403\", function () {\r",
																	"    pm.response.to.have.status(403);\r",
																	"});\r",
																	""
																],
																"type": "text/javascript",
																"packages": {}
															}
														}
													],
													"request": {
														"method": "PUT",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\r\n  \"release\": true,\r\n  \"releaseDate\": \"2025-08-02T16:15:44.3988046Z\"\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{Url_software}}software/{{Software_Name}}/{{Software_Version_osx}}/{{Software_Platform_osx}}/release",
															"host": [
																"{{Url_software}}software"
															],
															"path": [
																"{{Software_Name}}",
																"{{Software_Version_osx}}",
																"{{Software_Platform_osx}}",
																"release"
															]
														}
													},
													"response": []
												},
												{
													"name": "check scheduled-osx Code-200",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});\r",
																	""
																],
																"type": "text/javascript",
																"packages": {}
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{Url_software}}software?name={{Software_Name}}&version={{Software_Version_osx}}&platform={{Software_Platform_osx}}",
															"host": [
																"{{Url_software}}software"
															],
															"query": [
																{
																	"key": "name",
																	"value": "{{Software_Name}}"
																},
																{
																	"key": "version",
																	"value": "{{Software_Version_osx}}"
																},
																{
																	"key": "platform",
																	"value": "{{Software_Platform_osx}}"
																}
															]
														}
													},
													"response": []
												},
												{
													"name": "stagged-osx Code-204",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 403\", function () {\r",
																	"    pm.response.to.have.status(403);\r",
																	"});\r",
																	""
																],
																"type": "text/javascript",
																"packages": {}
															}
														}
													],
													"request": {
														"method": "PUT",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\r\n  \"release\": false\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{Url_software}}software/{{Software_Name}}/{{Software_Version_osx}}/{{Software_Platform_osx}}/release",
															"host": [
																"{{Url_software}}software"
															],
															"path": [
																"{{Software_Name}}",
																"{{Software_Version_osx}}",
																"{{Software_Platform_osx}}",
																"release"
															]
														}
													},
													"response": []
												},
												{
													"name": "check-stagged-osx Code-200",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});\r",
																	""
																],
																"type": "text/javascript",
																"packages": {}
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{Url_software}}software?name={{Software_Name}}&version={{Software_Version_osx}}&platform={{Software_Platform_osx}}",
															"host": [
																"{{Url_software}}software"
															],
															"query": [
																{
																	"key": "name",
																	"value": "{{Software_Name}}"
																},
																{
																	"key": "version",
																	"value": "{{Software_Version_osx}}"
																},
																{
																	"key": "platform",
																	"value": "{{Software_Platform_osx}}"
																}
															]
														}
													},
													"response": []
												},
												{
													"name": "delete from db-osx Code-204",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 204\", function () {\r",
																	"    pm.response.to.have.status(204);\r",
																	"});\r",
																	""
																],
																"type": "text/javascript",
																"packages": {}
															}
														}
													],
													"request": {
														"method": "DELETE",
														"header": [],
														"url": {
															"raw": "https://dit-sds-software-webapp.azurewebsites.net/api/software/{{Software_Name}}/{{Software_Version_osx}}/{{Software_Platform_osx}}",
															"protocol": "https",
															"host": [
																"dit-sds-software-webapp",
																"azurewebsites",
																"net"
															],
															"path": [
																"api",
																"software",
																"{{Software_Name}}",
																"{{Software_Version_osx}}",
																"{{Software_Platform_osx}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "check deleted-osx Code-404",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Response is exactly an empty array\", function () {\r",
																	"    pm.expect(pm.response.text()).to.eql(\"[]\");\r",
																	"});\r",
																	""
																],
																"type": "text/javascript",
																"packages": {}
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{Url_software}}software?name={{Software_Name}}&version={{Software_Version_osx}}&platform={{Software_Platform_osx}}",
															"host": [
																"{{Url_software}}software"
															],
															"query": [
																{
																	"key": "name",
																	"value": "{{Software_Name}}"
																},
																{
																	"key": "version",
																	"value": "{{Software_Version_osx}}"
																},
																{
																	"key": "platform",
																	"value": "{{Software_Platform_osx}}"
																}
															]
														}
													},
													"response": []
												}
											]
										},
										{
											"name": "Software API _osx released",
											"item": [
												{
													"name": "New-Software-osx Code-201",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 201\", function () {\r",
																	"    pm.response.to.have.status(201);\r",
																	"});\r",
																	""
																],
																"type": "text/javascript",
																"packages": {}
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [],
														"body": {
															"mode": "formdata",
															"formdata": [
																{
																	"key": "Name",
																	"value": "snst",
																	"type": "text"
																},
																{
																	"key": "Version",
																	"value": "{{Software_Version_osx}}",
																	"type": "text"
																},
																{
																	"key": "Platform",
																	"value": "{{Software_Platform_osx}}",
																	"type": "text"
																},
																{
																	"key": "Criticality",
																	"value": "{{criticality_Recommended}}",
																	"type": "text"
																},
																{
																	"key": "Description",
																	"value": "{{Description}}",
																	"type": "text"
																},
																{
																	"key": "releaseNotesUrl",
																	"value": "{{ReleaseNotesUrl}}",
																	"type": "text"
																},
																{
																	"key": "file",
																	"type": "file",
																	"src": "SecureNMCSystemTool_4.0.0.1_osx-arm64 (3).tar.gz"
																},
																{
																	"key": "",
																	"value": "",
																	"type": "text"
																}
															]
														},
														"url": {
															"raw": "{{Url_software}}software",
															"host": [
																"{{Url_software}}software"
															]
														}
													},
													"response": []
												},
												{
													"name": "all software osx Code-200",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});\r",
																	""
																],
																"type": "text/javascript",
																"packages": {}
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{Url_software}}software?name={{Software_Name}}",
															"host": [
																"{{Url_software}}software"
															],
															"query": [
																{
																	"key": "name",
																	"value": "{{Software_Name}}"
																}
															]
														}
													},
													"response": []
												},
												{
													"name": "single software osx Code-200",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});\r",
																	"\r",
																	""
																],
																"type": "text/javascript",
																"packages": {}
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{Url_software}}software?name={{Software_Name}}&version={{Software_Version_osx}}&platform={{Software_Platform_osx}}",
															"host": [
																"{{Url_software}}software"
															],
															"query": [
																{
																	"key": "name",
																	"value": "{{Software_Name}}"
																},
																{
																	"key": "version",
																	"value": "{{Software_Version_osx}}"
																},
																{
																	"key": "platform",
																	"value": "{{Software_Platform_osx}}"
																}
															]
														}
													},
													"response": []
												},
												{
													"name": "criticality update-osx Code-204",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 204\", function () {\r",
																	"    pm.response.to.have.status(204);\r",
																	"});\r",
																	""
																],
																"type": "text/javascript",
																"packages": {}
															}
														}
													],
													"request": {
														"method": "PUT",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\r\n  \"criticality\": \"{{criticality_Optional}}\",\r\n  \"description\": \"{{Description}}\",\r\n  \"releaseNotesUrl\": \"{{ReleaseNotesUrl}}\"\r\n}\r\n",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{Url_software}}software/{{Software_Name}}/{{Software_Version_osx}}/{{Software_Platform_osx}}",
															"host": [
																"{{Url_software}}software"
															],
															"path": [
																"{{Software_Name}}",
																"{{Software_Version_osx}}",
																"{{Software_Platform_osx}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "download-osx Code-200",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});\r",
																	"\r",
																	"// pm.test(\"Status is 200 and response time > 10s\", function () {\r",
																	"//     pm.expect(pm.response.code).to.eql(200);\r",
																	"//     pm.expect(pm.response.responseTime).to.be.above(10000); // 10,000 ms = 10 seconds\r",
																	"// });\r",
																	""
																],
																"type": "text/javascript",
																"packages": {}
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{Url_software}}software/{{Software_Name}}/{{Software-osx-released}}/{{Software_Platform_osx}}/download",
															"host": [
																"{{Url_software}}software"
															],
															"path": [
																"{{Software_Name}}",
																"{{Software-osx-released}}",
																"{{Software_Platform_osx}}",
																"download"
															]
														}
													},
													"response": []
												},
												{
													"name": "remove from db osx Code-204",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 204\", function () {\r",
																	"    pm.response.to.have.status(204);\r",
																	"});\r",
																	""
																],
																"type": "text/javascript",
																"packages": {}
															}
														}
													],
													"request": {
														"method": "DELETE",
														"header": [],
														"url": {
															"raw": "https://dit-sds-software-webapp.azurewebsites.net/api/software/{{Software_Name}}/{{Software_Version_osx}}/{{Software_Platform_osx}}",
															"protocol": "https",
															"host": [
																"dit-sds-software-webapp",
																"azurewebsites",
																"net"
															],
															"path": [
																"api",
																"software",
																"{{Software_Name}}",
																"{{Software_Version_osx}}",
																"{{Software_Platform_osx}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "check deleted-osx Code-200",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});\r",
																	""
																],
																"type": "text/javascript",
																"packages": {}
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{Url_software}}software?name={{Software_Name}}&version={{Software_Version_osx}}&platform={{Software_Platform_osx}}",
															"host": [
																"{{Url_software}}software"
															],
															"query": [
																{
																	"key": "name",
																	"value": "{{Software_Name}}"
																},
																{
																	"key": "version",
																	"value": "{{Software_Version_osx}}"
																},
																{
																	"key": "platform",
																	"value": "{{Software_Platform_osx}}"
																}
															]
														}
													},
													"response": []
												},
												{
													"name": "new-software-osx2 Code-201",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 201\", function () {\r",
																	"    pm.response.to.have.status(201);\r",
																	"});\r",
																	""
																],
																"type": "text/javascript",
																"packages": {}
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [],
														"body": {
															"mode": "formdata",
															"formdata": [
																{
																	"key": "Name",
																	"value": "snst",
																	"type": "text"
																},
																{
																	"key": "Version",
																	"value": "{{Software_Version_osx}}",
																	"type": "text"
																},
																{
																	"key": "Platform",
																	"value": "{{Software_Platform_osx}}",
																	"type": "text"
																},
																{
																	"key": "Criticality",
																	"value": "{{criticality_Recommended}}",
																	"type": "text"
																},
																{
																	"key": "Description",
																	"value": "{{Description}}",
																	"type": "text"
																},
																{
																	"key": "releaseNotesUrl",
																	"value": "{{ReleaseNotesUrl}}",
																	"type": "text"
																},
																{
																	"key": "file",
																	"type": "file",
																	"src": "SecureNMCSystemTool_4.0.0.1_osx-arm64 (3).tar.gz"
																},
																{
																	"key": "",
																	"value": "",
																	"type": "text"
																}
															]
														},
														"url": {
															"raw": "{{Url_software}}software",
															"host": [
																"{{Url_software}}software"
															]
														}
													},
													"response": []
												},
												{
													"name": "Scheduled-osx Code-204",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 403\", function () {\r",
																	"    pm.response.to.have.status(403);\r",
																	"});\r",
																	""
																],
																"type": "text/javascript",
																"packages": {}
															}
														}
													],
													"request": {
														"method": "PUT",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\r\n  \"release\": true,\r\n  \"releaseDate\": \"2025-08-02T16:15:44.3988046Z\"\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{Url_software}}software/{{Software_Name}}/{{Software_Version_osx}}/{{Software_Platform_osx}}/release",
															"host": [
																"{{Url_software}}software"
															],
															"path": [
																"{{Software_Name}}",
																"{{Software_Version_osx}}",
																"{{Software_Platform_osx}}",
																"release"
															]
														}
													},
													"response": []
												},
												{
													"name": "check scheduled-osx Code-200",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});\r",
																	""
																],
																"type": "text/javascript",
																"packages": {}
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{Url_software}}software?name={{Software_Name}}&version={{Software_Version_osx}}&platform={{Software_Platform_osx}}",
															"host": [
																"{{Url_software}}software"
															],
															"query": [
																{
																	"key": "name",
																	"value": "{{Software_Name}}"
																},
																{
																	"key": "version",
																	"value": "{{Software_Version_osx}}"
																},
																{
																	"key": "platform",
																	"value": "{{Software_Platform_osx}}"
																}
															]
														}
													},
													"response": []
												},
												{
													"name": "stagged-osx Code-204",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 403\", function () {\r",
																	"    pm.response.to.have.status(403);\r",
																	"});\r",
																	""
																],
																"type": "text/javascript",
																"packages": {}
															}
														}
													],
													"request": {
														"method": "PUT",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\r\n  \"release\": false\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{Url_software}}software/{{Software_Name}}/{{Software_Version_osx}}/{{Software_Platform_osx}}/release",
															"host": [
																"{{Url_software}}software"
															],
															"path": [
																"{{Software_Name}}",
																"{{Software_Version_osx}}",
																"{{Software_Platform_osx}}",
																"release"
															]
														}
													},
													"response": []
												},
												{
													"name": "check-stagged-osx Code-200",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});\r",
																	""
																],
																"type": "text/javascript",
																"packages": {}
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{Url_software}}software?name={{Software_Name}}&version={{Software_Version_osx}}&platform={{Software_Platform_osx}}",
															"host": [
																"{{Url_software}}software"
															],
															"query": [
																{
																	"key": "name",
																	"value": "{{Software_Name}}"
																},
																{
																	"key": "version",
																	"value": "{{Software_Version_osx}}"
																},
																{
																	"key": "platform",
																	"value": "{{Software_Platform_osx}}"
																}
															]
														}
													},
													"response": []
												},
												{
													"name": "delete from db-osx Code-204",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 204\", function () {\r",
																	"    pm.response.to.have.status(204);\r",
																	"});\r",
																	""
																],
																"type": "text/javascript",
																"packages": {}
															}
														}
													],
													"request": {
														"method": "DELETE",
														"header": [],
														"url": {
															"raw": "https://dit-sds-software-webapp.azurewebsites.net/api/software/{{Software_Name}}/{{Software_Version_osx}}/{{Software_Platform_osx}}",
															"protocol": "https",
															"host": [
																"dit-sds-software-webapp",
																"azurewebsites",
																"net"
															],
															"path": [
																"api",
																"software",
																"{{Software_Name}}",
																"{{Software_Version_osx}}",
																"{{Software_Platform_osx}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "check deleted-osx Code-404",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Response is exactly an empty array\", function () {\r",
																	"    pm.expect(pm.response.text()).to.eql(\"[]\");\r",
																	"});\r",
																	""
																],
																"type": "text/javascript",
																"packages": {}
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{Url_software}}software?name={{Software_Name}}&version={{Software_Version_osx}}&platform={{Software_Platform_osx}}",
															"host": [
																"{{Url_software}}software"
															],
															"query": [
																{
																	"key": "name",
																	"value": "{{Software_Name}}"
																},
																{
																	"key": "version",
																	"value": "{{Software_Version_osx}}"
																},
																{
																	"key": "platform",
																	"value": "{{Software_Platform_osx}}"
																}
															]
														}
													},
													"response": []
												}
											]
										}
									]
								},
								{
									"name": "linux",
									"item": [
										{
											"name": "Software API_linux",
											"item": [
												{
													"name": "new-software-linux Code-201",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 201\", function () {\r",
																	"    pm.response.to.have.status(201);\r",
																	"});\r",
																	""
																],
																"type": "text/javascript",
																"packages": {}
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [],
														"body": {
															"mode": "formdata",
															"formdata": [
																{
																	"key": "Name",
																	"value": "snst",
																	"type": "text"
																},
																{
																	"key": "Version",
																	"value": "{{Software_Version_linux}}",
																	"type": "text"
																},
																{
																	"key": "Platform",
																	"value": "{{Software_Platform_linux}}",
																	"type": "text"
																},
																{
																	"key": "Criticality",
																	"value": "{{criticality_Recommended}}",
																	"type": "text"
																},
																{
																	"key": "Description",
																	"value": "{{Description}}",
																	"type": "text"
																},
																{
																	"key": "releaseNotesUrl",
																	"value": "{{ReleaseNotesUrl}}",
																	"type": "text"
																},
																{
																	"key": "file",
																	"type": "file",
																	"src": "SecureNMCSystemTool_4.0.0.1_linux-x64 (2).tar.gz"
																},
																{
																	"key": "",
																	"value": "",
																	"type": "text"
																}
															]
														},
														"url": {
															"raw": "{{Url_software}}software",
															"host": [
																"{{Url_software}}software"
															]
														}
													},
													"response": []
												},
												{
													"name": "all software-linux Code-200",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});\r",
																	""
																],
																"type": "text/javascript",
																"packages": {}
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{Url_software}}software?name={{Software_Name}}",
															"host": [
																"{{Url_software}}software"
															],
															"query": [
																{
																	"key": "name",
																	"value": "{{Software_Name}}"
																}
															]
														}
													},
													"response": []
												},
												{
													"name": "single software-linux Code-200",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});\r",
																	"\r",
																	""
																],
																"type": "text/javascript",
																"packages": {}
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{Url_software}}software?name={{Software_Name}}&version={{Software_Version_linux}}&platform={{Software_Platform_linux}}",
															"host": [
																"{{Url_software}}software"
															],
															"query": [
																{
																	"key": "name",
																	"value": "{{Software_Name}}"
																},
																{
																	"key": "version",
																	"value": "{{Software_Version_linux}}"
																},
																{
																	"key": "platform",
																	"value": "{{Software_Platform_linux}}"
																}
															]
														}
													},
													"response": []
												},
												{
													"name": "criticality update-linux Code-204",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 204\", function () {\r",
																	"    pm.response.to.have.status(204);\r",
																	"});\r",
																	""
																],
																"type": "text/javascript",
																"packages": {}
															}
														}
													],
													"request": {
														"method": "PUT",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\r\n  \"criticality\": \"{{criticality_Optional}}\",\r\n  \"description\": \"{{Description}}\",\r\n  \"releaseNotesUrl\": \"{{ReleaseNotesUrl}}\"\r\n}\r\n",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{Url_software}}software/{{Software_Name}}/{{Software_Version_linux}}/{{Software_Platform_linux}}",
															"host": [
																"{{Url_software}}software"
															],
															"path": [
																"{{Software_Name}}",
																"{{Software_Version_linux}}",
																"{{Software_Platform_linux}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "download-linux Code-200",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});\r",
																	"\r",
																	"// pm.test(\"Status is 200 and response time > 10s\", function () {\r",
																	"//     pm.expect(pm.response.code).to.eql(200);\r",
																	"//     pm.expect(pm.response.responseTime).to.be.above(10000); // 10,000 ms = 10 seconds\r",
																	"// });\r",
																	""
																],
																"type": "text/javascript",
																"packages": {}
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{Url_software}}software/{{Software_Name}}/{{Software_Version_linux}}/{{Software_Platform_linux}}/download",
															"host": [
																"{{Url_software}}software"
															],
															"path": [
																"{{Software_Name}}",
																"{{Software_Version_linux}}",
																"{{Software_Platform_linux}}",
																"download"
															]
														}
													},
													"response": []
												},
												{
													"name": "linux-delete Code-204",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 204\", function () {\r",
																	"    pm.response.to.have.status(204);\r",
																	"});\r",
																	""
																],
																"type": "text/javascript",
																"packages": {}
															}
														}
													],
													"request": {
														"method": "DELETE",
														"header": [],
														"url": {
															"raw": "https://dit-sds-software-webapp.azurewebsites.net/api/software/{{Software_Name}}/{{Software_Version_linux}}/{{Software_Platform_linux}}",
															"protocol": "https",
															"host": [
																"dit-sds-software-webapp",
																"azurewebsites",
																"net"
															],
															"path": [
																"api",
																"software",
																"{{Software_Name}}",
																"{{Software_Version_linux}}",
																"{{Software_Platform_linux}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "delete-check-linux Code-200",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});\r",
																	"\r",
																	""
																],
																"type": "text/javascript",
																"packages": {}
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{Url_software}}software?name={{Software_Name}}&version={{Software_Version_linux}}&platform={{Software_Platform_linux}}",
															"host": [
																"{{Url_software}}software"
															],
															"query": [
																{
																	"key": "name",
																	"value": "{{Software_Name}}"
																},
																{
																	"key": "version",
																	"value": "{{Software_Version_linux}}"
																},
																{
																	"key": "platform",
																	"value": "{{Software_Platform_linux}}"
																}
															]
														}
													},
													"response": []
												},
												{
													"name": "New_Software-linux2 Code-201",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 201\", function () {\r",
																	"    pm.response.to.have.status(201);\r",
																	"});\r",
																	""
																],
																"type": "text/javascript",
																"packages": {}
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [],
														"body": {
															"mode": "formdata",
															"formdata": [
																{
																	"key": "Name",
																	"value": "snst",
																	"type": "text"
																},
																{
																	"key": "Version",
																	"value": "{{Software_Version_linux}}",
																	"type": "text"
																},
																{
																	"key": "Platform",
																	"value": "{{Software_Platform_linux}}",
																	"type": "text"
																},
																{
																	"key": "Criticality",
																	"value": "{{criticality_Recommended}}",
																	"type": "text"
																},
																{
																	"key": "Description",
																	"value": "{{Description}}",
																	"type": "text"
																},
																{
																	"key": "releaseNotesUrl",
																	"value": "{{ReleaseNotesUrl}}",
																	"type": "text"
																},
																{
																	"key": "file",
																	"type": "file",
																	"src": "SecureNMCSystemTool_4.0.0.1_linux-x64 (2).tar.gz"
																},
																{
																	"key": "",
																	"value": "",
																	"type": "text"
																}
															]
														},
														"url": {
															"raw": "{{Url_software}}software",
															"host": [
																"{{Url_software}}software"
															]
														}
													},
													"response": []
												},
												{
													"name": "Scheduled_linux Code-204",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 403\", function () {\r",
																	"    pm.response.to.have.status(403);\r",
																	"});\r",
																	""
																],
																"type": "text/javascript",
																"packages": {}
															}
														}
													],
													"request": {
														"method": "PUT",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\r\n  \"release\": true,\r\n  \"releaseDate\": \"2025-08-02T16:15:44.3988046Z\"\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{Url_software}}software/{{Software_Name}}/{{Software_Version_linux}}/{{Software_Platform_linux}}/release",
															"host": [
																"{{Url_software}}software"
															],
															"path": [
																"{{Software_Name}}",
																"{{Software_Version_linux}}",
																"{{Software_Platform_linux}}",
																"release"
															]
														}
													},
													"response": []
												},
												{
													"name": "Scheduled check linux Code-200",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});\r",
																	""
																],
																"type": "text/javascript",
																"packages": {}
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{Url_software}}software?name={{Software_Name}}&version={{Software_Version_linux}}&platform={{Software_Platform_linux}}",
															"host": [
																"{{Url_software}}software"
															],
															"query": [
																{
																	"key": "name",
																	"value": "{{Software_Name}}"
																},
																{
																	"key": "version",
																	"value": "{{Software_Version_linux}}"
																},
																{
																	"key": "platform",
																	"value": "{{Software_Platform_linux}}"
																}
															]
														}
													},
													"response": []
												},
												{
													"name": "stagged-linux Code-204",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 403\", function () {\r",
																	"    pm.response.to.have.status(403);\r",
																	"});\r",
																	""
																],
																"type": "text/javascript",
																"packages": {}
															}
														}
													],
													"request": {
														"method": "PUT",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\r\n  \"release\": false\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{Url_software}}software/{{Software_Name}}/{{Software_Version_linux}}/{{Software_Platform_linux}}/release",
															"host": [
																"{{Url_software}}software"
															],
															"path": [
																"{{Software_Name}}",
																"{{Software_Version_linux}}",
																"{{Software_Platform_linux}}",
																"release"
															]
														}
													},
													"response": []
												},
												{
													"name": "check Stagged-linux Code-200",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});\r",
																	""
																],
																"type": "text/javascript",
																"packages": {}
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{Url_software}}software?name={{Software_Name}}&version={{Software_Version_linux}}&platform={{Software_Platform_linux}}",
															"host": [
																"{{Url_software}}software"
															],
															"query": [
																{
																	"key": "name",
																	"value": "{{Software_Name}}"
																},
																{
																	"key": "version",
																	"value": "{{Software_Version_linux}}"
																},
																{
																	"key": "platform",
																	"value": "{{Software_Platform_linux}}"
																}
															]
														}
													},
													"response": []
												},
												{
													"name": "remove from db-linux Code-204",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 204\", function () {\r",
																	"    pm.response.to.have.status(204);\r",
																	"});\r",
																	""
																],
																"type": "text/javascript",
																"packages": {}
															}
														}
													],
													"request": {
														"method": "DELETE",
														"header": [],
														"url": {
															"raw": "https://dit-sds-software-webapp.azurewebsites.net/api/software/{{Software_Name}}/{{Software_Version_linux}}/{{Software_Platform_linux}}",
															"protocol": "https",
															"host": [
																"dit-sds-software-webapp",
																"azurewebsites",
																"net"
															],
															"path": [
																"api",
																"software",
																"{{Software_Name}}",
																"{{Software_Version_linux}}",
																"{{Software_Platform_linux}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "check deleted-linux Code-404",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Response is exactly an empty array\", function () {\r",
																	"    pm.expect(pm.response.text()).to.eql(\"[]\");\r",
																	"});\r",
																	""
																],
																"type": "text/javascript",
																"packages": {}
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{Url_software}}software?name={{Software_Name}}&version={{Software_Version_linux}}&platform={{Software_Platform_linux}}",
															"host": [
																"{{Url_software}}software"
															],
															"query": [
																{
																	"key": "name",
																	"value": "{{Software_Name}}"
																},
																{
																	"key": "version",
																	"value": "{{Software_Version_linux}}"
																},
																{
																	"key": "platform",
																	"value": "{{Software_Platform_linux}}"
																}
															]
														}
													},
													"response": []
												}
											]
										},
										{
											"name": "Software API_linux Released",
											"item": [
												{
													"name": "new-software-linux Code-201",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 201\", function () {\r",
																	"    pm.response.to.have.status(201);\r",
																	"});\r",
																	""
																],
																"type": "text/javascript",
																"packages": {}
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [],
														"body": {
															"mode": "formdata",
															"formdata": [
																{
																	"key": "Name",
																	"value": "snst",
																	"type": "text"
																},
																{
																	"key": "Version",
																	"value": "{{Software_Version_linux}}",
																	"type": "text"
																},
																{
																	"key": "Platform",
																	"value": "{{Software_Platform_linux}}",
																	"type": "text"
																},
																{
																	"key": "Criticality",
																	"value": "{{criticality_Recommended}}",
																	"type": "text"
																},
																{
																	"key": "Description",
																	"value": "{{Description}}",
																	"type": "text"
																},
																{
																	"key": "releaseNotesUrl",
																	"value": "{{ReleaseNotesUrl}}",
																	"type": "text"
																},
																{
																	"key": "file",
																	"type": "file",
																	"src": "SecureNMCSystemTool_4.0.0.1_linux-x64 (2).tar.gz"
																},
																{
																	"key": "",
																	"value": "",
																	"type": "text"
																}
															]
														},
														"url": {
															"raw": "{{Url_software}}software",
															"host": [
																"{{Url_software}}software"
															]
														}
													},
													"response": []
												},
												{
													"name": "all software-linux Code-200",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});\r",
																	""
																],
																"type": "text/javascript",
																"packages": {}
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{Url_software}}software?name={{Software_Name}}",
															"host": [
																"{{Url_software}}software"
															],
															"query": [
																{
																	"key": "name",
																	"value": "{{Software_Name}}"
																}
															]
														}
													},
													"response": []
												},
												{
													"name": "single software-linux Code-200",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});\r",
																	"\r",
																	""
																],
																"type": "text/javascript",
																"packages": {}
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{Url_software}}software?name={{Software_Name}}&version={{Software_Version_linux}}&platform={{Software_Platform_linux}}",
															"host": [
																"{{Url_software}}software"
															],
															"query": [
																{
																	"key": "name",
																	"value": "{{Software_Name}}"
																},
																{
																	"key": "version",
																	"value": "{{Software_Version_linux}}"
																},
																{
																	"key": "platform",
																	"value": "{{Software_Platform_linux}}"
																}
															]
														}
													},
													"response": []
												},
												{
													"name": "criticality update-linux Code-204",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 204\", function () {\r",
																	"    pm.response.to.have.status(204);\r",
																	"});\r",
																	""
																],
																"type": "text/javascript",
																"packages": {}
															}
														}
													],
													"request": {
														"method": "PUT",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\r\n  \"criticality\": \"{{criticality_Optional}}\",\r\n  \"description\": \"{{Description}}\",\r\n  \"releaseNotesUrl\": \"{{ReleaseNotesUrl}}\"\r\n}\r\n",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{Url_software}}software/{{Software_Name}}/{{Software_Version_linux}}/{{Software_Platform_linux}}",
															"host": [
																"{{Url_software}}software"
															],
															"path": [
																"{{Software_Name}}",
																"{{Software_Version_linux}}",
																"{{Software_Platform_linux}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "download-linux Code-200",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});\r",
																	"\r",
																	"// pm.test(\"Status is 200 and response time > 10s\", function () {\r",
																	"//     pm.expect(pm.response.code).to.eql(200);\r",
																	"//     pm.expect(pm.response.responseTime).to.be.above(10000); // 10,000 ms = 10 seconds\r",
																	"// });\r",
																	""
																],
																"type": "text/javascript",
																"packages": {}
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{Url_software}}software/{{Software_Name}}/{{Software-linux-released}}/{{Software_Platform_linux}}/download",
															"host": [
																"{{Url_software}}software"
															],
															"path": [
																"{{Software_Name}}",
																"{{Software-linux-released}}",
																"{{Software_Platform_linux}}",
																"download"
															]
														}
													},
													"response": []
												},
												{
													"name": "linux-delete Code-204",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 204\", function () {\r",
																	"    pm.response.to.have.status(204);\r",
																	"});\r",
																	""
																],
																"type": "text/javascript",
																"packages": {}
															}
														}
													],
													"request": {
														"method": "DELETE",
														"header": [],
														"url": {
															"raw": "https://dit-sds-software-webapp.azurewebsites.net/api/software/{{Software_Name}}/{{Software_Version_linux}}/{{Software_Platform_linux}}",
															"protocol": "https",
															"host": [
																"dit-sds-software-webapp",
																"azurewebsites",
																"net"
															],
															"path": [
																"api",
																"software",
																"{{Software_Name}}",
																"{{Software_Version_linux}}",
																"{{Software_Platform_linux}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "delete-check-linux Code-200",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});\r",
																	"\r",
																	""
																],
																"type": "text/javascript",
																"packages": {}
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{Url_software}}software?name={{Software_Name}}&version={{Software_Version_linux}}&platform={{Software_Platform_linux}}",
															"host": [
																"{{Url_software}}software"
															],
															"query": [
																{
																	"key": "name",
																	"value": "{{Software_Name}}"
																},
																{
																	"key": "version",
																	"value": "{{Software_Version_linux}}"
																},
																{
																	"key": "platform",
																	"value": "{{Software_Platform_linux}}"
																}
															]
														}
													},
													"response": []
												},
												{
													"name": "New_Software-linux2 Code-201",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 201\", function () {\r",
																	"    pm.response.to.have.status(201);\r",
																	"});\r",
																	""
																],
																"type": "text/javascript",
																"packages": {}
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [],
														"body": {
															"mode": "formdata",
															"formdata": [
																{
																	"key": "Name",
																	"value": "snst",
																	"type": "text"
																},
																{
																	"key": "Version",
																	"value": "{{Software_Version_linux}}",
																	"type": "text"
																},
																{
																	"key": "Platform",
																	"value": "{{Software_Platform_linux}}",
																	"type": "text"
																},
																{
																	"key": "Criticality",
																	"value": "{{criticality_Recommended}}",
																	"type": "text"
																},
																{
																	"key": "Description",
																	"value": "{{Description}}",
																	"type": "text"
																},
																{
																	"key": "releaseNotesUrl",
																	"value": "{{ReleaseNotesUrl}}",
																	"type": "text"
																},
																{
																	"key": "file",
																	"type": "file",
																	"src": "SecureNMCSystemTool_4.0.0.1_linux-x64 (2).tar.gz"
																},
																{
																	"key": "",
																	"value": "",
																	"type": "text"
																}
															]
														},
														"url": {
															"raw": "{{Url_software}}software",
															"host": [
																"{{Url_software}}software"
															]
														}
													},
													"response": []
												},
												{
													"name": "Scheduled_linux Code-204",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 403\", function () {\r",
																	"    pm.response.to.have.status(403);\r",
																	"});\r",
																	""
																],
																"type": "text/javascript",
																"packages": {}
															}
														}
													],
													"request": {
														"method": "PUT",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\r\n  \"release\": true,\r\n  \"releaseDate\": \"2025-08-02T16:15:44.3988046Z\"\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{Url_software}}software/{{Software_Name}}/{{Software_Version_linux}}/{{Software_Platform_linux}}/release",
															"host": [
																"{{Url_software}}software"
															],
															"path": [
																"{{Software_Name}}",
																"{{Software_Version_linux}}",
																"{{Software_Platform_linux}}",
																"release"
															]
														}
													},
													"response": []
												},
												{
													"name": "Scheduled check linux Code-200",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});\r",
																	""
																],
																"type": "text/javascript",
																"packages": {}
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{Url_software}}software?name={{Software_Name}}&version={{Software_Version_linux}}&platform={{Software_Platform_linux}}",
															"host": [
																"{{Url_software}}software"
															],
															"query": [
																{
																	"key": "name",
																	"value": "{{Software_Name}}"
																},
																{
																	"key": "version",
																	"value": "{{Software_Version_linux}}"
																},
																{
																	"key": "platform",
																	"value": "{{Software_Platform_linux}}"
																}
															]
														}
													},
													"response": []
												},
												{
													"name": "stagged-linux Code-204",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 403\", function () {\r",
																	"    pm.response.to.have.status(403);\r",
																	"});\r",
																	""
																],
																"type": "text/javascript",
																"packages": {}
															}
														}
													],
													"request": {
														"method": "PUT",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\r\n  \"release\": false\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{Url_software}}software/{{Software_Name}}/{{Software_Version_linux}}/{{Software_Platform_linux}}/release",
															"host": [
																"{{Url_software}}software"
															],
															"path": [
																"{{Software_Name}}",
																"{{Software_Version_linux}}",
																"{{Software_Platform_linux}}",
																"release"
															]
														}
													},
													"response": []
												},
												{
													"name": "check Stagged-linux Code-200",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});\r",
																	""
																],
																"type": "text/javascript",
																"packages": {}
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{Url_software}}software?name={{Software_Name}}&version={{Software_Version_linux}}&platform={{Software_Platform_linux}}",
															"host": [
																"{{Url_software}}software"
															],
															"query": [
																{
																	"key": "name",
																	"value": "{{Software_Name}}"
																},
																{
																	"key": "version",
																	"value": "{{Software_Version_linux}}"
																},
																{
																	"key": "platform",
																	"value": "{{Software_Platform_linux}}"
																}
															]
														}
													},
													"response": []
												},
												{
													"name": "remove from db-linux Code-204",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 204\", function () {\r",
																	"    pm.response.to.have.status(204);\r",
																	"});\r",
																	""
																],
																"type": "text/javascript",
																"packages": {}
															}
														}
													],
													"request": {
														"method": "DELETE",
														"header": [],
														"url": {
															"raw": "https://dit-sds-software-webapp.azurewebsites.net/api/software/{{Software_Name}}/{{Software_Version_linux}}/{{Software_Platform_linux}}",
															"protocol": "https",
															"host": [
																"dit-sds-software-webapp",
																"azurewebsites",
																"net"
															],
															"path": [
																"api",
																"software",
																"{{Software_Name}}",
																"{{Software_Version_linux}}",
																"{{Software_Platform_linux}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "check deleted-linux Code-404",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Response is exactly an empty array\", function () {\r",
																	"    pm.expect(pm.response.text()).to.eql(\"[]\");\r",
																	"});\r",
																	""
																],
																"type": "text/javascript",
																"packages": {}
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{Url_software}}software?name={{Software_Name}}&version={{Software_Version_linux}}&platform={{Software_Platform_linux}}",
															"host": [
																"{{Url_software}}software"
															],
															"query": [
																{
																	"key": "name",
																	"value": "{{Software_Name}}"
																},
																{
																	"key": "version",
																	"value": "{{Software_Version_linux}}"
																},
																{
																	"key": "platform",
																	"value": "{{Software_Platform_linux}}"
																}
															]
														}
													},
													"response": []
												}
											]
										}
									]
								}
							]
						}
					],
					"auth": {
						"type": "apikey",
						"apikey": [
							{
								"key": "value",
								"value": "{{Api_key_User}}",
								"type": "string"
							},
							{
								"key": "key",
								"value": "Authorization",
								"type": "string"
							}
						]
					},
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"packages": {},
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"packages": {},
								"exec": [
									""
								]
							}
						}
					]
				}
			],
			"auth": {
				"type": "noauth"
			},
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"packages": {},
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"packages": {},
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "SoftwareReleaseManager",
			"item": [
				{
					"name": "Role Update",
					"item": [
						{
							"name": "roles Code-200",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url_userApi}}{{user_federatedId}}/roles",
									"host": [
										"{{url_userApi}}{{user_federatedId}}"
									],
									"path": [
										"roles"
									]
								}
							},
							"response": []
						},
						{
							"name": "role Code-204",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{url_userApi}}{{user_federatedId}}/roles/{{Role_Softwaremnager}}",
									"host": [
										"{{url_userApi}}{{user_federatedId}}"
									],
									"path": [
										"roles",
										"{{Role_Softwaremnager}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "role Code-204",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// let selected = {\r",
											"//     firmware: \"https://dit-sds-users-webapp.azurewebsites.net/api/users\",\r",
											"//     federatedId : \"SESA823251\",\r",
											"//     roles: \"roles\",\r",
											"//     userroles:\"SoftwareManager\"\r",
											"\r",
											"\r",
											"// };\r",
											"\r",
											"// pm.collectionVariables.set(\"federatedId \", selected.federatedId );\r",
											"// pm.collectionVariables.set(\"roles\", selected.roles);\r",
											"// pm.collectionVariables.set(\"userroles\", selected.userroles);\r",
											"\r",
											"\r",
											"// // Optional: Log to console\r",
											"// console.log(\"Selected User:\", selected.federatedId , selected.roles, selected.userroles);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{url_userApi}}{{user_federatedId}}/roles/{{Role_SoftwareReleasemanger}}",
									"host": [
										"{{url_userApi}}{{user_federatedId}}"
									],
									"path": [
										"roles",
										"{{Role_SoftwareReleasemanger}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "roles Code-200 Copy",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url_userApi}}{{user_federatedId}}/roles",
									"host": [
										"{{url_userApi}}{{user_federatedId}}"
									],
									"path": [
										"roles"
									]
								}
							},
							"response": []
						}
					],
					"auth": {
						"type": "apikey",
						"apikey": [
							{
								"key": "value",
								"value": "{{APi-key_Admin}}",
								"type": "string"
							},
							{
								"key": "key",
								"value": "Authorization",
								"type": "string"
							}
						]
					},
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"packages": {},
								"exec": [
									"(function () {\r",
									"    const selectedRole = pm.collectionVariables.get(\"userroles\") || pm.collectionVariables.get(\"userroles\");\r",
									"\r",
									"    // const allowedRoles = [\r",
									"    //     \"UserRolesReader\",\r",
									"    //     \"Administrator\",\r",
									"    //     \"SoftwareManager\",\r",
									"    //     \"FirmwareManager\",\r",
									"    //     \"FirmwareReleaseManager\",\r",
									"    //     \"SoftwareReleaseManager\"\r",
									"    // ];\r",
									"\r",
									"    // if (!allowedRoles.includes(selectedRole)) {\r",
									"    //     throw new Error(`Invalid role selected: ${selectedRole}. Allowed roles are: ${allowedRoles.join(\", \")}`);\r",
									"    // }\r",
									"\r",
									"    console.log(\" Validated role:\", selectedRole);\r",
									"})();\r",
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"packages": {},
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "Test Suite",
					"item": [
						{
							"name": "User API",
							"item": [
								{
									"name": "ApiKeys all Code-200",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{Url_apikeys}}",
											"host": [
												"{{Url_apikeys}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "roles Code-403",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 403\", function () {\r",
													"    pm.response.to.have.status(403);\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url_userApi}}{{user_federatedId}}/roles",
											"host": [
												"{{url_userApi}}{{user_federatedId}}"
											],
											"path": [
												"roles"
											]
										}
									},
									"response": []
								},
								{
									"name": "role Code-403",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// let selected = {\r",
													"//     firmware: \"https://dit-sds-users-webapp.azurewebsites.net/api/users\",\r",
													"//     federatedId : \"SESA823251\",\r",
													"//     roles: \"roles\",\r",
													"//     userroles:\"SoftwareManager\"\r",
													"\r",
													"\r",
													"// };\r",
													"\r",
													"// pm.collectionVariables.set(\"federatedId \", selected.federatedId );\r",
													"// pm.collectionVariables.set(\"roles\", selected.roles);\r",
													"// pm.collectionVariables.set(\"userroles\", selected.userroles);\r",
													"\r",
													"\r",
													"// // Optional: Log to console\r",
													"// console.log(\"Selected User:\", selected.federatedId , selected.roles, selected.userroles);"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 403\", function () {\r",
													"    pm.response.to.have.status(403);\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{url_userApi}}{{user_federatedId}}/roles/{{Role_UserRolesReader}}",
											"host": [
												"{{url_userApi}}{{user_federatedId}}"
											],
											"path": [
												"roles",
												"{{Role_UserRolesReader}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "role Code-204",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 403\", function () {\r",
													"    pm.response.to.have.status(403);\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{url_userApi}}{{user_federatedId}}/roles/{{Role_UserRolesReader}}",
											"host": [
												"{{url_userApi}}{{user_federatedId}}"
											],
											"path": [
												"roles",
												"{{Role_UserRolesReader}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Device API",
							"item": [
								{
									"name": "PUT Device Details Code-403",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"let requestId = pm.response.headers.get('Request-Id');\r",
													"pm.environment.set('requestId', requestId);\r",
													"\r",
													"pm.test(\"Status code is 403\", function () {\r",
													"    pm.response.to.have.status(403);\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "[\r\n  {\r\n    \"mac\": \"282986484D84\",\r\n    \"serialNumber\": \"ZA2108005674\",\r\n    \"encryptionKey\": \"a1b2c3d4e5f60718293a4b5c6d7e8f90\"\r\n  }\r\n]"
										},
										"url": {
											"raw": "{{url_devices}}devices",
											"host": [
												"{{url_devices}}devices"
											]
										}
									},
									"response": []
								},
								{
									"name": "PUT Upload Devices Code-403",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let requestId1 = pm.response.headers.get('Request-Id');",
													"pm.environment.set('requestId1', requestId1);",
													"",
													"pm.test(\"Status code is 403\", function () {",
													"    pm.response.to.have.status(403);",
													"});",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "multipart/form-data",
												"type": "text"
											}
										],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "file",
													"type": "file",
													"src": "postman-cloud:///1f04c2db-79af-4330-abbf-52f49b7814aa"
												}
											]
										},
										"url": {
											"raw": "{{url_devices}}/devices/upload",
											"host": [
												"{{url_devices}}"
											],
											"path": [
												"devices",
												"upload"
											]
										}
									},
									"response": []
								},
								{
									"name": "GET Request Status Code-200",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url_devices}}status?requestId={{requestId}}",
											"host": [
												"{{url_devices}}status"
											],
											"query": [
												{
													"key": "requestId",
													"value": "{{requestId}}"
												}
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"packages": {},
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"packages": {},
										"exec": [
											""
										]
									}
								}
							]
						},
						{
							"name": "Firmware API",
							"item": [
								{
									"name": "Firmware API_su stagged schduled",
									"item": [
										{
											"name": "get-all Code-200",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"// pm.test(\"Status code is 200\", function () {\r",
															"//     pm.response.to.have.status(200);\r",
															"// });\r",
															"\r",
															"// // // Parse response\r",
															"// // let firmwareList = pm.response.json();\r",
															"\r",
															"// // // Randomly select one firmware entry\r",
															"// // let selected = firmwareList[Math.floor(Math.random() * firmwareList.length)];\r",
															"\r",
															"// // // Set variables for next request\r",
															"// // pm.collectionVariables.set(\"appName\", selected.appName);\r",
															"// // pm.collectionVariables.set(\"appVersion\", selected.appVersion);\r",
															"\r",
															"// // console.log(\"Selected firmware:\", selected.appName, selected.appVersion);\r",
															"\r",
															"// let firmwareList = pm.response.json();\r",
															"\r",
															"// // Filter entries that have valid appName and appVersion\r",
															"// let validEntries = firmwareList.filter(fw => fw.appName && fw.appVersion);\r",
															"\r",
															"// // Randomly select one\r",
															"// let selected = validEntries[Math.floor(Math.random() * validEntries.length)];\r",
															"\r",
															"// pm.collectionVariables.set(\"appName\", selected.appName);\r",
															"// pm.collectionVariables.set(\"appVersion\", selected.appVersion);\r",
															"\r",
															"// console.log(\"Selected firmware:\", selected.appName, selected.appVersion);\r",
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{Url_firmwareApi}}",
													"host": [
														"{{Url_firmwareApi}}"
													],
													"query": [
														{
															"key": "snst",
															"value": null,
															"disabled": true
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "get-single Code-404",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 404\", function () {\r",
															"    pm.response.to.have.status(404);\r",
															"});\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{Url_firmwareApi}}/{{appName-su}}/{{Firmware-su-stagged}}",
													"host": [
														"{{Url_firmwareApi}}"
													],
													"path": [
														"{{appName-su}}",
														"{{Firmware-su-stagged}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "firmware Code-403",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"// Try to get values from the response first\r",
															"try {\r",
															"    const response = pm.response.json();\r",
															"    if (response.appName) {\r",
															"        pm.environment.set(\"appName\", response.appName);\r",
															"    }\r",
															"    if (response.appVersion) {\r",
															"        pm.environment.set(\"appVersion\", response.appVersion);\r",
															"    }\r",
															"} catch (e) {\r",
															"    console.warn(\"No JSON response or missing fields.\");\r",
															"}\r",
															"\r",
															"// Fallback: get values from the request body if not already set\r",
															"if (!pm.environment.get(\"appName\") || !pm.environment.get(\"appVersion\")) {\r",
															"    try {\r",
															"        const requestBody = pm.request.body.raw ? JSON.parse(pm.request.body.raw) : {};\r",
															"        if (requestBody.appName) {\r",
															"            pm.environment.set(\"appName\", requestBody.appName);\r",
															"        }\r",
															"        if (requestBody.appVersion) {\r",
															"            pm.environment.set(\"appVersion\", requestBody.appVersion);\r",
															"        }\r",
															"    } catch (e) {\r",
															"        console.warn(\"Failed to parse request body.\");\r",
															"    }\r",
															"}\r",
															"\r",
															"pm.test(\"Status code is 403\", function () {\r",
															"    pm.response.to.have.status(403);\r",
															"});\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "formdata",
													"formdata": [
														{
															"key": "Criticality",
															"value": "{{criticality_Recommended}}",
															"type": "text"
														},
														{
															"key": "Description",
															"value": "{{Description}}",
															"type": "text"
														},
														{
															"key": "ReleaseNotesUrl",
															"value": "{{ReleaseNotesUrl}}",
															"type": "text"
														},
														{
															"key": "file",
															"type": "file",
															"src": "apc_hw21_su_3-3-0-8.nmc3"
														}
													]
												},
												"url": {
													"raw": "{{Url_firmwareApi}}",
													"host": [
														"{{Url_firmwareApi}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Updating Code-403",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"if (!pm.collectionVariables.get(\"appName\") || !pm.collectionVariables.get(\"appVersion\")) {\r",
															"    throw new Error(\"appName or appVersion is missing. Please run the GET request first.\");\r",
															"}\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 403\", function () {\r",
															"    pm.response.to.have.status(403);\r",
															"});"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"criticality\": \"{{criticality_Optional}}\",\r\n  \"description\": \"{{Description}}\",\r\n  \"releaseNotesUrl\": \"{{ReleaseNotesUrl}}\"\r\n}\r\n\r\n",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{Url_firmwareApi}}/{{appName-su}}/{{Firmware-su-stagged}}",
													"host": [
														"{{Url_firmwareApi}}"
													],
													"path": [
														"{{appName-su}}",
														"{{Firmware-su-stagged}}"
													],
													"query": [
														{
															"key": "appName",
															"value": "su",
															"disabled": true
														},
														{
															"key": "appVersion",
															"value": "2.5.5.1",
															"disabled": true
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "get-single Code-404",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 404\", function () {\r",
															"    pm.response.to.have.status(404);\r",
															"});\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{Url_firmwareApi}}/{{appName-su}}/{{Firmware-su-stagged}}",
													"host": [
														"{{Url_firmwareApi}}"
													],
													"path": [
														"{{appName-su}}",
														"{{Firmware-su-stagged}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Updating Code-403",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"if (!pm.collectionVariables.get(\"appName\") || !pm.collectionVariables.get(\"appVersion\")) {\r",
															"    throw new Error(\"appName or appVersion is missing. Please run the GET request first.\");\r",
															"}\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 403\", function () {\r",
															"    pm.response.to.have.status(403);\r",
															"});"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"criticality\": \"{{criticality_Optional}}\",\r\n  \"description\": \"{{Description}}\",\r\n  \"releaseNotesUrl\": \"{{ReleaseNotesUrl}}\"\r\n}\r\n\r\n",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{Url_firmwareApi}}/{{appName-su}}/{{Firmware-su-stagged}}",
													"host": [
														"{{Url_firmwareApi}}"
													],
													"path": [
														"{{appName-su}}",
														"{{Firmware-su-stagged}}"
													],
													"query": [
														{
															"key": "appName",
															"value": "su",
															"disabled": true
														},
														{
															"key": "appVersion",
															"value": "2.5.5.1",
															"disabled": true
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "get-single Code-404",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 404\", function () {\r",
															"    pm.response.to.have.status(404);\r",
															"});\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{Url_firmwareApi}}/{{appName-su}}/{{Firmware-su-stagged}}",
													"host": [
														"{{Url_firmwareApi}}"
													],
													"path": [
														"{{appName-su}}",
														"{{Firmware-su-stagged}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Release Code-403",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 403\", function () {\r",
															"    pm.response.to.have.status(403);\r",
															"});\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"release\": true,\r\n  \"releaseDate\": \"2025-06-26T06:48:50.080876Z\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{Url_firmwareApi}}/{{appName-su}}/{{Firmware-su-stagged}}/release",
													"host": [
														"{{Url_firmwareApi}}"
													],
													"path": [
														"{{appName-su}}",
														"{{Firmware-su-stagged}}",
														"release"
													]
												}
											},
											"response": []
										},
										{
											"name": "get-single Code-404",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 404\", function () {\r",
															"    pm.response.to.have.status(404);\r",
															"});\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{Url_firmwareApi}}/{{appName-su}}/{{Firmware-su-stagged}}",
													"host": [
														"{{Url_firmwareApi}}"
													],
													"path": [
														"{{appName-su}}",
														"{{Firmware-su-stagged}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "generate Code-404",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"console.log(`Resolved URL: ${pm.variables.get(\"Url_firmwareApi\")}/${pm.collectionVariables.get(\"appName\")}/${pm.collectionVariables.get(\"appVersion\")}/generate`);\r",
															"\r",
															"\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"console.log(\"Response Body:\", pm.response.text());\r",
															"// console.log(\"Response Headers:\", pm.response.headers.toJSON());\r",
															"\r",
															"\r",
															"if (pm.response.code === 404) {\r",
															"    pm.visualizer.set(`<p>No firmware found for the selected version.</p>`);\r",
															"} else {\r",
															"    // existing logic for Content-Disposition\r",
															"}\r",
															"\r",
															"pm.test(\"Status code is 404\", function () {\r",
															"    pm.response.to.have.status(404);\r",
															"});\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"deviceIds\": [\r\n    \"2829866CDE70\"\r\n  ]\r\n}\r\n",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{Url_firmwareApi}}/{{appName-su}}/{{Firmware-su-stagged}}/generate",
													"host": [
														"{{Url_firmwareApi}}"
													],
													"path": [
														"{{appName-su}}",
														"{{Firmware-su-stagged}}",
														"generate"
													]
												}
											},
											"response": []
										},
										{
											"name": "stagged Code-403",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 403\", function () {\r",
															"    pm.response.to.have.status(403);\r",
															"});\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"release\": false\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{Url_firmwareApi}}/{{appName-su}}/{{Firmware-su-stagged}}/release",
													"host": [
														"{{Url_firmwareApi}}"
													],
													"path": [
														"{{appName-su}}",
														"{{Firmware-su-stagged}}",
														"release"
													]
												}
											},
											"response": []
										},
										{
											"name": "get-single Code-404",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 404\", function () {\r",
															"    pm.response.to.have.status(404);\r",
															"});\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{Url_firmwareApi}}/{{appName-su}}/{{Firmware-su-stagged}}",
													"host": [
														"{{Url_firmwareApi}}"
													],
													"path": [
														"{{appName-su}}",
														"{{Firmware-su-stagged}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Deleting Code-403",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"if (!pm.collectionVariables.get(\"appName\") || !pm.collectionVariables.get(\"appVersion\")) {\r",
															"    throw new Error(\"appName or appVersion is missing. Please run the GET request first.\");\r",
															"}\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 403\", function () {\r",
															"    pm.response.to.have.status(403);\r",
															"});"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [],
												"url": {
													"raw": "{{Url_firmwareApi}}/{{appName-su}}/{{Firmware-su-stagged}}",
													"host": [
														"{{Url_firmwareApi}}"
													],
													"path": [
														"{{appName-su}}",
														"{{Firmware-su-stagged}}"
													],
													"query": [
														{
															"key": "appName",
															"value": "su",
															"disabled": true
														},
														{
															"key": "appVersion",
															"value": "2.5.5.1",
															"disabled": true
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "get-single Copy5 Code-404",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 404\", function () {\r",
															"    pm.response.to.have.status(404);\r",
															"});\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{Url_firmwareApi}}/{{appName-su}}/{{Firmware-su-stagged}}",
													"host": [
														"{{Url_firmwareApi}}"
													],
													"path": [
														"{{appName-su}}",
														"{{Firmware-su-stagged}}"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Firmware API_su released",
									"item": [
										{
											"name": "get-all Code-200",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"// pm.test(\"Status code is 200\", function () {\r",
															"//     pm.response.to.have.status(200);\r",
															"// });\r",
															"\r",
															"// // // Parse response\r",
															"// // let firmwareList = pm.response.json();\r",
															"\r",
															"// // // Randomly select one firmware entry\r",
															"// // let selected = firmwareList[Math.floor(Math.random() * firmwareList.length)];\r",
															"\r",
															"// // // Set variables for next request\r",
															"// // pm.collectionVariables.set(\"appName\", selected.appName);\r",
															"// // pm.collectionVariables.set(\"appVersion\", selected.appVersion);\r",
															"\r",
															"// // console.log(\"Selected firmware:\", selected.appName, selected.appVersion);\r",
															"\r",
															"// let firmwareList = pm.response.json();\r",
															"\r",
															"// // Filter entries that have valid appName and appVersion\r",
															"// let validEntries = firmwareList.filter(fw => fw.appName && fw.appVersion);\r",
															"\r",
															"// // Randomly select one\r",
															"// let selected = validEntries[Math.floor(Math.random() * validEntries.length)];\r",
															"\r",
															"// pm.collectionVariables.set(\"appName\", selected.appName);\r",
															"// pm.collectionVariables.set(\"appVersion\", selected.appVersion);\r",
															"\r",
															"// console.log(\"Selected firmware:\", selected.appName, selected.appVersion);\r",
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{Url_firmwareApi}}",
													"host": [
														"{{Url_firmwareApi}}"
													],
													"query": [
														{
															"key": "snst",
															"value": null,
															"disabled": true
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "get-single Code-200",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{Url_firmwareApi}}/{{appName-su}}/{{Firmware-su-released}}",
													"host": [
														"{{Url_firmwareApi}}"
													],
													"path": [
														"{{appName-su}}",
														"{{Firmware-su-released}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "firmware Code-403",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"// Try to get values from the response first\r",
															"try {\r",
															"    const response = pm.response.json();\r",
															"    if (response.appName) {\r",
															"        pm.environment.set(\"appName\", response.appName);\r",
															"    }\r",
															"    if (response.appVersion) {\r",
															"        pm.environment.set(\"appVersion\", response.appVersion);\r",
															"    }\r",
															"} catch (e) {\r",
															"    console.warn(\"No JSON response or missing fields.\");\r",
															"}\r",
															"\r",
															"// Fallback: get values from the request body if not already set\r",
															"if (!pm.environment.get(\"appName\") || !pm.environment.get(\"appVersion\")) {\r",
															"    try {\r",
															"        const requestBody = pm.request.body.raw ? JSON.parse(pm.request.body.raw) : {};\r",
															"        if (requestBody.appName) {\r",
															"            pm.environment.set(\"appName\", requestBody.appName);\r",
															"        }\r",
															"        if (requestBody.appVersion) {\r",
															"            pm.environment.set(\"appVersion\", requestBody.appVersion);\r",
															"        }\r",
															"    } catch (e) {\r",
															"        console.warn(\"Failed to parse request body.\");\r",
															"    }\r",
															"}\r",
															"\r",
															"pm.test(\"Status code is 403\", function () {\r",
															"    pm.response.to.have.status(403);\r",
															"});\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "formdata",
													"formdata": [
														{
															"key": "Criticality",
															"value": "{{criticality_Recommended}}",
															"type": "text"
														},
														{
															"key": "Description",
															"value": "{{Description}}",
															"type": "text"
														},
														{
															"key": "ReleaseNotesUrl",
															"value": "{{ReleaseNotesUrl}}",
															"type": "text"
														},
														{
															"key": "file",
															"type": "file",
															"src": "apc_hw21_su_3-3-0-8.nmc3"
														}
													]
												},
												"url": {
													"raw": "{{Url_firmwareApi}}",
													"host": [
														"{{Url_firmwareApi}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Updating Code-403",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"if (!pm.collectionVariables.get(\"appName\") || !pm.collectionVariables.get(\"appVersion\")) {\r",
															"    throw new Error(\"appName or appVersion is missing. Please run the GET request first.\");\r",
															"}\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 403\", function () {\r",
															"    pm.response.to.have.status(403);\r",
															"});"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"criticality\": \"{{criticality_Optional}}\",\r\n  \"description\": \"{{Description}}\",\r\n  \"releaseNotesUrl\": \"{{ReleaseNotesUrl}}\"\r\n}\r\n\r\n",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{Url_firmwareApi}}/{{appName-su}}/{{Firmware-su-released}}",
													"host": [
														"{{Url_firmwareApi}}"
													],
													"path": [
														"{{appName-su}}",
														"{{Firmware-su-released}}"
													],
													"query": [
														{
															"key": "appName",
															"value": "su",
															"disabled": true
														},
														{
															"key": "appVersion",
															"value": "2.5.5.1",
															"disabled": true
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "get-single Code-200",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{Url_firmwareApi}}/{{appName-su}}/{{Firmware-su-released}}",
													"host": [
														"{{Url_firmwareApi}}"
													],
													"path": [
														"{{appName-su}}",
														"{{Firmware-su-released}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Updating Code-403",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"if (!pm.collectionVariables.get(\"appName\") || !pm.collectionVariables.get(\"appVersion\")) {\r",
															"    throw new Error(\"appName or appVersion is missing. Please run the GET request first.\");\r",
															"}\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 403\", function () {\r",
															"    pm.response.to.have.status(403);\r",
															"});"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"criticality\": \"{{criticality_Optional}}\",\r\n  \"description\": \"{{Description}}\",\r\n  \"releaseNotesUrl\": \"{{ReleaseNotesUrl}}\"\r\n}\r\n\r\n",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{Url_firmwareApi}}/{{appName-su}}/{{Firmware-su-released}}",
													"host": [
														"{{Url_firmwareApi}}"
													],
													"path": [
														"{{appName-su}}",
														"{{Firmware-su-released}}"
													],
													"query": [
														{
															"key": "appName",
															"value": "su",
															"disabled": true
														},
														{
															"key": "appVersion",
															"value": "2.5.5.1",
															"disabled": true
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "get-single Code-200",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{Url_firmwareApi}}/{{appName-su}}/{{Firmware-su-released}}",
													"host": [
														"{{Url_firmwareApi}}"
													],
													"path": [
														"{{appName-su}}",
														"{{Firmware-su-released}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Release Code-403",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 403\", function () {\r",
															"    pm.response.to.have.status(403);\r",
															"});\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"release\": true,\r\n  \"releaseDate\": \"2025-06-26T06:48:50.080876Z\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{Url_firmwareApi}}/{{appName-su}}/{{Firmware-su-released}}/release",
													"host": [
														"{{Url_firmwareApi}}"
													],
													"path": [
														"{{appName-su}}",
														"{{Firmware-su-released}}",
														"release"
													]
												}
											},
											"response": []
										},
										{
											"name": "get-single Code-200",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{Url_firmwareApi}}/{{appName-su}}/{{Firmware-su-released}}",
													"host": [
														"{{Url_firmwareApi}}"
													],
													"path": [
														"{{appName-su}}",
														"{{Firmware-su-released}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "generate Code-200",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"console.log(`Resolved URL: ${pm.variables.get(\"Url_firmwareApi\")}/${pm.collectionVariables.get(\"appName\")}/${pm.collectionVariables.get(\"appVersion\")}/generate`);\r",
															"\r",
															"\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"console.log(\"Response Body:\", pm.response.text());\r",
															"// console.log(\"Response Headers:\", pm.response.headers.toJSON());\r",
															"\r",
															"\r",
															"if (pm.response.code === 404) {\r",
															"    pm.visualizer.set(`<p>No firmware found for the selected version.</p>`);\r",
															"} else {\r",
															"    // existing logic for Content-Disposition\r",
															"}\r",
															"\r",
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"deviceIds\": [\r\n    \"2829866CDE70\"\r\n  ]\r\n}\r\n",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{Url_firmwareApi}}/{{appName-su}}/{{Firmware-su-released}}/generate",
													"host": [
														"{{Url_firmwareApi}}"
													],
													"path": [
														"{{appName-su}}",
														"{{Firmware-su-released}}",
														"generate"
													]
												}
											},
											"response": []
										},
										{
											"name": "stagged Code-403",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 403\", function () {\r",
															"    pm.response.to.have.status(403);\r",
															"});\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"release\": false\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{Url_firmwareApi}}/{{appName-su}}/{{Firmware-su-released}}/release",
													"host": [
														"{{Url_firmwareApi}}"
													],
													"path": [
														"{{appName-su}}",
														"{{Firmware-su-released}}",
														"release"
													]
												}
											},
											"response": []
										},
										{
											"name": "get-single Code-200",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{Url_firmwareApi}}/{{appName-su}}/{{Firmware-su-released}}",
													"host": [
														"{{Url_firmwareApi}}"
													],
													"path": [
														"{{appName-su}}",
														"{{Firmware-su-released}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Deleting Code-403",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"if (!pm.collectionVariables.get(\"appName\") || !pm.collectionVariables.get(\"appVersion\")) {\r",
															"    throw new Error(\"appName or appVersion is missing. Please run the GET request first.\");\r",
															"}\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 403\", function () {\r",
															"    pm.response.to.have.status(403);\r",
															"});"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [],
												"url": {
													"raw": "{{Url_firmwareApi}}/{{appName-su}}/{{Firmware-su-released}}",
													"host": [
														"{{Url_firmwareApi}}"
													],
													"path": [
														"{{appName-su}}",
														"{{Firmware-su-released}}"
													],
													"query": [
														{
															"key": "appName",
															"value": "su",
															"disabled": true
														},
														{
															"key": "appVersion",
															"value": "2.5.5.1",
															"disabled": true
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "get-single Code-200",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{Url_firmwareApi}}/{{appName-su}}/{{Firmware-su-released}}",
													"host": [
														"{{Url_firmwareApi}}"
													],
													"path": [
														"{{appName-su}}",
														"{{Firmware-su-released}}"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Firmware API_sy stagged schduled",
									"item": [
										{
											"name": "get-all Code-200",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"// pm.test(\"Status code is 200\", function () {\r",
															"//     pm.response.to.have.status(200);\r",
															"// });\r",
															"\r",
															"// // // Parse response\r",
															"// // let firmwareList = pm.response.json();\r",
															"\r",
															"// // // Randomly select one firmware entry\r",
															"// // let selected = firmwareList[Math.floor(Math.random() * firmwareList.length)];\r",
															"\r",
															"// // // Set variables for next request\r",
															"// // pm.collectionVariables.set(\"appName\", selected.appName);\r",
															"// // pm.collectionVariables.set(\"appVersion\", selected.appVersion);\r",
															"\r",
															"// // console.log(\"Selected firmware:\", selected.appName, selected.appVersion);\r",
															"\r",
															"// let firmwareList = pm.response.json();\r",
															"\r",
															"// // Filter entries that have valid appName and appVersion\r",
															"// let validEntries = firmwareList.filter(fw => fw.appName && fw.appVersion);\r",
															"\r",
															"// // Randomly select one\r",
															"// let selected = validEntries[Math.floor(Math.random() * validEntries.length)];\r",
															"\r",
															"// pm.collectionVariables.set(\"appName\", selected.appName);\r",
															"// pm.collectionVariables.set(\"appVersion\", selected.appVersion);\r",
															"\r",
															"// console.log(\"Selected firmware:\", selected.appName, selected.appVersion);\r",
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{Url_firmwareApi}}",
													"host": [
														"{{Url_firmwareApi}}"
													],
													"query": [
														{
															"key": "snst",
															"value": null,
															"disabled": true
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "get-single Code-200",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 404\", function () {\r",
															"    pm.response.to.have.status(404);\r",
															"});\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{Url_firmwareApi}}/{{appName-sy}}/{{Firmware-sy-stagged}}",
													"host": [
														"{{Url_firmwareApi}}"
													],
													"path": [
														"{{appName-sy}}",
														"{{Firmware-sy-stagged}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "firmware Code-403",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"// Try to get values from the response first\r",
															"try {\r",
															"    const response = pm.response.json();\r",
															"    if (response.appName) {\r",
															"        pm.environment.set(\"appName\", response.appName);\r",
															"    }\r",
															"    if (response.appVersion) {\r",
															"        pm.environment.set(\"appVersion\", response.appVersion);\r",
															"    }\r",
															"} catch (e) {\r",
															"    console.warn(\"No JSON response or missing fields.\");\r",
															"}\r",
															"\r",
															"// Fallback: get values from the request body if not already set\r",
															"if (!pm.environment.get(\"appName\") || !pm.environment.get(\"appVersion\")) {\r",
															"    try {\r",
															"        const requestBody = pm.request.body.raw ? JSON.parse(pm.request.body.raw) : {};\r",
															"        if (requestBody.appName) {\r",
															"            pm.environment.set(\"appName\", requestBody.appName);\r",
															"        }\r",
															"        if (requestBody.appVersion) {\r",
															"            pm.environment.set(\"appVersion\", requestBody.appVersion);\r",
															"        }\r",
															"    } catch (e) {\r",
															"        console.warn(\"Failed to parse request body.\");\r",
															"    }\r",
															"}\r",
															"\r",
															"pm.test(\"Status code is 403\", function () {\r",
															"    pm.response.to.have.status(403);\r",
															"});\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "formdata",
													"formdata": [
														{
															"key": "Criticality",
															"value": "{{criticality_Recommended}}",
															"type": "text"
														},
														{
															"key": "Description",
															"value": "{{Description}}",
															"type": "text"
														},
														{
															"key": "ReleaseNotesUrl",
															"value": "{{ReleaseNotesUrl}}",
															"type": "text"
														},
														{
															"key": "file",
															"type": "file",
															"src": "apc_hw21_su_3-3-0-8.nmc3"
														}
													]
												},
												"url": {
													"raw": "{{Url_firmwareApi}}",
													"host": [
														"{{Url_firmwareApi}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Updating Code-403",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"if (!pm.collectionVariables.get(\"appName\") || !pm.collectionVariables.get(\"appVersion\")) {\r",
															"    throw new Error(\"appName or appVersion is missing. Please run the GET request first.\");\r",
															"}\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 403\", function () {\r",
															"    pm.response.to.have.status(403);\r",
															"});"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"criticality\": \"{{criticality_Optional}}\",\r\n  \"description\": \"{{Description}}\",\r\n  \"releaseNotesUrl\": \"{{ReleaseNotesUrl}}\"\r\n}\r\n\r\n",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{Url_firmwareApi}}/{{appName-sy}}/{{Firmware-sy-stagged}}",
													"host": [
														"{{Url_firmwareApi}}"
													],
													"path": [
														"{{appName-sy}}",
														"{{Firmware-sy-stagged}}"
													],
													"query": [
														{
															"key": "appName",
															"value": "su",
															"disabled": true
														},
														{
															"key": "appVersion",
															"value": "2.5.5.1",
															"disabled": true
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "get-single Code-404",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 404\", function () {\r",
															"    pm.response.to.have.status(404);\r",
															"});\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{Url_firmwareApi}}/{{appName-sy}}/{{Firmware-sy-stagged}}",
													"host": [
														"{{Url_firmwareApi}}"
													],
													"path": [
														"{{appName-sy}}",
														"{{Firmware-sy-stagged}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Updating Code-403",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"if (!pm.collectionVariables.get(\"appName\") || !pm.collectionVariables.get(\"appVersion\")) {\r",
															"    throw new Error(\"appName or appVersion is missing. Please run the GET request first.\");\r",
															"}\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 403\", function () {\r",
															"    pm.response.to.have.status(403);\r",
															"});"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"criticality\": \"{{criticality_Optional}}\",\r\n  \"description\": \"{{Description}}\",\r\n  \"releaseNotesUrl\": \"{{ReleaseNotesUrl}}\"\r\n}\r\n\r\n",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{Url_firmwareApi}}/{{appName-sy}}/{{Firmware-sy-stagged}}",
													"host": [
														"{{Url_firmwareApi}}"
													],
													"path": [
														"{{appName-sy}}",
														"{{Firmware-sy-stagged}}"
													],
													"query": [
														{
															"key": "appName",
															"value": "su",
															"disabled": true
														},
														{
															"key": "appVersion",
															"value": "2.5.5.1",
															"disabled": true
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "get-single Code-404",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 404\", function () {\r",
															"    pm.response.to.have.status(404);\r",
															"});\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{Url_firmwareApi}}/{{appName-sy}}/{{Firmware-sy-stagged}}",
													"host": [
														"{{Url_firmwareApi}}"
													],
													"path": [
														"{{appName-sy}}",
														"{{Firmware-sy-stagged}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Release Code-403",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 403\", function () {\r",
															"    pm.response.to.have.status(403);\r",
															"});\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"release\": true,\r\n  \"releaseDate\": \"2025-06-26T06:48:50.080876Z\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{Url_firmwareApi}}/{{appName-sy}}/{{Firmware-sy-stagged}}/release",
													"host": [
														"{{Url_firmwareApi}}"
													],
													"path": [
														"{{appName-sy}}",
														"{{Firmware-sy-stagged}}",
														"release"
													]
												}
											},
											"response": []
										},
										{
											"name": "get-single Code-404",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 404\", function () {\r",
															"    pm.response.to.have.status(404);\r",
															"});\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{Url_firmwareApi}}/{{appName-sy}}/{{Firmware-sy-stagged}}",
													"host": [
														"{{Url_firmwareApi}}"
													],
													"path": [
														"{{appName-sy}}",
														"{{Firmware-sy-stagged}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "generate Code-404",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"console.log(`Resolved URL: ${pm.variables.get(\"Url_firmwareApi\")}/${pm.collectionVariables.get(\"appName\")}/${pm.collectionVariables.get(\"appVersion\")}/generate`);\r",
															"\r",
															"\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"console.log(\"Response Body:\", pm.response.text());\r",
															"// console.log(\"Response Headers:\", pm.response.headers.toJSON());\r",
															"\r",
															"\r",
															"if (pm.response.code === 404) {\r",
															"    pm.visualizer.set(`<p>No firmware found for the selected version.</p>`);\r",
															"} else {\r",
															"    // existing logic for Content-Disposition\r",
															"}\r",
															"\r",
															"pm.test(\"Status code is 404\", function () {\r",
															"    pm.response.to.have.status(404);\r",
															"});\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"deviceIds\": [\r\n    \"2829866CDE70\"\r\n  ]\r\n}\r\n",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{Url_firmwareApi}}/{{appName-sy}}/{{Firmware-sy-stagged}}/generate",
													"host": [
														"{{Url_firmwareApi}}"
													],
													"path": [
														"{{appName-sy}}",
														"{{Firmware-sy-stagged}}",
														"generate"
													]
												}
											},
											"response": []
										},
										{
											"name": "stagged Code-403",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 403\", function () {\r",
															"    pm.response.to.have.status(403);\r",
															"});\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"release\": false\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{Url_firmwareApi}}/{{appName-sy}}/{{Firmware-sy-stagged}}/release",
													"host": [
														"{{Url_firmwareApi}}"
													],
													"path": [
														"{{appName-sy}}",
														"{{Firmware-sy-stagged}}",
														"release"
													]
												}
											},
											"response": []
										},
										{
											"name": "get-single Code-404",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 404\", function () {\r",
															"    pm.response.to.have.status(404);\r",
															"});\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{Url_firmwareApi}}/{{appName-sy}}/{{Firmware-sy-stagged}}",
													"host": [
														"{{Url_firmwareApi}}"
													],
													"path": [
														"{{appName-sy}}",
														"{{Firmware-sy-stagged}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Deleting Code-403",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"if (!pm.collectionVariables.get(\"appName\") || !pm.collectionVariables.get(\"appVersion\")) {\r",
															"    throw new Error(\"appName or appVersion is missing. Please run the GET request first.\");\r",
															"}\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 403\", function () {\r",
															"    pm.response.to.have.status(403);\r",
															"});"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [],
												"url": {
													"raw": "{{Url_firmwareApi}}/{{appName-sy}}/{{Firmware-sy-stagged}}",
													"host": [
														"{{Url_firmwareApi}}"
													],
													"path": [
														"{{appName-sy}}",
														"{{Firmware-sy-stagged}}"
													],
													"query": [
														{
															"key": "appName",
															"value": "su",
															"disabled": true
														},
														{
															"key": "appVersion",
															"value": "2.5.5.1",
															"disabled": true
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "get-single Copy5 Code-404",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 404\", function () {\r",
															"    pm.response.to.have.status(404);\r",
															"});\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{Url_firmwareApi}}/{{appName-sy}}/{{Firmware-sy-stagged}}",
													"host": [
														"{{Url_firmwareApi}}"
													],
													"path": [
														"{{appName-sy}}",
														"{{Firmware-sy-stagged}}"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Firmware API_sy released",
									"item": [
										{
											"name": "get-all Code-200",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"// pm.test(\"Status code is 200\", function () {\r",
															"//     pm.response.to.have.status(200);\r",
															"// });\r",
															"\r",
															"// // // Parse response\r",
															"// // let firmwareList = pm.response.json();\r",
															"\r",
															"// // // Randomly select one firmware entry\r",
															"// // let selected = firmwareList[Math.floor(Math.random() * firmwareList.length)];\r",
															"\r",
															"// // // Set variables for next request\r",
															"// // pm.collectionVariables.set(\"appName\", selected.appName);\r",
															"// // pm.collectionVariables.set(\"appVersion\", selected.appVersion);\r",
															"\r",
															"// // console.log(\"Selected firmware:\", selected.appName, selected.appVersion);\r",
															"\r",
															"// let firmwareList = pm.response.json();\r",
															"\r",
															"// // Filter entries that have valid appName and appVersion\r",
															"// let validEntries = firmwareList.filter(fw => fw.appName && fw.appVersion);\r",
															"\r",
															"// // Randomly select one\r",
															"// let selected = validEntries[Math.floor(Math.random() * validEntries.length)];\r",
															"\r",
															"// pm.collectionVariables.set(\"appName\", selected.appName);\r",
															"// pm.collectionVariables.set(\"appVersion\", selected.appVersion);\r",
															"\r",
															"// console.log(\"Selected firmware:\", selected.appName, selected.appVersion);\r",
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{Url_firmwareApi}}",
													"host": [
														"{{Url_firmwareApi}}"
													],
													"query": [
														{
															"key": "snst",
															"value": null,
															"disabled": true
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "get-single Code-200",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{Url_firmwareApi}}/{{appName-sy}}/{{Firmware-sy-released}}",
													"host": [
														"{{Url_firmwareApi}}"
													],
													"path": [
														"{{appName-sy}}",
														"{{Firmware-sy-released}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "firmware Code-403",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"// Try to get values from the response first\r",
															"try {\r",
															"    const response = pm.response.json();\r",
															"    if (response.appName) {\r",
															"        pm.environment.set(\"appName\", response.appName);\r",
															"    }\r",
															"    if (response.appVersion) {\r",
															"        pm.environment.set(\"appVersion\", response.appVersion);\r",
															"    }\r",
															"} catch (e) {\r",
															"    console.warn(\"No JSON response or missing fields.\");\r",
															"}\r",
															"\r",
															"// Fallback: get values from the request body if not already set\r",
															"if (!pm.environment.get(\"appName\") || !pm.environment.get(\"appVersion\")) {\r",
															"    try {\r",
															"        const requestBody = pm.request.body.raw ? JSON.parse(pm.request.body.raw) : {};\r",
															"        if (requestBody.appName) {\r",
															"            pm.environment.set(\"appName\", requestBody.appName);\r",
															"        }\r",
															"        if (requestBody.appVersion) {\r",
															"            pm.environment.set(\"appVersion\", requestBody.appVersion);\r",
															"        }\r",
															"    } catch (e) {\r",
															"        console.warn(\"Failed to parse request body.\");\r",
															"    }\r",
															"}\r",
															"\r",
															"pm.test(\"Status code is 403\", function () {\r",
															"    pm.response.to.have.status(403);\r",
															"});\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "formdata",
													"formdata": [
														{
															"key": "Criticality",
															"value": "{{criticality_Recommended}}",
															"type": "text"
														},
														{
															"key": "Description",
															"value": "{{Description}}",
															"type": "text"
														},
														{
															"key": "ReleaseNotesUrl",
															"value": "{{ReleaseNotesUrl}}",
															"type": "text"
														},
														{
															"key": "file",
															"type": "file",
															"src": "apc_hw21_su_3-3-0-8.nmc3"
														}
													]
												},
												"url": {
													"raw": "{{Url_firmwareApi}}",
													"host": [
														"{{Url_firmwareApi}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Updating Code-403",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"if (!pm.collectionVariables.get(\"appName\") || !pm.collectionVariables.get(\"appVersion\")) {\r",
															"    throw new Error(\"appName or appVersion is missing. Please run the GET request first.\");\r",
															"}\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 403\", function () {\r",
															"    pm.response.to.have.status(403);\r",
															"});"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"criticality\": \"{{criticality_Optional}}\",\r\n  \"description\": \"{{Description}}\",\r\n  \"releaseNotesUrl\": \"{{ReleaseNotesUrl}}\"\r\n}\r\n\r\n",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{Url_firmwareApi}}/{{appName-sy}}/{{Firmware-sy-released}}",
													"host": [
														"{{Url_firmwareApi}}"
													],
													"path": [
														"{{appName-sy}}",
														"{{Firmware-sy-released}}"
													],
													"query": [
														{
															"key": "appName",
															"value": "su",
															"disabled": true
														},
														{
															"key": "appVersion",
															"value": "2.5.5.1",
															"disabled": true
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "get-single Code-200",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{Url_firmwareApi}}/{{appName-sy}}/{{Firmware-sy-released}}",
													"host": [
														"{{Url_firmwareApi}}"
													],
													"path": [
														"{{appName-sy}}",
														"{{Firmware-sy-released}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Updating Code-403",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"if (!pm.collectionVariables.get(\"appName\") || !pm.collectionVariables.get(\"appVersion\")) {\r",
															"    throw new Error(\"appName or appVersion is missing. Please run the GET request first.\");\r",
															"}\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 403\", function () {\r",
															"    pm.response.to.have.status(403);\r",
															"});"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"criticality\": \"{{criticality_Optional}}\",\r\n  \"description\": \"{{Description}}\",\r\n  \"releaseNotesUrl\": \"{{ReleaseNotesUrl}}\"\r\n}\r\n\r\n",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{Url_firmwareApi}}/{{appName-sy}}/{{Firmware-sy-released}}",
													"host": [
														"{{Url_firmwareApi}}"
													],
													"path": [
														"{{appName-sy}}",
														"{{Firmware-sy-released}}"
													],
													"query": [
														{
															"key": "appName",
															"value": "su",
															"disabled": true
														},
														{
															"key": "appVersion",
															"value": "2.5.5.1",
															"disabled": true
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "get-single Code-200",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{Url_firmwareApi}}/{{appName-sy}}/{{Firmware-sy-released}}",
													"host": [
														"{{Url_firmwareApi}}"
													],
													"path": [
														"{{appName-sy}}",
														"{{Firmware-sy-released}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Release Code-403",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 403\", function () {\r",
															"    pm.response.to.have.status(403);\r",
															"});\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"release\": true,\r\n  \"releaseDate\": \"2025-06-26T06:48:50.080876Z\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{Url_firmwareApi}}/{{appName-sy}}/{{Firmware-sy-released}}/release",
													"host": [
														"{{Url_firmwareApi}}"
													],
													"path": [
														"{{appName-sy}}",
														"{{Firmware-sy-released}}",
														"release"
													]
												}
											},
											"response": []
										},
										{
											"name": "get-single Code-200",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{Url_firmwareApi}}/{{appName-sy}}/{{Firmware-sy-released}}",
													"host": [
														"{{Url_firmwareApi}}"
													],
													"path": [
														"{{appName-sy}}",
														"{{Firmware-sy-released}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "generate Code-200",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"console.log(`Resolved URL: ${pm.variables.get(\"Url_firmwareApi\")}/${pm.collectionVariables.get(\"appName\")}/${pm.collectionVariables.get(\"appVersion\")}/generate`);\r",
															"\r",
															"\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"console.log(\"Response Body:\", pm.response.text());\r",
															"// console.log(\"Response Headers:\", pm.response.headers.toJSON());\r",
															"\r",
															"\r",
															"if (pm.response.code === 404) {\r",
															"    pm.visualizer.set(`<p>No firmware found for the selected version.</p>`);\r",
															"} else {\r",
															"    // existing logic for Content-Disposition\r",
															"}\r",
															"\r",
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"deviceIds\": [\r\n    \"2829866CDE70\"\r\n  ]\r\n}\r\n",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{Url_firmwareApi}}/{{appName-sy}}/{{Firmware-sy-released}}/generate",
													"host": [
														"{{Url_firmwareApi}}"
													],
													"path": [
														"{{appName-sy}}",
														"{{Firmware-sy-released}}",
														"generate"
													]
												}
											},
											"response": []
										},
										{
											"name": "stagged Code-403",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 403\", function () {\r",
															"    pm.response.to.have.status(403);\r",
															"});\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"release\": false\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{Url_firmwareApi}}/{{appName-sy}}/{{Firmware-sy-released}}/release",
													"host": [
														"{{Url_firmwareApi}}"
													],
													"path": [
														"{{appName-sy}}",
														"{{Firmware-sy-released}}",
														"release"
													]
												}
											},
											"response": []
										},
										{
											"name": "get-single Code-200",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{Url_firmwareApi}}/{{appName-sy}}/{{Firmware-sy-released}}",
													"host": [
														"{{Url_firmwareApi}}"
													],
													"path": [
														"{{appName-sy}}",
														"{{Firmware-sy-released}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Deleting Code-403",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"if (!pm.collectionVariables.get(\"appName\") || !pm.collectionVariables.get(\"appVersion\")) {\r",
															"    throw new Error(\"appName or appVersion is missing. Please run the GET request first.\");\r",
															"}\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 403\", function () {\r",
															"    pm.response.to.have.status(403);\r",
															"});"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [],
												"url": {
													"raw": "{{Url_firmwareApi}}/{{appName-sy}}/{{Firmware-sy-released}}",
													"host": [
														"{{Url_firmwareApi}}"
													],
													"path": [
														"{{appName-sy}}",
														"{{Firmware-sy-released}}"
													],
													"query": [
														{
															"key": "appName",
															"value": "su",
															"disabled": true
														},
														{
															"key": "appVersion",
															"value": "2.5.5.1",
															"disabled": true
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "get-single Code-200",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{Url_firmwareApi}}/{{appName-sy}}/{{Firmware-sy-released}}",
													"host": [
														"{{Url_firmwareApi}}"
													],
													"path": [
														"{{appName-sy}}",
														"{{Firmware-sy-released}}"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Firmware API_sucan stagged schduled",
									"item": [
										{
											"name": "get-all Code-200",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"// pm.test(\"Status code is 200\", function () {\r",
															"//     pm.response.to.have.status(200);\r",
															"// });\r",
															"\r",
															"// // // Parse response\r",
															"// // let firmwareList = pm.response.json();\r",
															"\r",
															"// // // Randomly select one firmware entry\r",
															"// // let selected = firmwareList[Math.floor(Math.random() * firmwareList.length)];\r",
															"\r",
															"// // // Set variables for next request\r",
															"// // pm.collectionVariables.set(\"appName\", selected.appName);\r",
															"// // pm.collectionVariables.set(\"appVersion\", selected.appVersion);\r",
															"\r",
															"// // console.log(\"Selected firmware:\", selected.appName, selected.appVersion);\r",
															"\r",
															"// let firmwareList = pm.response.json();\r",
															"\r",
															"// // Filter entries that have valid appName and appVersion\r",
															"// let validEntries = firmwareList.filter(fw => fw.appName && fw.appVersion);\r",
															"\r",
															"// // Randomly select one\r",
															"// let selected = validEntries[Math.floor(Math.random() * validEntries.length)];\r",
															"\r",
															"// pm.collectionVariables.set(\"appName\", selected.appName);\r",
															"// pm.collectionVariables.set(\"appVersion\", selected.appVersion);\r",
															"\r",
															"// console.log(\"Selected firmware:\", selected.appName, selected.appVersion);\r",
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{Url_firmwareApi}}",
													"host": [
														"{{Url_firmwareApi}}"
													],
													"query": [
														{
															"key": "snst",
															"value": null,
															"disabled": true
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "get-single Code-404",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 404\", function () {\r",
															"    pm.response.to.have.status(404);\r",
															"});\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{Url_firmwareApi}}/{{appName-sucan}}/{{Firmware-sucan-stagged}}",
													"host": [
														"{{Url_firmwareApi}}"
													],
													"path": [
														"{{appName-sucan}}",
														"{{Firmware-sucan-stagged}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "firmware Code-403",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"// Try to get values from the response first\r",
															"try {\r",
															"    const response = pm.response.json();\r",
															"    if (response.appName) {\r",
															"        pm.environment.set(\"appName\", response.appName);\r",
															"    }\r",
															"    if (response.appVersion) {\r",
															"        pm.environment.set(\"appVersion\", response.appVersion);\r",
															"    }\r",
															"} catch (e) {\r",
															"    console.warn(\"No JSON response or missing fields.\");\r",
															"}\r",
															"\r",
															"// Fallback: get values from the request body if not already set\r",
															"if (!pm.environment.get(\"appName\") || !pm.environment.get(\"appVersion\")) {\r",
															"    try {\r",
															"        const requestBody = pm.request.body.raw ? JSON.parse(pm.request.body.raw) : {};\r",
															"        if (requestBody.appName) {\r",
															"            pm.environment.set(\"appName\", requestBody.appName);\r",
															"        }\r",
															"        if (requestBody.appVersion) {\r",
															"            pm.environment.set(\"appVersion\", requestBody.appVersion);\r",
															"        }\r",
															"    } catch (e) {\r",
															"        console.warn(\"Failed to parse request body.\");\r",
															"    }\r",
															"}\r",
															"\r",
															"pm.test(\"Status code is 403\", function () {\r",
															"    pm.response.to.have.status(403);\r",
															"});\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "formdata",
													"formdata": [
														{
															"key": "Criticality",
															"value": "{{criticality_Recommended}}",
															"type": "text"
														},
														{
															"key": "Description",
															"value": "{{Description}}",
															"type": "text"
														},
														{
															"key": "ReleaseNotesUrl",
															"value": "{{ReleaseNotesUrl}}",
															"type": "text"
														},
														{
															"key": "file",
															"type": "file",
															"src": "apc_hw21_su_3-3-0-8.nmc3"
														}
													]
												},
												"url": {
													"raw": "{{Url_firmwareApi}}",
													"host": [
														"{{Url_firmwareApi}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Updating Code-403",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"if (!pm.collectionVariables.get(\"appName\") || !pm.collectionVariables.get(\"appVersion\")) {\r",
															"    throw new Error(\"appName or appVersion is missing. Please run the GET request first.\");\r",
															"}\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 403\", function () {\r",
															"    pm.response.to.have.status(403);\r",
															"});"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"criticality\": \"{{criticality_Optional}}\",\r\n  \"description\": \"{{Description}}\",\r\n  \"releaseNotesUrl\": \"{{ReleaseNotesUrl}}\"\r\n}\r\n\r\n",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{Url_firmwareApi}}/{{appName-sucan}}/{{Firmware-sucan-stagged}}",
													"host": [
														"{{Url_firmwareApi}}"
													],
													"path": [
														"{{appName-sucan}}",
														"{{Firmware-sucan-stagged}}"
													],
													"query": [
														{
															"key": "appName",
															"value": "su",
															"disabled": true
														},
														{
															"key": "appVersion",
															"value": "2.5.5.1",
															"disabled": true
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "get-single Code-404",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 404\", function () {\r",
															"    pm.response.to.have.status(404);\r",
															"});\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{Url_firmwareApi}}/{{appName-sucan}}/{{Firmware-sucan-stagged}}",
													"host": [
														"{{Url_firmwareApi}}"
													],
													"path": [
														"{{appName-sucan}}",
														"{{Firmware-sucan-stagged}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Updating Code-403",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"if (!pm.collectionVariables.get(\"appName\") || !pm.collectionVariables.get(\"appVersion\")) {\r",
															"    throw new Error(\"appName or appVersion is missing. Please run the GET request first.\");\r",
															"}\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 403\", function () {\r",
															"    pm.response.to.have.status(403);\r",
															"});"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"criticality\": \"{{criticality_Optional}}\",\r\n  \"description\": \"{{Description}}\",\r\n  \"releaseNotesUrl\": \"{{ReleaseNotesUrl}}\"\r\n}\r\n\r\n",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{Url_firmwareApi}}/{{appName-sucan}}/{{Firmware-sucan-stagged}}",
													"host": [
														"{{Url_firmwareApi}}"
													],
													"path": [
														"{{appName-sucan}}",
														"{{Firmware-sucan-stagged}}"
													],
													"query": [
														{
															"key": "appName",
															"value": "su",
															"disabled": true
														},
														{
															"key": "appVersion",
															"value": "2.5.5.1",
															"disabled": true
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "get-single Code-404",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 404\", function () {\r",
															"    pm.response.to.have.status(404);\r",
															"});\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{Url_firmwareApi}}/{{appName-sucan}}/{{Firmware-sucan-stagged}}",
													"host": [
														"{{Url_firmwareApi}}"
													],
													"path": [
														"{{appName-sucan}}",
														"{{Firmware-sucan-stagged}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Release Code-403",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 403\", function () {\r",
															"    pm.response.to.have.status(403);\r",
															"});\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"release\": true,\r\n  \"releaseDate\": \"2025-06-26T06:48:50.080876Z\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{Url_firmwareApi}}/{{appName-sucan}}/{{Firmware-sucan-stagged}}/release",
													"host": [
														"{{Url_firmwareApi}}"
													],
													"path": [
														"{{appName-sucan}}",
														"{{Firmware-sucan-stagged}}",
														"release"
													]
												}
											},
											"response": []
										},
										{
											"name": "get-single Code-404",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 404\", function () {\r",
															"    pm.response.to.have.status(404);\r",
															"});\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{Url_firmwareApi}}/{{appName-sucan}}/{{Firmware-sucan-stagged}}",
													"host": [
														"{{Url_firmwareApi}}"
													],
													"path": [
														"{{appName-sucan}}",
														"{{Firmware-sucan-stagged}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "generate Code-404",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"console.log(`Resolved URL: ${pm.variables.get(\"Url_firmwareApi\")}/${pm.collectionVariables.get(\"appName\")}/${pm.collectionVariables.get(\"appVersion\")}/generate`);\r",
															"\r",
															"\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"console.log(\"Response Body:\", pm.response.text());\r",
															"// console.log(\"Response Headers:\", pm.response.headers.toJSON());\r",
															"\r",
															"\r",
															"if (pm.response.code === 404) {\r",
															"    pm.visualizer.set(`<p>No firmware found for the selected version.</p>`);\r",
															"} else {\r",
															"    // existing logic for Content-Disposition\r",
															"}\r",
															"\r",
															"pm.test(\"Status code is 404\", function () {\r",
															"    pm.response.to.have.status(404);\r",
															"});\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"deviceIds\": [\r\n    \"2829866CDE70\"\r\n  ]\r\n}\r\n",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{Url_firmwareApi}}/{{appName-sucan}}/{{Firmware-sucan-stagged}}/generate",
													"host": [
														"{{Url_firmwareApi}}"
													],
													"path": [
														"{{appName-sucan}}",
														"{{Firmware-sucan-stagged}}",
														"generate"
													]
												}
											},
											"response": []
										},
										{
											"name": "stagged Code-403",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 403\", function () {\r",
															"    pm.response.to.have.status(403);\r",
															"});\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"release\": false\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{Url_firmwareApi}}/{{appName-sucan}}/{{Firmware-sucan-stagged}}/release",
													"host": [
														"{{Url_firmwareApi}}"
													],
													"path": [
														"{{appName-sucan}}",
														"{{Firmware-sucan-stagged}}",
														"release"
													]
												}
											},
											"response": []
										},
										{
											"name": "get-single Code-404",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 404\", function () {\r",
															"    pm.response.to.have.status(404);\r",
															"});\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{Url_firmwareApi}}/{{appName-sucan}}/{{Firmware-sucan-stagged}}",
													"host": [
														"{{Url_firmwareApi}}"
													],
													"path": [
														"{{appName-sucan}}",
														"{{Firmware-sucan-stagged}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Deleting Code-403",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"if (!pm.collectionVariables.get(\"appName\") || !pm.collectionVariables.get(\"appVersion\")) {\r",
															"    throw new Error(\"appName or appVersion is missing. Please run the GET request first.\");\r",
															"}\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 403\", function () {\r",
															"    pm.response.to.have.status(403);\r",
															"});"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [],
												"url": {
													"raw": "{{Url_firmwareApi}}/{{appName-sucan}}/{{Firmware-sucan-stagged}}",
													"host": [
														"{{Url_firmwareApi}}"
													],
													"path": [
														"{{appName-sucan}}",
														"{{Firmware-sucan-stagged}}"
													],
													"query": [
														{
															"key": "appName",
															"value": "su",
															"disabled": true
														},
														{
															"key": "appVersion",
															"value": "2.5.5.1",
															"disabled": true
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "get-single Copy5 Code-404",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 404\", function () {\r",
															"    pm.response.to.have.status(404);\r",
															"});\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{Url_firmwareApi}}/{{appName-sucan}}/{{Firmware-sucan-stagged}}",
													"host": [
														"{{Url_firmwareApi}}"
													],
													"path": [
														"{{appName-sucan}}",
														"{{Firmware-sucan-stagged}}"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Firmware API_sucan released",
									"item": [
										{
											"name": "get-all Code-200",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"// pm.test(\"Status code is 200\", function () {\r",
															"//     pm.response.to.have.status(200);\r",
															"// });\r",
															"\r",
															"// // // Parse response\r",
															"// // let firmwareList = pm.response.json();\r",
															"\r",
															"// // // Randomly select one firmware entry\r",
															"// // let selected = firmwareList[Math.floor(Math.random() * firmwareList.length)];\r",
															"\r",
															"// // // Set variables for next request\r",
															"// // pm.collectionVariables.set(\"appName\", selected.appName);\r",
															"// // pm.collectionVariables.set(\"appVersion\", selected.appVersion);\r",
															"\r",
															"// // console.log(\"Selected firmware:\", selected.appName, selected.appVersion);\r",
															"\r",
															"// let firmwareList = pm.response.json();\r",
															"\r",
															"// // Filter entries that have valid appName and appVersion\r",
															"// let validEntries = firmwareList.filter(fw => fw.appName && fw.appVersion);\r",
															"\r",
															"// // Randomly select one\r",
															"// let selected = validEntries[Math.floor(Math.random() * validEntries.length)];\r",
															"\r",
															"// pm.collectionVariables.set(\"appName\", selected.appName);\r",
															"// pm.collectionVariables.set(\"appVersion\", selected.appVersion);\r",
															"\r",
															"// console.log(\"Selected firmware:\", selected.appName, selected.appVersion);\r",
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{Url_firmwareApi}}",
													"host": [
														"{{Url_firmwareApi}}"
													],
													"query": [
														{
															"key": "snst",
															"value": null,
															"disabled": true
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "get-single Code-200",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{Url_firmwareApi}}/{{appName-sucan}}/{{Firmware-sucan-released}}",
													"host": [
														"{{Url_firmwareApi}}"
													],
													"path": [
														"{{appName-sucan}}",
														"{{Firmware-sucan-released}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "firmware Code-403",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"// Try to get values from the response first\r",
															"try {\r",
															"    const response = pm.response.json();\r",
															"    if (response.appName) {\r",
															"        pm.environment.set(\"appName\", response.appName);\r",
															"    }\r",
															"    if (response.appVersion) {\r",
															"        pm.environment.set(\"appVersion\", response.appVersion);\r",
															"    }\r",
															"} catch (e) {\r",
															"    console.warn(\"No JSON response or missing fields.\");\r",
															"}\r",
															"\r",
															"// Fallback: get values from the request body if not already set\r",
															"if (!pm.environment.get(\"appName\") || !pm.environment.get(\"appVersion\")) {\r",
															"    try {\r",
															"        const requestBody = pm.request.body.raw ? JSON.parse(pm.request.body.raw) : {};\r",
															"        if (requestBody.appName) {\r",
															"            pm.environment.set(\"appName\", requestBody.appName);\r",
															"        }\r",
															"        if (requestBody.appVersion) {\r",
															"            pm.environment.set(\"appVersion\", requestBody.appVersion);\r",
															"        }\r",
															"    } catch (e) {\r",
															"        console.warn(\"Failed to parse request body.\");\r",
															"    }\r",
															"}\r",
															"\r",
															"pm.test(\"Status code is 403\", function () {\r",
															"    pm.response.to.have.status(403);\r",
															"});\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "formdata",
													"formdata": [
														{
															"key": "Criticality",
															"value": "{{criticality_Recommended}}",
															"type": "text"
														},
														{
															"key": "Description",
															"value": "{{Description}}",
															"type": "text"
														},
														{
															"key": "ReleaseNotesUrl",
															"value": "{{ReleaseNotesUrl}}",
															"type": "text"
														},
														{
															"key": "file",
															"type": "file",
															"src": "apc_hw21_su_3-3-0-8.nmc3"
														}
													]
												},
												"url": {
													"raw": "{{Url_firmwareApi}}",
													"host": [
														"{{Url_firmwareApi}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Updating Code-403",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"if (!pm.collectionVariables.get(\"appName\") || !pm.collectionVariables.get(\"appVersion\")) {\r",
															"    throw new Error(\"appName or appVersion is missing. Please run the GET request first.\");\r",
															"}\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 403\", function () {\r",
															"    pm.response.to.have.status(403);\r",
															"});"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"criticality\": \"{{criticality_Optional}}\",\r\n  \"description\": \"{{Description}}\",\r\n  \"releaseNotesUrl\": \"{{ReleaseNotesUrl}}\"\r\n}\r\n\r\n",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{Url_firmwareApi}}/{{appName-sucan}}/{{Firmware-sucan-released}}",
													"host": [
														"{{Url_firmwareApi}}"
													],
													"path": [
														"{{appName-sucan}}",
														"{{Firmware-sucan-released}}"
													],
													"query": [
														{
															"key": "appName",
															"value": "su",
															"disabled": true
														},
														{
															"key": "appVersion",
															"value": "2.5.5.1",
															"disabled": true
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "get-single Code-200",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{Url_firmwareApi}}/{{appName-sucan}}/{{Firmware-sucan-released}}",
													"host": [
														"{{Url_firmwareApi}}"
													],
													"path": [
														"{{appName-sucan}}",
														"{{Firmware-sucan-released}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Updating Code-403",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"if (!pm.collectionVariables.get(\"appName\") || !pm.collectionVariables.get(\"appVersion\")) {\r",
															"    throw new Error(\"appName or appVersion is missing. Please run the GET request first.\");\r",
															"}\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 403\", function () {\r",
															"    pm.response.to.have.status(403);\r",
															"});"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"criticality\": \"{{criticality_Optional}}\",\r\n  \"description\": \"{{Description}}\",\r\n  \"releaseNotesUrl\": \"{{ReleaseNotesUrl}}\"\r\n}\r\n\r\n",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{Url_firmwareApi}}/{{appName-sucan}}/{{Firmware-sucan-released}}",
													"host": [
														"{{Url_firmwareApi}}"
													],
													"path": [
														"{{appName-sucan}}",
														"{{Firmware-sucan-released}}"
													],
													"query": [
														{
															"key": "appName",
															"value": "su",
															"disabled": true
														},
														{
															"key": "appVersion",
															"value": "2.5.5.1",
															"disabled": true
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "get-single Code-200",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{Url_firmwareApi}}/{{appName-sucan}}/{{Firmware-sucan-released}}",
													"host": [
														"{{Url_firmwareApi}}"
													],
													"path": [
														"{{appName-sucan}}",
														"{{Firmware-sucan-released}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Release Code-403",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 403\", function () {\r",
															"    pm.response.to.have.status(403);\r",
															"});\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"release\": true,\r\n  \"releaseDate\": \"2025-06-26T06:48:50.080876Z\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{Url_firmwareApi}}/{{appName-sucan}}/{{Firmware-sucan-released}}/release",
													"host": [
														"{{Url_firmwareApi}}"
													],
													"path": [
														"{{appName-sucan}}",
														"{{Firmware-sucan-released}}",
														"release"
													]
												}
											},
											"response": []
										},
										{
											"name": "get-single Code-200",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{Url_firmwareApi}}/{{appName-sucan}}/{{Firmware-sucan-released}}",
													"host": [
														"{{Url_firmwareApi}}"
													],
													"path": [
														"{{appName-sucan}}",
														"{{Firmware-sucan-released}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "generate Code-200",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"console.log(`Resolved URL: ${pm.variables.get(\"Url_firmwareApi\")}/${pm.collectionVariables.get(\"appName\")}/${pm.collectionVariables.get(\"appVersion\")}/generate`);\r",
															"\r",
															"\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"console.log(\"Response Body:\", pm.response.text());\r",
															"// console.log(\"Response Headers:\", pm.response.headers.toJSON());\r",
															"\r",
															"\r",
															"if (pm.response.code === 404) {\r",
															"    pm.visualizer.set(`<p>No firmware found for the selected version.</p>`);\r",
															"} else {\r",
															"    // existing logic for Content-Disposition\r",
															"}\r",
															"\r",
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"deviceIds\": [\r\n    \"2829866CDE70\"\r\n  ]\r\n}\r\n",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{Url_firmwareApi}}/{{appName-sucan}}/{{Firmware-sucan-released}}/generate",
													"host": [
														"{{Url_firmwareApi}}"
													],
													"path": [
														"{{appName-sucan}}",
														"{{Firmware-sucan-released}}",
														"generate"
													]
												}
											},
											"response": []
										},
										{
											"name": "stagged Code-403",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 403\", function () {\r",
															"    pm.response.to.have.status(403);\r",
															"});\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"release\": false\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{Url_firmwareApi}}/{{appName-sucan}}/{{Firmware-sucan-released}}/release",
													"host": [
														"{{Url_firmwareApi}}"
													],
													"path": [
														"{{appName-sucan}}",
														"{{Firmware-sucan-released}}",
														"release"
													]
												}
											},
											"response": []
										},
										{
											"name": "get-single Code-200",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{Url_firmwareApi}}/{{appName-sucan}}/{{Firmware-sucan-released}}",
													"host": [
														"{{Url_firmwareApi}}"
													],
													"path": [
														"{{appName-sucan}}",
														"{{Firmware-sucan-released}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Deleting Code-403",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"if (!pm.collectionVariables.get(\"appName\") || !pm.collectionVariables.get(\"appVersion\")) {\r",
															"    throw new Error(\"appName or appVersion is missing. Please run the GET request first.\");\r",
															"}\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 403\", function () {\r",
															"    pm.response.to.have.status(403);\r",
															"});"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [],
												"url": {
													"raw": "{{Url_firmwareApi}}/{{appName-sucan}}/{{Firmware-sucan-released}}",
													"host": [
														"{{Url_firmwareApi}}"
													],
													"path": [
														"{{appName-sucan}}",
														"{{Firmware-sucan-released}}"
													],
													"query": [
														{
															"key": "appName",
															"value": "su",
															"disabled": true
														},
														{
															"key": "appVersion",
															"value": "2.5.5.1",
															"disabled": true
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "get-single Code-200",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{Url_firmwareApi}}/{{appName-sucan}}/{{Firmware-sucan-released}}",
													"host": [
														"{{Url_firmwareApi}}"
													],
													"path": [
														"{{appName-sucan}}",
														"{{Firmware-sucan-released}}"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Firmware API_rpdu2g stagged schduled",
									"item": [
										{
											"name": "get-all Code-200",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"// pm.test(\"Status code is 200\", function () {\r",
															"//     pm.response.to.have.status(200);\r",
															"// });\r",
															"\r",
															"// // // Parse response\r",
															"// // let firmwareList = pm.response.json();\r",
															"\r",
															"// // // Randomly select one firmware entry\r",
															"// // let selected = firmwareList[Math.floor(Math.random() * firmwareList.length)];\r",
															"\r",
															"// // // Set variables for next request\r",
															"// // pm.collectionVariables.set(\"appName\", selected.appName);\r",
															"// // pm.collectionVariables.set(\"appVersion\", selected.appVersion);\r",
															"\r",
															"// // console.log(\"Selected firmware:\", selected.appName, selected.appVersion);\r",
															"\r",
															"// let firmwareList = pm.response.json();\r",
															"\r",
															"// // Filter entries that have valid appName and appVersion\r",
															"// let validEntries = firmwareList.filter(fw => fw.appName && fw.appVersion);\r",
															"\r",
															"// // Randomly select one\r",
															"// let selected = validEntries[Math.floor(Math.random() * validEntries.length)];\r",
															"\r",
															"// pm.collectionVariables.set(\"appName\", selected.appName);\r",
															"// pm.collectionVariables.set(\"appVersion\", selected.appVersion);\r",
															"\r",
															"// console.log(\"Selected firmware:\", selected.appName, selected.appVersion);\r",
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{Url_firmwareApi}}",
													"host": [
														"{{Url_firmwareApi}}"
													],
													"query": [
														{
															"key": "snst",
															"value": null,
															"disabled": true
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "get-single Code-404",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 404\", function () {\r",
															"    pm.response.to.have.status(404);\r",
															"});\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{Url_firmwareApi}}/{{appName-rpdu2g}}/{{Firmware-rpdu2g-stagged}}",
													"host": [
														"{{Url_firmwareApi}}"
													],
													"path": [
														"{{appName-rpdu2g}}",
														"{{Firmware-rpdu2g-stagged}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "firmware Code-403",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"// Try to get values from the response first\r",
															"try {\r",
															"    const response = pm.response.json();\r",
															"    if (response.appName) {\r",
															"        pm.environment.set(\"appName\", response.appName);\r",
															"    }\r",
															"    if (response.appVersion) {\r",
															"        pm.environment.set(\"appVersion\", response.appVersion);\r",
															"    }\r",
															"} catch (e) {\r",
															"    console.warn(\"No JSON response or missing fields.\");\r",
															"}\r",
															"\r",
															"// Fallback: get values from the request body if not already set\r",
															"if (!pm.environment.get(\"appName\") || !pm.environment.get(\"appVersion\")) {\r",
															"    try {\r",
															"        const requestBody = pm.request.body.raw ? JSON.parse(pm.request.body.raw) : {};\r",
															"        if (requestBody.appName) {\r",
															"            pm.environment.set(\"appName\", requestBody.appName);\r",
															"        }\r",
															"        if (requestBody.appVersion) {\r",
															"            pm.environment.set(\"appVersion\", requestBody.appVersion);\r",
															"        }\r",
															"    } catch (e) {\r",
															"        console.warn(\"Failed to parse request body.\");\r",
															"    }\r",
															"}\r",
															"\r",
															"pm.test(\"Status code is 403\", function () {\r",
															"    pm.response.to.have.status(403);\r",
															"});\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "formdata",
													"formdata": [
														{
															"key": "Criticality",
															"value": "{{criticality_Recommended}}",
															"type": "text"
														},
														{
															"key": "Description",
															"value": "{{Description}}",
															"type": "text"
														},
														{
															"key": "ReleaseNotesUrl",
															"value": "{{ReleaseNotesUrl}}",
															"type": "text"
														},
														{
															"key": "file",
															"type": "file",
															"src": "apc_hw21_su_3-3-0-8.nmc3"
														}
													]
												},
												"url": {
													"raw": "{{Url_firmwareApi}}",
													"host": [
														"{{Url_firmwareApi}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Updating Code-403",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"if (!pm.collectionVariables.get(\"appName\") || !pm.collectionVariables.get(\"appVersion\")) {\r",
															"    throw new Error(\"appName or appVersion is missing. Please run the GET request first.\");\r",
															"}\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 403\", function () {\r",
															"    pm.response.to.have.status(403);\r",
															"});"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"criticality\": \"{{criticality_Optional}}\",\r\n  \"description\": \"{{Description}}\",\r\n  \"releaseNotesUrl\": \"{{ReleaseNotesUrl}}\"\r\n}\r\n\r\n",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{Url_firmwareApi}}/{{appName-rpdu2g}}/{{Firmware-rpdu2g-stagged}}",
													"host": [
														"{{Url_firmwareApi}}"
													],
													"path": [
														"{{appName-rpdu2g}}",
														"{{Firmware-rpdu2g-stagged}}"
													],
													"query": [
														{
															"key": "appName",
															"value": "su",
															"disabled": true
														},
														{
															"key": "appVersion",
															"value": "2.5.5.1",
															"disabled": true
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "get-single Code-404",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 404\", function () {\r",
															"    pm.response.to.have.status(404);\r",
															"});\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{Url_firmwareApi}}/{{appName-rpdu2g}}/{{Firmware-rpdu2g-stagged}}",
													"host": [
														"{{Url_firmwareApi}}"
													],
													"path": [
														"{{appName-rpdu2g}}",
														"{{Firmware-rpdu2g-stagged}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Updating Code-403",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"if (!pm.collectionVariables.get(\"appName\") || !pm.collectionVariables.get(\"appVersion\")) {\r",
															"    throw new Error(\"appName or appVersion is missing. Please run the GET request first.\");\r",
															"}\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 403\", function () {\r",
															"    pm.response.to.have.status(403);\r",
															"});"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"criticality\": \"{{criticality_Optional}}\",\r\n  \"description\": \"{{Description}}\",\r\n  \"releaseNotesUrl\": \"{{ReleaseNotesUrl}}\"\r\n}\r\n\r\n",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{Url_firmwareApi}}/{{appName-rpdu2g}}/{{Firmware-rpdu2g-stagged}}",
													"host": [
														"{{Url_firmwareApi}}"
													],
													"path": [
														"{{appName-rpdu2g}}",
														"{{Firmware-rpdu2g-stagged}}"
													],
													"query": [
														{
															"key": "appName",
															"value": "su",
															"disabled": true
														},
														{
															"key": "appVersion",
															"value": "2.5.5.1",
															"disabled": true
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "get-single Code-404",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 404\", function () {\r",
															"    pm.response.to.have.status(404);\r",
															"});\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{Url_firmwareApi}}/{{appName-rpdu2g}}/{{Firmware-rpdu2g-stagged}}",
													"host": [
														"{{Url_firmwareApi}}"
													],
													"path": [
														"{{appName-rpdu2g}}",
														"{{Firmware-rpdu2g-stagged}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Release Code-403",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 403\", function () {\r",
															"    pm.response.to.have.status(403);\r",
															"});\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"release\": true,\r\n  \"releaseDate\": \"2025-06-26T06:48:50.080876Z\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{Url_firmwareApi}}/{{appName-rpdu2g}}/{{Firmware-rpdu2g-stagged}}/release",
													"host": [
														"{{Url_firmwareApi}}"
													],
													"path": [
														"{{appName-rpdu2g}}",
														"{{Firmware-rpdu2g-stagged}}",
														"release"
													]
												}
											},
											"response": []
										},
										{
											"name": "get-single Code-404",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 404\", function () {\r",
															"    pm.response.to.have.status(404);\r",
															"});\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{Url_firmwareApi}}/{{appName-rpdu2g}}/{{Firmware-rpdu2g-stagged}}",
													"host": [
														"{{Url_firmwareApi}}"
													],
													"path": [
														"{{appName-rpdu2g}}",
														"{{Firmware-rpdu2g-stagged}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "generate Code-404",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"console.log(`Resolved URL: ${pm.variables.get(\"Url_firmwareApi\")}/${pm.collectionVariables.get(\"appName\")}/${pm.collectionVariables.get(\"appVersion\")}/generate`);\r",
															"\r",
															"\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"console.log(\"Response Body:\", pm.response.text());\r",
															"// console.log(\"Response Headers:\", pm.response.headers.toJSON());\r",
															"\r",
															"\r",
															"if (pm.response.code === 404) {\r",
															"    pm.visualizer.set(`<p>No firmware found for the selected version.</p>`);\r",
															"} else {\r",
															"    // existing logic for Content-Disposition\r",
															"}\r",
															"\r",
															"pm.test(\"Status code is 404\", function () {\r",
															"    pm.response.to.have.status(404);\r",
															"});\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"deviceIds\": [\r\n    \"2829866CDE70\"\r\n  ]\r\n}\r\n",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{Url_firmwareApi}}/{{appName-rpdu2g}}/{{Firmware-rpdu2g-stagged}}/generate",
													"host": [
														"{{Url_firmwareApi}}"
													],
													"path": [
														"{{appName-rpdu2g}}",
														"{{Firmware-rpdu2g-stagged}}",
														"generate"
													]
												}
											},
											"response": []
										},
										{
											"name": "stagged Code-403",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 403\", function () {\r",
															"    pm.response.to.have.status(403);\r",
															"});\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"release\": false\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{Url_firmwareApi}}/{{appName-rpdu2g}}/{{Firmware-rpdu2g-stagged}}/release",
													"host": [
														"{{Url_firmwareApi}}"
													],
													"path": [
														"{{appName-rpdu2g}}",
														"{{Firmware-rpdu2g-stagged}}",
														"release"
													]
												}
											},
											"response": []
										},
										{
											"name": "get-single Code-404",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 404\", function () {\r",
															"    pm.response.to.have.status(404);\r",
															"});\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{Url_firmwareApi}}/{{appName-rpdu2g}}/{{Firmware-rpdu2g-stagged}}",
													"host": [
														"{{Url_firmwareApi}}"
													],
													"path": [
														"{{appName-rpdu2g}}",
														"{{Firmware-rpdu2g-stagged}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Deleting Code-403",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"if (!pm.collectionVariables.get(\"appName\") || !pm.collectionVariables.get(\"appVersion\")) {\r",
															"    throw new Error(\"appName or appVersion is missing. Please run the GET request first.\");\r",
															"}\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 403\", function () {\r",
															"    pm.response.to.have.status(403);\r",
															"});"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [],
												"url": {
													"raw": "{{Url_firmwareApi}}/{{appName-rpdu2g}}/{{Firmware-rpdu2g-stagged}}",
													"host": [
														"{{Url_firmwareApi}}"
													],
													"path": [
														"{{appName-rpdu2g}}",
														"{{Firmware-rpdu2g-stagged}}"
													],
													"query": [
														{
															"key": "appName",
															"value": "su",
															"disabled": true
														},
														{
															"key": "appVersion",
															"value": "2.5.5.1",
															"disabled": true
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "get-single Copy5 Code-404",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 404\", function () {\r",
															"    pm.response.to.have.status(404);\r",
															"});\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{Url_firmwareApi}}/{{appName-rpdu2g}}/{{Firmware-rpdu2g-stagged}}",
													"host": [
														"{{Url_firmwareApi}}"
													],
													"path": [
														"{{appName-rpdu2g}}",
														"{{Firmware-rpdu2g-stagged}}"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Firmware API_rpdu2g released",
									"item": [
										{
											"name": "get-all Code-200",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"// pm.test(\"Status code is 200\", function () {\r",
															"//     pm.response.to.have.status(200);\r",
															"// });\r",
															"\r",
															"// // // Parse response\r",
															"// // let firmwareList = pm.response.json();\r",
															"\r",
															"// // // Randomly select one firmware entry\r",
															"// // let selected = firmwareList[Math.floor(Math.random() * firmwareList.length)];\r",
															"\r",
															"// // // Set variables for next request\r",
															"// // pm.collectionVariables.set(\"appName\", selected.appName);\r",
															"// // pm.collectionVariables.set(\"appVersion\", selected.appVersion);\r",
															"\r",
															"// // console.log(\"Selected firmware:\", selected.appName, selected.appVersion);\r",
															"\r",
															"// let firmwareList = pm.response.json();\r",
															"\r",
															"// // Filter entries that have valid appName and appVersion\r",
															"// let validEntries = firmwareList.filter(fw => fw.appName && fw.appVersion);\r",
															"\r",
															"// // Randomly select one\r",
															"// let selected = validEntries[Math.floor(Math.random() * validEntries.length)];\r",
															"\r",
															"// pm.collectionVariables.set(\"appName\", selected.appName);\r",
															"// pm.collectionVariables.set(\"appVersion\", selected.appVersion);\r",
															"\r",
															"// console.log(\"Selected firmware:\", selected.appName, selected.appVersion);\r",
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{Url_firmwareApi}}",
													"host": [
														"{{Url_firmwareApi}}"
													],
													"query": [
														{
															"key": "snst",
															"value": null,
															"disabled": true
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "get-single Code-200",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{Url_firmwareApi}}/{{appName-rpdu2g}}/{{Firmware-rpdu2g-released}}",
													"host": [
														"{{Url_firmwareApi}}"
													],
													"path": [
														"{{appName-rpdu2g}}",
														"{{Firmware-rpdu2g-released}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "firmware Code-403",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"// Try to get values from the response first\r",
															"try {\r",
															"    const response = pm.response.json();\r",
															"    if (response.appName) {\r",
															"        pm.environment.set(\"appName\", response.appName);\r",
															"    }\r",
															"    if (response.appVersion) {\r",
															"        pm.environment.set(\"appVersion\", response.appVersion);\r",
															"    }\r",
															"} catch (e) {\r",
															"    console.warn(\"No JSON response or missing fields.\");\r",
															"}\r",
															"\r",
															"// Fallback: get values from the request body if not already set\r",
															"if (!pm.environment.get(\"appName\") || !pm.environment.get(\"appVersion\")) {\r",
															"    try {\r",
															"        const requestBody = pm.request.body.raw ? JSON.parse(pm.request.body.raw) : {};\r",
															"        if (requestBody.appName) {\r",
															"            pm.environment.set(\"appName\", requestBody.appName);\r",
															"        }\r",
															"        if (requestBody.appVersion) {\r",
															"            pm.environment.set(\"appVersion\", requestBody.appVersion);\r",
															"        }\r",
															"    } catch (e) {\r",
															"        console.warn(\"Failed to parse request body.\");\r",
															"    }\r",
															"}\r",
															"\r",
															"pm.test(\"Status code is 403\", function () {\r",
															"    pm.response.to.have.status(403);\r",
															"});\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "formdata",
													"formdata": [
														{
															"key": "Criticality",
															"value": "{{criticality_Recommended}}",
															"type": "text"
														},
														{
															"key": "Description",
															"value": "{{Description}}",
															"type": "text"
														},
														{
															"key": "ReleaseNotesUrl",
															"value": "{{ReleaseNotesUrl}}",
															"type": "text"
														},
														{
															"key": "file",
															"type": "file",
															"src": "apc_hw21_su_3-3-0-8.nmc3"
														}
													]
												},
												"url": {
													"raw": "{{Url_firmwareApi}}",
													"host": [
														"{{Url_firmwareApi}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Updating Code-403",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"if (!pm.collectionVariables.get(\"appName\") || !pm.collectionVariables.get(\"appVersion\")) {\r",
															"    throw new Error(\"appName or appVersion is missing. Please run the GET request first.\");\r",
															"}\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 403\", function () {\r",
															"    pm.response.to.have.status(403);\r",
															"});"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"criticality\": \"{{criticality_Optional}}\",\r\n  \"description\": \"{{Description}}\",\r\n  \"releaseNotesUrl\": \"{{ReleaseNotesUrl}}\"\r\n}\r\n\r\n",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{Url_firmwareApi}}/{{appName-rpdu2g}}/{{Firmware-rpdu2g-released}}",
													"host": [
														"{{Url_firmwareApi}}"
													],
													"path": [
														"{{appName-rpdu2g}}",
														"{{Firmware-rpdu2g-released}}"
													],
													"query": [
														{
															"key": "appName",
															"value": "su",
															"disabled": true
														},
														{
															"key": "appVersion",
															"value": "2.5.5.1",
															"disabled": true
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "get-single Code-200",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{Url_firmwareApi}}/{{appName-rpdu2g}}/{{Firmware-rpdu2g-released}}",
													"host": [
														"{{Url_firmwareApi}}"
													],
													"path": [
														"{{appName-rpdu2g}}",
														"{{Firmware-rpdu2g-released}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Updating Code-403",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"if (!pm.collectionVariables.get(\"appName\") || !pm.collectionVariables.get(\"appVersion\")) {\r",
															"    throw new Error(\"appName or appVersion is missing. Please run the GET request first.\");\r",
															"}\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 403\", function () {\r",
															"    pm.response.to.have.status(403);\r",
															"});"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"criticality\": \"{{criticality_Optional}}\",\r\n  \"description\": \"{{Description}}\",\r\n  \"releaseNotesUrl\": \"{{ReleaseNotesUrl}}\"\r\n}\r\n\r\n",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{Url_firmwareApi}}/{{appName-rpdu2g}}/{{Firmware-rpdu2g-released}}",
													"host": [
														"{{Url_firmwareApi}}"
													],
													"path": [
														"{{appName-rpdu2g}}",
														"{{Firmware-rpdu2g-released}}"
													],
													"query": [
														{
															"key": "appName",
															"value": "su",
															"disabled": true
														},
														{
															"key": "appVersion",
															"value": "2.5.5.1",
															"disabled": true
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "get-single Code-200",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{Url_firmwareApi}}/{{appName-rpdu2g}}/{{Firmware-rpdu2g-released}}",
													"host": [
														"{{Url_firmwareApi}}"
													],
													"path": [
														"{{appName-rpdu2g}}",
														"{{Firmware-rpdu2g-released}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Release Code-403",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 403\", function () {\r",
															"    pm.response.to.have.status(403);\r",
															"});\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"release\": true,\r\n  \"releaseDate\": \"2025-06-26T06:48:50.080876Z\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{Url_firmwareApi}}/{{appName-rpdu2g}}/{{Firmware-rpdu2g-released}}/release",
													"host": [
														"{{Url_firmwareApi}}"
													],
													"path": [
														"{{appName-rpdu2g}}",
														"{{Firmware-rpdu2g-released}}",
														"release"
													]
												}
											},
											"response": []
										},
										{
											"name": "get-single Code-200",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{Url_firmwareApi}}/{{appName-rpdu2g}}/{{Firmware-rpdu2g-released}}",
													"host": [
														"{{Url_firmwareApi}}"
													],
													"path": [
														"{{appName-rpdu2g}}",
														"{{Firmware-rpdu2g-released}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "generate Code-200",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"console.log(`Resolved URL: ${pm.variables.get(\"Url_firmwareApi\")}/${pm.collectionVariables.get(\"appName\")}/${pm.collectionVariables.get(\"appVersion\")}/generate`);\r",
															"\r",
															"\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"console.log(\"Response Body:\", pm.response.text());\r",
															"// console.log(\"Response Headers:\", pm.response.headers.toJSON());\r",
															"\r",
															"\r",
															"if (pm.response.code === 404) {\r",
															"    pm.visualizer.set(`<p>No firmware found for the selected version.</p>`);\r",
															"} else {\r",
															"    // existing logic for Content-Disposition\r",
															"}\r",
															"\r",
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"deviceIds\": [\r\n    \"2829866CDE70\"\r\n  ]\r\n}\r\n",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{Url_firmwareApi}}/{{appName-rpdu2g}}/{{Firmware-rpdu2g-released}}/generate",
													"host": [
														"{{Url_firmwareApi}}"
													],
													"path": [
														"{{appName-rpdu2g}}",
														"{{Firmware-rpdu2g-released}}",
														"generate"
													]
												}
											},
											"response": []
										},
										{
											"name": "stagged Code-403",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 403\", function () {\r",
															"    pm.response.to.have.status(403);\r",
															"});\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"release\": false\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{Url_firmwareApi}}/{{appName-rpdu2g}}/{{Firmware-rpdu2g-released}}/release",
													"host": [
														"{{Url_firmwareApi}}"
													],
													"path": [
														"{{appName-rpdu2g}}",
														"{{Firmware-rpdu2g-released}}",
														"release"
													]
												}
											},
											"response": []
										},
										{
											"name": "get-single Code-200",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{Url_firmwareApi}}/{{appName-rpdu2g}}/{{Firmware-rpdu2g-released}}",
													"host": [
														"{{Url_firmwareApi}}"
													],
													"path": [
														"{{appName-rpdu2g}}",
														"{{Firmware-rpdu2g-released}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Deleting Code-403",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"if (!pm.collectionVariables.get(\"appName\") || !pm.collectionVariables.get(\"appVersion\")) {\r",
															"    throw new Error(\"appName or appVersion is missing. Please run the GET request first.\");\r",
															"}\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 403\", function () {\r",
															"    pm.response.to.have.status(403);\r",
															"});"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [],
												"url": {
													"raw": "{{Url_firmwareApi}}/{{appName-rpdu2g}}/{{Firmware-rpdu2g-released}}",
													"host": [
														"{{Url_firmwareApi}}"
													],
													"path": [
														"{{appName-rpdu2g}}",
														"{{Firmware-rpdu2g-released}}"
													],
													"query": [
														{
															"key": "appName",
															"value": "su",
															"disabled": true
														},
														{
															"key": "appVersion",
															"value": "2.5.5.1",
															"disabled": true
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "get-single Code-200",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{Url_firmwareApi}}/{{appName-rpdu2g}}/{{Firmware-rpdu2g-released}}",
													"host": [
														"{{Url_firmwareApi}}"
													],
													"path": [
														"{{appName-rpdu2g}}",
														"{{Firmware-rpdu2g-released}}"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Firmware API_eu1p stagged schduled",
									"item": [
										{
											"name": "get-all Code-200",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"// pm.test(\"Status code is 200\", function () {\r",
															"//     pm.response.to.have.status(200);\r",
															"// });\r",
															"\r",
															"// // // Parse response\r",
															"// // let firmwareList = pm.response.json();\r",
															"\r",
															"// // // Randomly select one firmware entry\r",
															"// // let selected = firmwareList[Math.floor(Math.random() * firmwareList.length)];\r",
															"\r",
															"// // // Set variables for next request\r",
															"// // pm.collectionVariables.set(\"appName\", selected.appName);\r",
															"// // pm.collectionVariables.set(\"appVersion\", selected.appVersion);\r",
															"\r",
															"// // console.log(\"Selected firmware:\", selected.appName, selected.appVersion);\r",
															"\r",
															"// let firmwareList = pm.response.json();\r",
															"\r",
															"// // Filter entries that have valid appName and appVersion\r",
															"// let validEntries = firmwareList.filter(fw => fw.appName && fw.appVersion);\r",
															"\r",
															"// // Randomly select one\r",
															"// let selected = validEntries[Math.floor(Math.random() * validEntries.length)];\r",
															"\r",
															"// pm.collectionVariables.set(\"appName\", selected.appName);\r",
															"// pm.collectionVariables.set(\"appVersion\", selected.appVersion);\r",
															"\r",
															"// console.log(\"Selected firmware:\", selected.appName, selected.appVersion);\r",
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{Url_firmwareApi}}",
													"host": [
														"{{Url_firmwareApi}}"
													],
													"query": [
														{
															"key": "snst",
															"value": null,
															"disabled": true
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "get-single Code-404",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 404\", function () {\r",
															"    pm.response.to.have.status(404);\r",
															"});\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{Url_firmwareApi}}/{{appName-eu1p}}/{{Firmware-eu1p-stagged}}",
													"host": [
														"{{Url_firmwareApi}}"
													],
													"path": [
														"{{appName-eu1p}}",
														"{{Firmware-eu1p-stagged}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "firmware Code-403",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"// Try to get values from the response first\r",
															"try {\r",
															"    const response = pm.response.json();\r",
															"    if (response.appName) {\r",
															"        pm.environment.set(\"appName\", response.appName);\r",
															"    }\r",
															"    if (response.appVersion) {\r",
															"        pm.environment.set(\"appVersion\", response.appVersion);\r",
															"    }\r",
															"} catch (e) {\r",
															"    console.warn(\"No JSON response or missing fields.\");\r",
															"}\r",
															"\r",
															"// Fallback: get values from the request body if not already set\r",
															"if (!pm.environment.get(\"appName\") || !pm.environment.get(\"appVersion\")) {\r",
															"    try {\r",
															"        const requestBody = pm.request.body.raw ? JSON.parse(pm.request.body.raw) : {};\r",
															"        if (requestBody.appName) {\r",
															"            pm.environment.set(\"appName\", requestBody.appName);\r",
															"        }\r",
															"        if (requestBody.appVersion) {\r",
															"            pm.environment.set(\"appVersion\", requestBody.appVersion);\r",
															"        }\r",
															"    } catch (e) {\r",
															"        console.warn(\"Failed to parse request body.\");\r",
															"    }\r",
															"}\r",
															"\r",
															"pm.test(\"Status code is 403\", function () {\r",
															"    pm.response.to.have.status(403);\r",
															"});\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "formdata",
													"formdata": [
														{
															"key": "Criticality",
															"value": "{{criticality_Recommended}}",
															"type": "text"
														},
														{
															"key": "Description",
															"value": "{{Description}}",
															"type": "text"
														},
														{
															"key": "ReleaseNotesUrl",
															"value": "{{ReleaseNotesUrl}}",
															"type": "text"
														},
														{
															"key": "file",
															"type": "file",
															"src": "apc_hw21_su_3-3-0-8.nmc3"
														}
													]
												},
												"url": {
													"raw": "{{Url_firmwareApi}}",
													"host": [
														"{{Url_firmwareApi}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Updating Code-403",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"if (!pm.collectionVariables.get(\"appName\") || !pm.collectionVariables.get(\"appVersion\")) {\r",
															"    throw new Error(\"appName or appVersion is missing. Please run the GET request first.\");\r",
															"}\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 403\", function () {\r",
															"    pm.response.to.have.status(403);\r",
															"});"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"criticality\": \"{{criticality_Optional}}\",\r\n  \"description\": \"{{Description}}\",\r\n  \"releaseNotesUrl\": \"{{ReleaseNotesUrl}}\"\r\n}\r\n\r\n",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{Url_firmwareApi}}/{{appName-eu1p}}/{{Firmware-eu1p-stagged}}",
													"host": [
														"{{Url_firmwareApi}}"
													],
													"path": [
														"{{appName-eu1p}}",
														"{{Firmware-eu1p-stagged}}"
													],
													"query": [
														{
															"key": "appName",
															"value": "su",
															"disabled": true
														},
														{
															"key": "appVersion",
															"value": "2.5.5.1",
															"disabled": true
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "get-single Code-404",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 404\", function () {\r",
															"    pm.response.to.have.status(404);\r",
															"});\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{Url_firmwareApi}}/{{appName-eu1p}}/{{Firmware-eu1p-stagged}}",
													"host": [
														"{{Url_firmwareApi}}"
													],
													"path": [
														"{{appName-eu1p}}",
														"{{Firmware-eu1p-stagged}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Updating Code-403",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"if (!pm.collectionVariables.get(\"appName\") || !pm.collectionVariables.get(\"appVersion\")) {\r",
															"    throw new Error(\"appName or appVersion is missing. Please run the GET request first.\");\r",
															"}\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 403\", function () {\r",
															"    pm.response.to.have.status(403);\r",
															"});"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"criticality\": \"{{criticality_Optional}}\",\r\n  \"description\": \"{{Description}}\",\r\n  \"releaseNotesUrl\": \"{{ReleaseNotesUrl}}\"\r\n}\r\n\r\n",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{Url_firmwareApi}}/{{appName-eu1p}}/{{Firmware-eu1p-stagged}}",
													"host": [
														"{{Url_firmwareApi}}"
													],
													"path": [
														"{{appName-eu1p}}",
														"{{Firmware-eu1p-stagged}}"
													],
													"query": [
														{
															"key": "appName",
															"value": "su",
															"disabled": true
														},
														{
															"key": "appVersion",
															"value": "2.5.5.1",
															"disabled": true
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "get-single Code-404",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 404\", function () {\r",
															"    pm.response.to.have.status(404);\r",
															"});\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{Url_firmwareApi}}/{{appName-eu1p}}/{{Firmware-eu1p-stagged}}",
													"host": [
														"{{Url_firmwareApi}}"
													],
													"path": [
														"{{appName-eu1p}}",
														"{{Firmware-eu1p-stagged}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Release Code-403",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 403\", function () {\r",
															"    pm.response.to.have.status(403);\r",
															"});\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"release\": true,\r\n  \"releaseDate\": \"2025-06-26T06:48:50.080876Z\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{Url_firmwareApi}}/{{appName-eu1p}}/{{Firmware-eu1p-stagged}}/release",
													"host": [
														"{{Url_firmwareApi}}"
													],
													"path": [
														"{{appName-eu1p}}",
														"{{Firmware-eu1p-stagged}}",
														"release"
													]
												}
											},
											"response": []
										},
										{
											"name": "get-single Code-404",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 404\", function () {\r",
															"    pm.response.to.have.status(404);\r",
															"});\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{Url_firmwareApi}}/{{appName-eu1p}}/{{Firmware-eu1p-stagged}}",
													"host": [
														"{{Url_firmwareApi}}"
													],
													"path": [
														"{{appName-eu1p}}",
														"{{Firmware-eu1p-stagged}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "generate Code-404",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"console.log(`Resolved URL: ${pm.variables.get(\"Url_firmwareApi\")}/${pm.collectionVariables.get(\"appName\")}/${pm.collectionVariables.get(\"appVersion\")}/generate`);\r",
															"\r",
															"\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"console.log(\"Response Body:\", pm.response.text());\r",
															"// console.log(\"Response Headers:\", pm.response.headers.toJSON());\r",
															"\r",
															"\r",
															"if (pm.response.code === 404) {\r",
															"    pm.visualizer.set(`<p>No firmware found for the selected version.</p>`);\r",
															"} else {\r",
															"    // existing logic for Content-Disposition\r",
															"}\r",
															"\r",
															"pm.test(\"Status code is 404\", function () {\r",
															"    pm.response.to.have.status(404);\r",
															"});\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"deviceIds\": [\r\n    \"2829866CDE70\"\r\n  ]\r\n}\r\n",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{Url_firmwareApi}}/{{appName-eu1p}}/{{Firmware-eu1p-stagged}}/generate",
													"host": [
														"{{Url_firmwareApi}}"
													],
													"path": [
														"{{appName-eu1p}}",
														"{{Firmware-eu1p-stagged}}",
														"generate"
													]
												}
											},
											"response": []
										},
										{
											"name": "stagged Code-403",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 403\", function () {\r",
															"    pm.response.to.have.status(403);\r",
															"});\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"release\": false\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{Url_firmwareApi}}/{{appName-eu1p}}/{{Firmware-eu1p-stagged}}/release",
													"host": [
														"{{Url_firmwareApi}}"
													],
													"path": [
														"{{appName-eu1p}}",
														"{{Firmware-eu1p-stagged}}",
														"release"
													]
												}
											},
											"response": []
										},
										{
											"name": "get-single Code-404",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 404\", function () {\r",
															"    pm.response.to.have.status(404);\r",
															"});\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{Url_firmwareApi}}/{{appName-eu1p}}/{{Firmware-eu1p-stagged}}",
													"host": [
														"{{Url_firmwareApi}}"
													],
													"path": [
														"{{appName-eu1p}}",
														"{{Firmware-eu1p-stagged}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Deleting Code-403",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"if (!pm.collectionVariables.get(\"appName\") || !pm.collectionVariables.get(\"appVersion\")) {\r",
															"    throw new Error(\"appName or appVersion is missing. Please run the GET request first.\");\r",
															"}\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 403\", function () {\r",
															"    pm.response.to.have.status(403);\r",
															"});"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [],
												"url": {
													"raw": "{{Url_firmwareApi}}/{{appName-eu1p}}/{{Firmware-eu1p-stagged}}",
													"host": [
														"{{Url_firmwareApi}}"
													],
													"path": [
														"{{appName-eu1p}}",
														"{{Firmware-eu1p-stagged}}"
													],
													"query": [
														{
															"key": "appName",
															"value": "su",
															"disabled": true
														},
														{
															"key": "appVersion",
															"value": "2.5.5.1",
															"disabled": true
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "get-single Copy5 Code-404",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 404\", function () {\r",
															"    pm.response.to.have.status(404);\r",
															"});\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{Url_firmwareApi}}/{{appName-eu1p}}/{{Firmware-eu1p-stagged}}",
													"host": [
														"{{Url_firmwareApi}}"
													],
													"path": [
														"{{appName-eu1p}}",
														"{{Firmware-eu1p-stagged}}"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Firmware API_eu1p released",
									"item": [
										{
											"name": "get-all Code-200",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"// pm.test(\"Status code is 200\", function () {\r",
															"//     pm.response.to.have.status(200);\r",
															"// });\r",
															"\r",
															"// // // Parse response\r",
															"// // let firmwareList = pm.response.json();\r",
															"\r",
															"// // // Randomly select one firmware entry\r",
															"// // let selected = firmwareList[Math.floor(Math.random() * firmwareList.length)];\r",
															"\r",
															"// // // Set variables for next request\r",
															"// // pm.collectionVariables.set(\"appName\", selected.appName);\r",
															"// // pm.collectionVariables.set(\"appVersion\", selected.appVersion);\r",
															"\r",
															"// // console.log(\"Selected firmware:\", selected.appName, selected.appVersion);\r",
															"\r",
															"// let firmwareList = pm.response.json();\r",
															"\r",
															"// // Filter entries that have valid appName and appVersion\r",
															"// let validEntries = firmwareList.filter(fw => fw.appName && fw.appVersion);\r",
															"\r",
															"// // Randomly select one\r",
															"// let selected = validEntries[Math.floor(Math.random() * validEntries.length)];\r",
															"\r",
															"// pm.collectionVariables.set(\"appName\", selected.appName);\r",
															"// pm.collectionVariables.set(\"appVersion\", selected.appVersion);\r",
															"\r",
															"// console.log(\"Selected firmware:\", selected.appName, selected.appVersion);\r",
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{Url_firmwareApi}}",
													"host": [
														"{{Url_firmwareApi}}"
													],
													"query": [
														{
															"key": "snst",
															"value": null,
															"disabled": true
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "get-single Code-200",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{Url_firmwareApi}}/{{appName-eu1p}}/{{Firmware-eu1p-released}}",
													"host": [
														"{{Url_firmwareApi}}"
													],
													"path": [
														"{{appName-eu1p}}",
														"{{Firmware-eu1p-released}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "firmware Code-403",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"// Try to get values from the response first\r",
															"try {\r",
															"    const response = pm.response.json();\r",
															"    if (response.appName) {\r",
															"        pm.environment.set(\"appName\", response.appName);\r",
															"    }\r",
															"    if (response.appVersion) {\r",
															"        pm.environment.set(\"appVersion\", response.appVersion);\r",
															"    }\r",
															"} catch (e) {\r",
															"    console.warn(\"No JSON response or missing fields.\");\r",
															"}\r",
															"\r",
															"// Fallback: get values from the request body if not already set\r",
															"if (!pm.environment.get(\"appName\") || !pm.environment.get(\"appVersion\")) {\r",
															"    try {\r",
															"        const requestBody = pm.request.body.raw ? JSON.parse(pm.request.body.raw) : {};\r",
															"        if (requestBody.appName) {\r",
															"            pm.environment.set(\"appName\", requestBody.appName);\r",
															"        }\r",
															"        if (requestBody.appVersion) {\r",
															"            pm.environment.set(\"appVersion\", requestBody.appVersion);\r",
															"        }\r",
															"    } catch (e) {\r",
															"        console.warn(\"Failed to parse request body.\");\r",
															"    }\r",
															"}\r",
															"\r",
															"pm.test(\"Status code is 403\", function () {\r",
															"    pm.response.to.have.status(403);\r",
															"});\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "formdata",
													"formdata": [
														{
															"key": "Criticality",
															"value": "{{criticality_Recommended}}",
															"type": "text"
														},
														{
															"key": "Description",
															"value": "{{Description}}",
															"type": "text"
														},
														{
															"key": "ReleaseNotesUrl",
															"value": "{{ReleaseNotesUrl}}",
															"type": "text"
														},
														{
															"key": "file",
															"type": "file",
															"src": "apc_hw21_su_3-3-0-8.nmc3"
														}
													]
												},
												"url": {
													"raw": "{{Url_firmwareApi}}",
													"host": [
														"{{Url_firmwareApi}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Updating Code-403",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"if (!pm.collectionVariables.get(\"appName\") || !pm.collectionVariables.get(\"appVersion\")) {\r",
															"    throw new Error(\"appName or appVersion is missing. Please run the GET request first.\");\r",
															"}\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 403\", function () {\r",
															"    pm.response.to.have.status(403);\r",
															"});"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"criticality\": \"{{criticality_Optional}}\",\r\n  \"description\": \"{{Description}}\",\r\n  \"releaseNotesUrl\": \"{{ReleaseNotesUrl}}\"\r\n}\r\n\r\n",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{Url_firmwareApi}}/{{appName-eu1p}}/{{Firmware-eu1p-released}}",
													"host": [
														"{{Url_firmwareApi}}"
													],
													"path": [
														"{{appName-eu1p}}",
														"{{Firmware-eu1p-released}}"
													],
													"query": [
														{
															"key": "appName",
															"value": "su",
															"disabled": true
														},
														{
															"key": "appVersion",
															"value": "2.5.5.1",
															"disabled": true
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "get-single Code-200",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{Url_firmwareApi}}/{{appName-eu1p}}/{{Firmware-eu1p-released}}",
													"host": [
														"{{Url_firmwareApi}}"
													],
													"path": [
														"{{appName-eu1p}}",
														"{{Firmware-eu1p-released}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Updating Code-403",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"if (!pm.collectionVariables.get(\"appName\") || !pm.collectionVariables.get(\"appVersion\")) {\r",
															"    throw new Error(\"appName or appVersion is missing. Please run the GET request first.\");\r",
															"}\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 403\", function () {\r",
															"    pm.response.to.have.status(403);\r",
															"});"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"criticality\": \"{{criticality_Optional}}\",\r\n  \"description\": \"{{Description}}\",\r\n  \"releaseNotesUrl\": \"{{ReleaseNotesUrl}}\"\r\n}\r\n\r\n",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{Url_firmwareApi}}/{{appName-eu1p}}/{{Firmware-eu1p-released}}",
													"host": [
														"{{Url_firmwareApi}}"
													],
													"path": [
														"{{appName-eu1p}}",
														"{{Firmware-eu1p-released}}"
													],
													"query": [
														{
															"key": "appName",
															"value": "su",
															"disabled": true
														},
														{
															"key": "appVersion",
															"value": "2.5.5.1",
															"disabled": true
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "get-single Code-200",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{Url_firmwareApi}}/{{appName-eu1p}}/{{Firmware-eu1p-released}}",
													"host": [
														"{{Url_firmwareApi}}"
													],
													"path": [
														"{{appName-eu1p}}",
														"{{Firmware-eu1p-released}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Release Code-403",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 403\", function () {\r",
															"    pm.response.to.have.status(403);\r",
															"});\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"release\": true,\r\n  \"releaseDate\": \"2025-06-26T06:48:50.080876Z\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{Url_firmwareApi}}/{{appName-eu1p}}/{{Firmware-eu1p-released}}/release",
													"host": [
														"{{Url_firmwareApi}}"
													],
													"path": [
														"{{appName-eu1p}}",
														"{{Firmware-eu1p-released}}",
														"release"
													]
												}
											},
											"response": []
										},
										{
											"name": "get-single Code-200",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{Url_firmwareApi}}/{{appName-eu1p}}/{{Firmware-eu1p-released}}",
													"host": [
														"{{Url_firmwareApi}}"
													],
													"path": [
														"{{appName-eu1p}}",
														"{{Firmware-eu1p-released}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "generate Code-200",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"console.log(`Resolved URL: ${pm.variables.get(\"Url_firmwareApi\")}/${pm.collectionVariables.get(\"appName\")}/${pm.collectionVariables.get(\"appVersion\")}/generate`);\r",
															"\r",
															"\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"console.log(\"Response Body:\", pm.response.text());\r",
															"// console.log(\"Response Headers:\", pm.response.headers.toJSON());\r",
															"\r",
															"\r",
															"if (pm.response.code === 404) {\r",
															"    pm.visualizer.set(`<p>No firmware found for the selected version.</p>`);\r",
															"} else {\r",
															"    // existing logic for Content-Disposition\r",
															"}\r",
															"\r",
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"deviceIds\": [\r\n    \"2829866CDE70\"\r\n  ]\r\n}\r\n",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{Url_firmwareApi}}/{{appName-eu1p}}/{{Firmware-eu1p-released}}/generate",
													"host": [
														"{{Url_firmwareApi}}"
													],
													"path": [
														"{{appName-eu1p}}",
														"{{Firmware-eu1p-released}}",
														"generate"
													]
												}
											},
											"response": []
										},
										{
											"name": "stagged Code-403",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 403\", function () {\r",
															"    pm.response.to.have.status(403);\r",
															"});\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"release\": false\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{Url_firmwareApi}}/{{appName-eu1p}}/{{Firmware-eu1p-released}}/release",
													"host": [
														"{{Url_firmwareApi}}"
													],
													"path": [
														"{{appName-eu1p}}",
														"{{Firmware-eu1p-released}}",
														"release"
													]
												}
											},
											"response": []
										},
										{
											"name": "get-single Code-200",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{Url_firmwareApi}}/{{appName-eu1p}}/{{Firmware-eu1p-released}}",
													"host": [
														"{{Url_firmwareApi}}"
													],
													"path": [
														"{{appName-eu1p}}",
														"{{Firmware-eu1p-released}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Deleting Code-403",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"if (!pm.collectionVariables.get(\"appName\") || !pm.collectionVariables.get(\"appVersion\")) {\r",
															"    throw new Error(\"appName or appVersion is missing. Please run the GET request first.\");\r",
															"}\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 403\", function () {\r",
															"    pm.response.to.have.status(403);\r",
															"});"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [],
												"url": {
													"raw": "{{Url_firmwareApi}}/{{appName-eu1p}}/{{Firmware-eu1p-released}}",
													"host": [
														"{{Url_firmwareApi}}"
													],
													"path": [
														"{{appName-eu1p}}",
														"{{Firmware-eu1p-released}}"
													],
													"query": [
														{
															"key": "appName",
															"value": "su",
															"disabled": true
														},
														{
															"key": "appVersion",
															"value": "2.5.5.1",
															"disabled": true
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "get-single Code-200",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{Url_firmwareApi}}/{{appName-eu1p}}/{{Firmware-eu1p-released}}",
													"host": [
														"{{Url_firmwareApi}}"
													],
													"path": [
														"{{appName-eu1p}}",
														"{{Firmware-eu1p-released}}"
													]
												}
											},
											"response": []
										}
									]
								}
							]
						},
						{
							"name": "Software API",
							"item": [
								{
									"name": "win",
									"item": [
										{
											"name": "Software API_win- stagged",
											"item": [
												{
													"name": "New-Software-win Code-403",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 403\", function () {\r",
																	"    pm.response.to.have.status(403);\r",
																	"});\r",
																	""
																],
																"type": "text/javascript",
																"packages": {}
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [],
														"body": {
															"mode": "formdata",
															"formdata": [
																{
																	"key": "Name",
																	"value": "snst",
																	"type": "text"
																},
																{
																	"key": "Version",
																	"value": "{{Software_Version_win}}",
																	"type": "text"
																},
																{
																	"key": "Platform",
																	"value": "{{Software_Platform_win}}",
																	"type": "text"
																},
																{
																	"key": "Criticality",
																	"value": "{{criticality_Recommended}}",
																	"type": "text"
																},
																{
																	"key": "Description",
																	"value": "{{Description}}",
																	"type": "text"
																},
																{
																	"key": "ReleaseNotesUrl",
																	"value": "{{ReleaseNotesUrl}}",
																	"type": "text"
																},
																{
																	"key": "file",
																	"type": "file",
																	"src": "SecureNMCSystemTool_4.0.0.1_win-x64 Installer (4) (1).exe"
																}
															]
														},
														"url": {
															"raw": "{{Url_software}}software",
															"host": [
																"{{Url_software}}software"
															]
														}
													},
													"response": []
												},
												{
													"name": "all-software-win Code-200",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});\r",
																	""
																],
																"type": "text/javascript",
																"packages": {}
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{Url_software}}software?name={{Software_Name}}",
															"host": [
																"{{Url_software}}software"
															],
															"query": [
																{
																	"key": "name",
																	"value": "{{Software_Name}}"
																}
															]
														}
													},
													"response": []
												},
												{
													"name": "single-software-win Code-200",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});\r",
																	"\r",
																	""
																],
																"type": "text/javascript",
																"packages": {}
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{Url_software}}software?name={{Software_Name}}&version={{Software-win-stagged}}&platform={{Software_Platform_win}}",
															"host": [
																"{{Url_software}}software"
															],
															"query": [
																{
																	"key": "name",
																	"value": "{{Software_Name}}"
																},
																{
																	"key": "version",
																	"value": "{{Software-win-stagged}}"
																},
																{
																	"key": "platform",
																	"value": "{{Software_Platform_win}}"
																}
															]
														}
													},
													"response": []
												},
												{
													"name": "criticality-update-win Code-403",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 403\", function () {\r",
																	"    pm.response.to.have.status(403);\r",
																	"});\r",
																	""
																],
																"type": "text/javascript",
																"packages": {}
															}
														}
													],
													"request": {
														"method": "PUT",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\r\n  \"criticality\": \"{{criticality_Optional}}\",\r\n  \"description\": \"{{Description}}\",\r\n  \"releaseNotesUrl\": \"{{ReleaseNotesUrl}}\"\r\n}\r\n",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{Url_software}}software/{{Software_Name}}/{{Software-win-stagged}}/{{Software_Platform_win}}",
															"host": [
																"{{Url_software}}software"
															],
															"path": [
																"{{Software_Name}}",
																"{{Software-win-stagged}}",
																"{{Software_Platform_win}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "download-win Code-404",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 404\", function () {\r",
																	"    pm.response.to.have.status(404);\r",
																	"});\r",
																	"// pm.test(\"Status is 200 and response time > 10s\", function () {\r",
																	"//     pm.expect(pm.response.code).to.eql(200);\r",
																	"//     pm.expect(pm.response.responseTime).to.be.above(10000); // 10,000 ms = 10 seconds\r",
																	"// });\r",
																	""
																],
																"type": "text/javascript",
																"packages": {}
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{Url_software}}software/{{Software_Name}}/{{Software-win-stagged}}/{{Software_Platform_win}}/download",
															"host": [
																"{{Url_software}}software"
															],
															"path": [
																"{{Software_Name}}",
																"{{Software-win-stagged}}",
																"{{Software_Platform_win}}",
																"download"
															]
														}
													},
													"response": []
												},
												{
													"name": "win-delete Code-403",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 403\", function () {\r",
																	"    pm.response.to.have.status(403);\r",
																	"});\r",
																	""
																],
																"type": "text/javascript",
																"packages": {}
															}
														}
													],
													"request": {
														"method": "DELETE",
														"header": [],
														"url": {
															"raw": "https://dit-sds-software-webapp.azurewebsites.net/api/software/{{Software_Name}}/{{Software-win-stagged}}/{{Software_Platform_win}}",
															"protocol": "https",
															"host": [
																"dit-sds-software-webapp",
																"azurewebsites",
																"net"
															],
															"path": [
																"api",
																"software",
																"{{Software_Name}}",
																"{{Software-win-stagged}}",
																"{{Software_Platform_win}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "check deleted-win Code-200",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});\r",
																	""
																],
																"type": "text/javascript",
																"packages": {}
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{Url_software}}software?name={{Software_Name}}&version={{Software-win-stagged}}&platform={{Software_Platform_win}}",
															"host": [
																"{{Url_software}}software"
															],
															"query": [
																{
																	"key": "name",
																	"value": "{{Software_Name}}"
																},
																{
																	"key": "version",
																	"value": "{{Software-win-stagged}}"
																},
																{
																	"key": "platform",
																	"value": "{{Software_Platform_win}}"
																}
															]
														}
													},
													"response": []
												},
												{
													"name": "Scheduled-win-status Code-200",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});\r",
																	"\r",
																	""
																],
																"type": "text/javascript",
																"packages": {}
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{Url_software}}software?name={{Software_Name}}&version={{Software-win-stagged}}&platform={{Software_Platform_win}}",
															"host": [
																"{{Url_software}}software"
															],
															"query": [
																{
																	"key": "name",
																	"value": "{{Software_Name}}"
																},
																{
																	"key": "version",
																	"value": "{{Software-win-stagged}}"
																},
																{
																	"key": "platform",
																	"value": "{{Software_Platform_win}}"
																}
															]
														}
													},
													"response": []
												},
												{
													"name": "stagged-win Code-204",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 204\", function () {\r",
																	"    pm.response.to.have.status(204);\r",
																	"});\r",
																	""
																],
																"type": "text/javascript",
																"packages": {}
															}
														}
													],
													"request": {
														"method": "PUT",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\r\n  \"release\": false\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{Url_software}}software/{{Software_Name}}/{{Software-win-stagged}}/{{Software_Platform_win}}/release",
															"host": [
																"{{Url_software}}software"
															],
															"path": [
																"{{Software_Name}}",
																"{{Software-win-stagged}}",
																"{{Software_Platform_win}}",
																"release"
															]
														}
													},
													"response": []
												},
												{
													"name": "Stagged-win-status Code-200",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});\r",
																	"\r",
																	""
																],
																"type": "text/javascript",
																"packages": {}
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{Url_software}}software?name={{Software_Name}}&version={{Software-win-stagged}}&platform={{Software_Platform_win}}",
															"host": [
																"{{Url_software}}software"
															],
															"query": [
																{
																	"key": "name",
																	"value": "{{Software_Name}}"
																},
																{
																	"key": "version",
																	"value": "{{Software-win-stagged}}"
																},
																{
																	"key": "platform",
																	"value": "{{Software_Platform_win}}"
																}
															]
														}
													},
													"response": []
												},
												{
													"name": "remove-from-db-win Code-403",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 403\", function () {\r",
																	"    pm.response.to.have.status(403);\r",
																	"});\r",
																	""
																],
																"type": "text/javascript",
																"packages": {}
															}
														}
													],
													"request": {
														"method": "DELETE",
														"header": [],
														"url": {
															"raw": "https://dit-sds-software-webapp.azurewebsites.net/api/software/{{Software_Name}}/{{Software-win-stagged}}//{{Software_Platform_win}}",
															"protocol": "https",
															"host": [
																"dit-sds-software-webapp",
																"azurewebsites",
																"net"
															],
															"path": [
																"api",
																"software",
																"{{Software_Name}}",
																"{{Software-win-stagged}}",
																"",
																"{{Software_Platform_win}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "check deleted-win Code-200",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});\r",
																	""
																],
																"type": "text/javascript",
																"packages": {}
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{Url_software}}software?name={{Software_Name}}&version={{Software-win-stagged}}&platform={{Software_Platform_win}}",
															"host": [
																"{{Url_software}}software"
															],
															"query": [
																{
																	"key": "name",
																	"value": "{{Software_Name}}"
																},
																{
																	"key": "version",
																	"value": "{{Software-win-stagged}}"
																},
																{
																	"key": "platform",
																	"value": "{{Software_Platform_win}}"
																}
															]
														}
													},
													"response": []
												}
											]
										},
										{
											"name": "Software API_win-schduled",
											"item": [
												{
													"name": "New-Software-win Code-403",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 403\", function () {\r",
																	"    pm.response.to.have.status(403);\r",
																	"});\r",
																	""
																],
																"type": "text/javascript",
																"packages": {}
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [],
														"body": {
															"mode": "formdata",
															"formdata": [
																{
																	"key": "Name",
																	"value": "snst",
																	"type": "text"
																},
																{
																	"key": "Version",
																	"value": "{{Software_Version_win}}",
																	"type": "text"
																},
																{
																	"key": "Platform",
																	"value": "{{Software_Platform_win}}",
																	"type": "text"
																},
																{
																	"key": "Criticality",
																	"value": "{{criticality_Recommended}}",
																	"type": "text"
																},
																{
																	"key": "Description",
																	"value": "{{Description}}",
																	"type": "text"
																},
																{
																	"key": "ReleaseNotesUrl",
																	"value": "{{ReleaseNotesUrl}}",
																	"type": "text"
																},
																{
																	"key": "file",
																	"type": "file",
																	"src": "SecureNMCSystemTool_4.0.0.1_win-x64 Installer (4) (1).exe"
																}
															]
														},
														"url": {
															"raw": "{{Url_software}}software",
															"host": [
																"{{Url_software}}software"
															]
														}
													},
													"response": []
												},
												{
													"name": "all-software-win Code-200",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});\r",
																	""
																],
																"type": "text/javascript",
																"packages": {}
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{Url_software}}software?name={{Software_Name}}",
															"host": [
																"{{Url_software}}software"
															],
															"query": [
																{
																	"key": "name",
																	"value": "{{Software_Name}}"
																}
															]
														}
													},
													"response": []
												},
												{
													"name": "single-software-win Code-200",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});\r",
																	"\r",
																	""
																],
																"type": "text/javascript",
																"packages": {}
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{Url_software}}software?name={{Software_Name}}&version={{Software-win-stagged}}&platform={{Software_Platform_win}}",
															"host": [
																"{{Url_software}}software"
															],
															"query": [
																{
																	"key": "name",
																	"value": "{{Software_Name}}"
																},
																{
																	"key": "version",
																	"value": "{{Software-win-stagged}}"
																},
																{
																	"key": "platform",
																	"value": "{{Software_Platform_win}}"
																}
															]
														}
													},
													"response": []
												},
												{
													"name": "criticality-update-win Code-403",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 403\", function () {\r",
																	"    pm.response.to.have.status(403);\r",
																	"});\r",
																	""
																],
																"type": "text/javascript",
																"packages": {}
															}
														}
													],
													"request": {
														"method": "PUT",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\r\n  \"criticality\": \"{{criticality_Optional}}\",\r\n  \"description\": \"{{Description}}\",\r\n  \"releaseNotesUrl\": \"{{ReleaseNotesUrl}}\"\r\n}\r\n",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{Url_software}}software/{{Software_Name}}/{{Software-win-stagged}}//{{Software_Platform_win}}",
															"host": [
																"{{Url_software}}software"
															],
															"path": [
																"{{Software_Name}}",
																"{{Software-win-stagged}}",
																"",
																"{{Software_Platform_win}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "download-win Code-404",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 404\", function () {\r",
																	"    pm.response.to.have.status(404);\r",
																	"});\r",
																	"// pm.test(\"Status is 200 and response time > 10s\", function () {\r",
																	"//     pm.expect(pm.response.code).to.eql(200);\r",
																	"//     pm.expect(pm.response.responseTime).to.be.above(10000); // 10,000 ms = 10 seconds\r",
																	"// });\r",
																	""
																],
																"type": "text/javascript",
																"packages": {}
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{Url_software}}software/{{Software_Name}}/{{Software-win-stagged}}/{{Software_Platform_win}}/download",
															"host": [
																"{{Url_software}}software"
															],
															"path": [
																"{{Software_Name}}",
																"{{Software-win-stagged}}",
																"{{Software_Platform_win}}",
																"download"
															]
														}
													},
													"response": []
												},
												{
													"name": "win-delete Code-403",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 403\", function () {\r",
																	"    pm.response.to.have.status(403);\r",
																	"});\r",
																	""
																],
																"type": "text/javascript",
																"packages": {}
															}
														}
													],
													"request": {
														"method": "DELETE",
														"header": [],
														"url": {
															"raw": "https://dit-sds-software-webapp.azurewebsites.net/api/software/{{Software_Name}}/{{Software-win-stagged}}//{{Software_Platform_win}}",
															"protocol": "https",
															"host": [
																"dit-sds-software-webapp",
																"azurewebsites",
																"net"
															],
															"path": [
																"api",
																"software",
																"{{Software_Name}}",
																"{{Software-win-stagged}}",
																"",
																"{{Software_Platform_win}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "check deleted-win Code-200",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});\r",
																	""
																],
																"type": "text/javascript",
																"packages": {}
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{Url_software}}software?name={{Software_Name}}&version={{Software_Version_win}}&platform={{Software_Platform_win}}",
															"host": [
																"{{Url_software}}software"
															],
															"query": [
																{
																	"key": "name",
																	"value": "{{Software_Name}}"
																},
																{
																	"key": "version",
																	"value": "{{Software_Version_win}}"
																},
																{
																	"key": "platform",
																	"value": "{{Software_Platform_win}}"
																}
															]
														}
													},
													"response": []
												},
												{
													"name": "Scheduled-win Code-204",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 204\", function () {\r",
																	"    pm.response.to.have.status(204);\r",
																	"});\r",
																	""
																],
																"type": "text/javascript",
																"packages": {}
															}
														}
													],
													"request": {
														"method": "PUT",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\r\n  \"release\": true,\r\n  \"releaseDate\": \"{{ReleaseDate}}\"\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{Url_software}}software/{{Software_Name}}/{{Software-win-stagged}}//{{Software_Platform_win}}/release",
															"host": [
																"{{Url_software}}software"
															],
															"path": [
																"{{Software_Name}}",
																"{{Software-win-stagged}}",
																"",
																"{{Software_Platform_win}}",
																"release"
															]
														}
													},
													"response": []
												},
												{
													"name": "Scheduled-win-status Code-200",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});\r",
																	"\r",
																	""
																],
																"type": "text/javascript",
																"packages": {}
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{Url_software}}software?name={{Software_Name}}&version={{Software-win-stagged}}&platform={{Software_Platform_win}}",
															"host": [
																"{{Url_software}}software"
															],
															"query": [
																{
																	"key": "name",
																	"value": "{{Software_Name}}"
																},
																{
																	"key": "version",
																	"value": "{{Software-win-stagged}}"
																},
																{
																	"key": "platform",
																	"value": "{{Software_Platform_win}}"
																}
															]
														}
													},
													"response": []
												},
												{
													"name": "stagged-win Code-204 Copy",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 204\", function () {\r",
																	"    pm.response.to.have.status(204);\r",
																	"});\r",
																	""
																],
																"type": "text/javascript",
																"packages": {}
															}
														}
													],
													"request": {
														"method": "PUT",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\r\n  \"release\": false\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{Url_software}}software/{{Software_Name}}/{{Software-win-stagged}}/{{Software_Platform_win}}/release",
															"host": [
																"{{Url_software}}software"
															],
															"path": [
																"{{Software_Name}}",
																"{{Software-win-stagged}}",
																"{{Software_Platform_win}}",
																"release"
															]
														}
													},
													"response": []
												},
												{
													"name": "remove-from-db-win Code-204",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 403\", function () {\r",
																	"    pm.response.to.have.status(403);\r",
																	"});\r",
																	""
																],
																"type": "text/javascript",
																"packages": {}
															}
														}
													],
													"request": {
														"method": "DELETE",
														"header": [],
														"url": {
															"raw": "https://dit-sds-software-webapp.azurewebsites.net/api/software/{{Software_Name}}/{{Software-win-stagged}}//{{Software_Platform_win}}",
															"protocol": "https",
															"host": [
																"dit-sds-software-webapp",
																"azurewebsites",
																"net"
															],
															"path": [
																"api",
																"software",
																"{{Software_Name}}",
																"{{Software-win-stagged}}",
																"",
																"{{Software_Platform_win}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "check deleted-win Code-404",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});\r",
																	"\r",
																	""
																],
																"type": "text/javascript",
																"packages": {}
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{Url_software}}software?name={{Software_Name}}&version={{Software-win-stagged}}&platform={{Software_Platform_win}}",
															"host": [
																"{{Url_software}}software"
															],
															"query": [
																{
																	"key": "name",
																	"value": "{{Software_Name}}"
																},
																{
																	"key": "version",
																	"value": "{{Software-win-stagged}}"
																},
																{
																	"key": "platform",
																	"value": "{{Software_Platform_win}}"
																}
															]
														}
													},
													"response": []
												}
											]
										},
										{
											"name": "Software API_win-released",
											"item": [
												{
													"name": "New-Software-win Code-403",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 403\", function () {\r",
																	"    pm.response.to.have.status(403);\r",
																	"});\r",
																	""
																],
																"type": "text/javascript",
																"packages": {}
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [],
														"body": {
															"mode": "formdata",
															"formdata": [
																{
																	"key": "Name",
																	"value": "snst",
																	"type": "text"
																},
																{
																	"key": "Version",
																	"value": "{{Software_Version_win}}",
																	"type": "text"
																},
																{
																	"key": "Platform",
																	"value": "{{Software_Platform_win}}",
																	"type": "text"
																},
																{
																	"key": "Criticality",
																	"value": "{{criticality_Recommended}}",
																	"type": "text"
																},
																{
																	"key": "Description",
																	"value": "{{Description}}",
																	"type": "text"
																},
																{
																	"key": "ReleaseNotesUrl",
																	"value": "{{ReleaseNotesUrl}}",
																	"type": "text"
																},
																{
																	"key": "file",
																	"type": "file",
																	"src": "SecureNMCSystemTool_4.0.0.1_win-x64 Installer (4) (1).exe"
																}
															]
														},
														"url": {
															"raw": "{{Url_software}}software",
															"host": [
																"{{Url_software}}software"
															]
														}
													},
													"response": []
												},
												{
													"name": "all-software-win Code-200",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});\r",
																	""
																],
																"type": "text/javascript",
																"packages": {}
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{Url_software}}software?name={{Software_Name}}",
															"host": [
																"{{Url_software}}software"
															],
															"query": [
																{
																	"key": "name",
																	"value": "{{Software_Name}}"
																}
															]
														}
													},
													"response": []
												},
												{
													"name": "single-software-win Code-200",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});\r",
																	"\r",
																	""
																],
																"type": "text/javascript",
																"packages": {}
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{Url_software}}software?name={{Software_Name}}&version={{Software-win-released}}&platform={{Software_Platform_win}}",
															"host": [
																"{{Url_software}}software"
															],
															"query": [
																{
																	"key": "name",
																	"value": "{{Software_Name}}"
																},
																{
																	"key": "version",
																	"value": "{{Software-win-released}}"
																},
																{
																	"key": "platform",
																	"value": "{{Software_Platform_win}}"
																}
															]
														}
													},
													"response": []
												},
												{
													"name": "criticality-update-win Code-403",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 403\", function () {\r",
																	"    pm.response.to.have.status(403);\r",
																	"});\r",
																	""
																],
																"type": "text/javascript",
																"packages": {}
															}
														}
													],
													"request": {
														"method": "PUT",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\r\n  \"criticality\": \"{{criticality_Optional}}\",\r\n  \"description\": \"{{Description}}\",\r\n  \"releaseNotesUrl\": \"{{ReleaseNotesUrl}}\"\r\n}\r\n",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{Url_software}}software/{{Software_Name}}/{{Software-win-released}}/{{Software_Platform_win}}",
															"host": [
																"{{Url_software}}software"
															],
															"path": [
																"{{Software_Name}}",
																"{{Software-win-released}}",
																"{{Software_Platform_win}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "download-win Code-200",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});\r",
																	"// pm.test(\"Status is 200 and response time > 10s\", function () {\r",
																	"//     pm.expect(pm.response.code).to.eql(200);\r",
																	"//     pm.expect(pm.response.responseTime).to.be.above(10000); // 10,000 ms = 10 seconds\r",
																	"// });\r",
																	""
																],
																"type": "text/javascript",
																"packages": {}
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{Url_software}}software/{{Software_Name}}/{{Software-win-released}}/{{Software_Platform_win}}/download",
															"host": [
																"{{Url_software}}software"
															],
															"path": [
																"{{Software_Name}}",
																"{{Software-win-released}}",
																"{{Software_Platform_win}}",
																"download"
															]
														}
													},
													"response": []
												},
												{
													"name": "win-delete Code-403",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 403\", function () {\r",
																	"    pm.response.to.have.status(403);\r",
																	"});\r",
																	""
																],
																"type": "text/javascript",
																"packages": {}
															}
														}
													],
													"request": {
														"method": "DELETE",
														"header": [],
														"url": {
															"raw": "https://dit-sds-software-webapp.azurewebsites.net/api/software/{{Software_Name}}/{{Software-win-released}}/{{Software_Platform_win}}",
															"protocol": "https",
															"host": [
																"dit-sds-software-webapp",
																"azurewebsites",
																"net"
															],
															"path": [
																"api",
																"software",
																"{{Software_Name}}",
																"{{Software-win-released}}",
																"{{Software_Platform_win}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "check deleted-win Code-200",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});\r",
																	""
																],
																"type": "text/javascript",
																"packages": {}
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{Url_software}}software?name={{Software_Name}}&version={{Software-win-released}}&platform={{Software_Platform_win}}",
															"host": [
																"{{Url_software}}software"
															],
															"query": [
																{
																	"key": "name",
																	"value": "{{Software_Name}}"
																},
																{
																	"key": "version",
																	"value": "{{Software-win-released}}"
																},
																{
																	"key": "platform",
																	"value": "{{Software_Platform_win}}"
																}
															]
														}
													},
													"response": []
												},
												{
													"name": "stagged-win Code-204",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 204\", function () {\r",
																	"    pm.response.to.have.status(204);\r",
																	"});\r",
																	""
																],
																"type": "text/javascript",
																"packages": {}
															}
														}
													],
													"request": {
														"method": "PUT",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\r\n  \"release\": false\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{Url_software}}software/{{Software_Name}}/{{Software-win-released}}/{{Software_Platform_win}}/release",
															"host": [
																"{{Url_software}}software"
															],
															"path": [
																"{{Software_Name}}",
																"{{Software-win-released}}",
																"{{Software_Platform_win}}",
																"release"
															]
														}
													},
													"response": []
												},
												{
													"name": "Stagged-win-status Code-200",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});\r",
																	"\r",
																	"\r",
																	""
																],
																"type": "text/javascript",
																"packages": {}
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{Url_software}}software?name={{Software_Name}}&version={{Software-win-released}}&platform={{Software_Platform_win}}",
															"host": [
																"{{Url_software}}software"
															],
															"query": [
																{
																	"key": "name",
																	"value": "{{Software_Name}}"
																},
																{
																	"key": "version",
																	"value": "{{Software-win-released}}"
																},
																{
																	"key": "platform",
																	"value": "{{Software_Platform_win}}"
																}
															]
														}
													},
													"response": []
												},
												{
													"name": "Scheduled-win Code-204",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 204\", function () {\r",
																	"    pm.response.to.have.status(204);\r",
																	"});\r",
																	""
																],
																"type": "text/javascript",
																"packages": {}
															}
														}
													],
													"request": {
														"method": "PUT",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\r\n  \"release\": true,\r\n  \"releaseDate\": \"{{ReleaseDate}}\"\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{Url_software}}software/{{Software_Name}}/{{Software-win-released}}/{{Software_Platform_win}}/release",
															"host": [
																"{{Url_software}}software"
															],
															"path": [
																"{{Software_Name}}",
																"{{Software-win-released}}",
																"{{Software_Platform_win}}",
																"release"
															]
														}
													},
													"response": []
												},
												{
													"name": "Scheduled-win-status Code-200",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});\r",
																	"\r",
																	""
																],
																"type": "text/javascript",
																"packages": {}
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{Url_software}}software?name={{Software_Name}}&version={{Software-win-released}}&platform={{Software_Platform_win}}",
															"host": [
																"{{Url_software}}software"
															],
															"query": [
																{
																	"key": "name",
																	"value": "{{Software_Name}}"
																},
																{
																	"key": "version",
																	"value": "{{Software-win-released}}"
																},
																{
																	"key": "platform",
																	"value": "{{Software_Platform_win}}"
																}
															]
														}
													},
													"response": []
												},
												{
													"name": "remove-from-db-win Code-204",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 403\", function () {\r",
																	"    pm.response.to.have.status(403);\r",
																	"});\r",
																	""
																],
																"type": "text/javascript",
																"packages": {}
															}
														}
													],
													"request": {
														"method": "DELETE",
														"header": [],
														"url": {
															"raw": "https://dit-sds-software-webapp.azurewebsites.net/api/software/{{Software_Name}}/{{Software-win-released}}/{{Software_Platform_win}}",
															"protocol": "https",
															"host": [
																"dit-sds-software-webapp",
																"azurewebsites",
																"net"
															],
															"path": [
																"api",
																"software",
																"{{Software_Name}}",
																"{{Software-win-released}}",
																"{{Software_Platform_win}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "check deleted-win Code-404",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});\r",
																	"\r",
																	""
																],
																"type": "text/javascript",
																"packages": {}
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{Url_software}}software?name={{Software_Name}}&version={{Software-win-released}}&platform={{Software_Platform_win}}",
															"host": [
																"{{Url_software}}software"
															],
															"query": [
																{
																	"key": "name",
																	"value": "{{Software_Name}}"
																},
																{
																	"key": "version",
																	"value": "{{Software-win-released}}"
																},
																{
																	"key": "platform",
																	"value": "{{Software_Platform_win}}"
																}
															]
														}
													},
													"response": []
												}
											]
										}
									]
								},
								{
									"name": "osx",
									"item": [
										{
											"name": "Software API _osx",
											"item": [
												{
													"name": "New-Software-osx Code-403",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 403\", function () {\r",
																	"    pm.response.to.have.status(403);\r",
																	"});\r",
																	""
																],
																"type": "text/javascript",
																"packages": {}
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [],
														"body": {
															"mode": "formdata",
															"formdata": [
																{
																	"key": "Name",
																	"value": "snst",
																	"type": "text"
																},
																{
																	"key": "Version",
																	"value": "{{Software_Version_osx}}",
																	"type": "text"
																},
																{
																	"key": "Platform",
																	"value": "{{Software_Platform_osx}}",
																	"type": "text"
																},
																{
																	"key": "Criticality",
																	"value": "{{criticality_Recommended}}",
																	"type": "text"
																},
																{
																	"key": "Description",
																	"value": "{{Description}}",
																	"type": "text"
																},
																{
																	"key": "releaseNotesUrl",
																	"value": "{{ReleaseNotesUrl}}",
																	"type": "text"
																},
																{
																	"key": "file",
																	"type": "file",
																	"src": "SecureNMCSystemTool_4.0.0.1_osx-arm64 (3).tar.gz"
																},
																{
																	"key": "",
																	"value": "",
																	"type": "text"
																}
															]
														},
														"url": {
															"raw": "{{Url_software}}software",
															"host": [
																"{{Url_software}}software"
															]
														}
													},
													"response": []
												},
												{
													"name": "all software osx Code-200",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});\r",
																	""
																],
																"type": "text/javascript",
																"packages": {}
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{Url_software}}software?name={{Software_Name}}",
															"host": [
																"{{Url_software}}software"
															],
															"query": [
																{
																	"key": "name",
																	"value": "{{Software_Name}}"
																}
															]
														}
													},
													"response": []
												},
												{
													"name": "single software osx Code-200",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});\r",
																	"\r",
																	""
																],
																"type": "text/javascript",
																"packages": {}
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{Url_software}}software?name={{Software_Name}}&version={{Software-osx-stagged}}&platform={{Software_Platform_osx}}",
															"host": [
																"{{Url_software}}software"
															],
															"query": [
																{
																	"key": "name",
																	"value": "{{Software_Name}}"
																},
																{
																	"key": "version",
																	"value": "{{Software-osx-stagged}}"
																},
																{
																	"key": "platform",
																	"value": "{{Software_Platform_osx}}"
																}
															]
														}
													},
													"response": []
												},
												{
													"name": "criticality update-osx Code-403",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 403\", function () {\r",
																	"    pm.response.to.have.status(403);\r",
																	"});\r",
																	""
																],
																"type": "text/javascript",
																"packages": {}
															}
														}
													],
													"request": {
														"method": "PUT",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\r\n  \"criticality\": \"{{criticality_Optional}}\",\r\n  \"description\": \"{{Description}}\",\r\n  \"releaseNotesUrl\": \"{{ReleaseNotesUrl}}\"\r\n}\r\n",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{Url_software}}software/{{Software_Name}}/{{Software-osx-stagged}}/{{Software_Platform_osx}}",
															"host": [
																"{{Url_software}}software"
															],
															"path": [
																"{{Software_Name}}",
																"{{Software-osx-stagged}}",
																"{{Software_Platform_osx}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "download-osx Code-404",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 404\", function () {\r",
																	"    pm.response.to.have.status(404);\r",
																	"});\r",
																	"\r",
																	"// pm.test(\"Status is 200 and response time > 10s\", function () {\r",
																	"//     pm.expect(pm.response.code).to.eql(200);\r",
																	"//     pm.expect(pm.response.responseTime).to.be.above(10000); // 10,000 ms = 10 seconds\r",
																	"// });\r",
																	""
																],
																"type": "text/javascript",
																"packages": {}
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{Url_software}}software/{{Software_Name}}/{{Software-osx-stagged}}/{{Software_Platform_osx}}/download",
															"host": [
																"{{Url_software}}software"
															],
															"path": [
																"{{Software_Name}}",
																"{{Software-osx-stagged}}",
																"{{Software_Platform_osx}}",
																"download"
															]
														}
													},
													"response": []
												},
												{
													"name": "remove from db osx Code-403",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 403\", function () {\r",
																	"    pm.response.to.have.status(403);\r",
																	"});\r",
																	""
																],
																"type": "text/javascript",
																"packages": {}
															}
														}
													],
													"request": {
														"method": "DELETE",
														"header": [],
														"url": {
															"raw": "https://dit-sds-software-webapp.azurewebsites.net/api/software/{{Software_Name}}/{{Software-osx-stagged}}/{{Software_Platform_osx}}",
															"protocol": "https",
															"host": [
																"dit-sds-software-webapp",
																"azurewebsites",
																"net"
															],
															"path": [
																"api",
																"software",
																"{{Software_Name}}",
																"{{Software-osx-stagged}}",
																"{{Software_Platform_osx}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "check deleted-osx Code-200",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});\r",
																	""
																],
																"type": "text/javascript",
																"packages": {}
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{Url_software}}software?name={{Software_Name}}&version={{Software-osx-stagged}}&platform={{Software_Platform_osx}}",
															"host": [
																"{{Url_software}}software"
															],
															"query": [
																{
																	"key": "name",
																	"value": "{{Software_Name}}"
																},
																{
																	"key": "version",
																	"value": "{{Software-osx-stagged}}"
																},
																{
																	"key": "platform",
																	"value": "{{Software_Platform_osx}}"
																}
															]
														}
													},
													"response": []
												},
												{
													"name": "Scheduled-osx Code-204",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 204\", function () {\r",
																	"    pm.response.to.have.status(204);\r",
																	"});\r",
																	""
																],
																"type": "text/javascript",
																"packages": {}
															}
														}
													],
													"request": {
														"method": "PUT",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\r\n  \"release\": true,\r\n  \"releaseDate\": \"2025-08-02T16:15:44.3988046Z\"\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{Url_software}}software/{{Software_Name}}/{{Software-osx-stagged}}/{{Software_Platform_osx}}/release",
															"host": [
																"{{Url_software}}software"
															],
															"path": [
																"{{Software_Name}}",
																"{{Software-osx-stagged}}",
																"{{Software_Platform_osx}}",
																"release"
															]
														}
													},
													"response": []
												},
												{
													"name": "check scheduled-osx Code-200",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});\r",
																	""
																],
																"type": "text/javascript",
																"packages": {}
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{Url_software}}software?name={{Software_Name}}&version={{Software-osx-stagged}}&platform={{Software_Platform_osx}}",
															"host": [
																"{{Url_software}}software"
															],
															"query": [
																{
																	"key": "name",
																	"value": "{{Software_Name}}"
																},
																{
																	"key": "version",
																	"value": "{{Software-osx-stagged}}"
																},
																{
																	"key": "platform",
																	"value": "{{Software_Platform_osx}}"
																}
															]
														}
													},
													"response": []
												},
												{
													"name": "stagged-osx Code-204",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 204\", function () {\r",
																	"    pm.response.to.have.status(204);\r",
																	"});\r",
																	""
																],
																"type": "text/javascript",
																"packages": {}
															}
														}
													],
													"request": {
														"method": "PUT",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\r\n  \"release\": false\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{Url_software}}software/{{Software_Name}}/{{Software-osx-stagged}}/{{Software_Platform_osx}}/release",
															"host": [
																"{{Url_software}}software"
															],
															"path": [
																"{{Software_Name}}",
																"{{Software-osx-stagged}}",
																"{{Software_Platform_osx}}",
																"release"
															]
														}
													},
													"response": []
												},
												{
													"name": "check-stagged-osx Code-200",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});\r",
																	""
																],
																"type": "text/javascript",
																"packages": {}
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{Url_software}}software?name={{Software_Name}}&version={{Software_Version_osx}}&platform={{Software_Platform_osx}}",
															"host": [
																"{{Url_software}}software"
															],
															"query": [
																{
																	"key": "name",
																	"value": "{{Software_Name}}"
																},
																{
																	"key": "version",
																	"value": "{{Software_Version_osx}}"
																},
																{
																	"key": "platform",
																	"value": "{{Software_Platform_osx}}"
																}
															]
														}
													},
													"response": []
												},
												{
													"name": "delete from db-osx Code-403",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 403\", function () {\r",
																	"    pm.response.to.have.status(403);\r",
																	"});\r",
																	""
																],
																"type": "text/javascript",
																"packages": {}
															}
														}
													],
													"request": {
														"method": "DELETE",
														"header": [],
														"url": {
															"raw": "https://dit-sds-software-webapp.azurewebsites.net/api/software/{{Software_Name}}/{{Software-osx-stagged}}/{{Software_Platform_osx}}",
															"protocol": "https",
															"host": [
																"dit-sds-software-webapp",
																"azurewebsites",
																"net"
															],
															"path": [
																"api",
																"software",
																"{{Software_Name}}",
																"{{Software-osx-stagged}}",
																"{{Software_Platform_osx}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "check deleted-osx Code-200",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});\r",
																	"\r",
																	""
																],
																"type": "text/javascript",
																"packages": {}
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{Url_software}}software?name={{Software_Name}}&version={{Software-osx-stagged}}&platform={{Software_Platform_osx}}",
															"host": [
																"{{Url_software}}software"
															],
															"query": [
																{
																	"key": "name",
																	"value": "{{Software_Name}}"
																},
																{
																	"key": "version",
																	"value": "{{Software-osx-stagged}}"
																},
																{
																	"key": "platform",
																	"value": "{{Software_Platform_osx}}"
																}
															]
														}
													},
													"response": []
												}
											]
										},
										{
											"name": "Software API _osx released",
											"item": [
												{
													"name": "New-Software-osx Code-201",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 403\", function () {\r",
																	"    pm.response.to.have.status(403);\r",
																	"});\r",
																	""
																],
																"type": "text/javascript",
																"packages": {}
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [],
														"body": {
															"mode": "formdata",
															"formdata": [
																{
																	"key": "Name",
																	"value": "snst",
																	"type": "text"
																},
																{
																	"key": "Version",
																	"value": "{{Software_Version_osx}}",
																	"type": "text"
																},
																{
																	"key": "Platform",
																	"value": "{{Software_Platform_osx}}",
																	"type": "text"
																},
																{
																	"key": "Criticality",
																	"value": "{{criticality_Recommended}}",
																	"type": "text"
																},
																{
																	"key": "Description",
																	"value": "{{Description}}",
																	"type": "text"
																},
																{
																	"key": "releaseNotesUrl",
																	"value": "{{ReleaseNotesUrl}}",
																	"type": "text"
																},
																{
																	"key": "file",
																	"type": "file",
																	"src": "SecureNMCSystemTool_4.0.0.1_osx-arm64 (3).tar.gz"
																},
																{
																	"key": "",
																	"value": "",
																	"type": "text"
																}
															]
														},
														"url": {
															"raw": "{{Url_software}}software",
															"host": [
																"{{Url_software}}software"
															]
														}
													},
													"response": []
												},
												{
													"name": "all software osx Code-200",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});\r",
																	""
																],
																"type": "text/javascript",
																"packages": {}
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{Url_software}}software?name={{Software_Name}}",
															"host": [
																"{{Url_software}}software"
															],
															"query": [
																{
																	"key": "name",
																	"value": "{{Software_Name}}"
																}
															]
														}
													},
													"response": []
												},
												{
													"name": "single software osx Code-200",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});\r",
																	"\r",
																	""
																],
																"type": "text/javascript",
																"packages": {}
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{Url_software}}software?name={{Software_Name}}&version={{Software-osx-released}}&platform={{Software_Platform_osx}}",
															"host": [
																"{{Url_software}}software"
															],
															"query": [
																{
																	"key": "name",
																	"value": "{{Software_Name}}"
																},
																{
																	"key": "version",
																	"value": "{{Software-osx-released}}"
																},
																{
																	"key": "platform",
																	"value": "{{Software_Platform_osx}}"
																}
															]
														}
													},
													"response": []
												},
												{
													"name": "criticality update-osx Code-403",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 403\", function () {\r",
																	"    pm.response.to.have.status(403);\r",
																	"});\r",
																	""
																],
																"type": "text/javascript",
																"packages": {}
															}
														}
													],
													"request": {
														"method": "PUT",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\r\n  \"criticality\": \"{{criticality_Optional}}\",\r\n  \"description\": \"{{Description}}\",\r\n  \"releaseNotesUrl\": \"{{ReleaseNotesUrl}}\"\r\n}\r\n",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{Url_software}}software/{{Software_Name}}/{{Software_Version_osx}}/{{Software_Platform_osx}}",
															"host": [
																"{{Url_software}}software"
															],
															"path": [
																"{{Software_Name}}",
																"{{Software_Version_osx}}",
																"{{Software_Platform_osx}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "download-osx Code-200",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});\r",
																	"\r",
																	"// pm.test(\"Status is 200 and response time > 10s\", function () {\r",
																	"//     pm.expect(pm.response.code).to.eql(200);\r",
																	"//     pm.expect(pm.response.responseTime).to.be.above(10000); // 10,000 ms = 10 seconds\r",
																	"// });\r",
																	""
																],
																"type": "text/javascript",
																"packages": {}
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{Url_software}}software/{{Software_Name}}/{{Software-osx-released}}/{{Software_Platform_osx}}/download",
															"host": [
																"{{Url_software}}software"
															],
															"path": [
																"{{Software_Name}}",
																"{{Software-osx-released}}",
																"{{Software_Platform_osx}}",
																"download"
															]
														}
													},
													"response": []
												},
												{
													"name": "remove from db osx Code-403",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 403\", function () {\r",
																	"    pm.response.to.have.status(403);\r",
																	"});\r",
																	""
																],
																"type": "text/javascript",
																"packages": {}
															}
														}
													],
													"request": {
														"method": "DELETE",
														"header": [],
														"url": {
															"raw": "https://dit-sds-software-webapp.azurewebsites.net/api/software/{{Software_Name}}/{{Software-osx-released}}/{{Software_Platform_osx}}",
															"protocol": "https",
															"host": [
																"dit-sds-software-webapp",
																"azurewebsites",
																"net"
															],
															"path": [
																"api",
																"software",
																"{{Software_Name}}",
																"{{Software-osx-released}}",
																"{{Software_Platform_osx}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "check deleted-osx Code-200",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});\r",
																	""
																],
																"type": "text/javascript",
																"packages": {}
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{Url_software}}software?name={{Software_Name}}&version={{Software_Version_osx}}&platform={{Software_Platform_osx}}",
															"host": [
																"{{Url_software}}software"
															],
															"query": [
																{
																	"key": "name",
																	"value": "{{Software_Name}}"
																},
																{
																	"key": "version",
																	"value": "{{Software_Version_osx}}"
																},
																{
																	"key": "platform",
																	"value": "{{Software_Platform_osx}}"
																}
															]
														}
													},
													"response": []
												},
												{
													"name": "stagged-osx Code-204",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 204\", function () {\r",
																	"    pm.response.to.have.status(204);\r",
																	"});\r",
																	""
																],
																"type": "text/javascript",
																"packages": {}
															}
														}
													],
													"request": {
														"method": "PUT",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\r\n  \"release\": false\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{Url_software}}software/{{Software_Name}}/{{Software-osx-released}}/{{Software_Platform_osx}}/release",
															"host": [
																"{{Url_software}}software"
															],
															"path": [
																"{{Software_Name}}",
																"{{Software-osx-released}}",
																"{{Software_Platform_osx}}",
																"release"
															]
														}
													},
													"response": []
												},
												{
													"name": "check-stagged-osx Code-200",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});\r",
																	""
																],
																"type": "text/javascript",
																"packages": {}
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{Url_software}}software?name={{Software_Name}}&version={{Software-osx-released}}&platform={{Software_Platform_osx}}",
															"host": [
																"{{Url_software}}software"
															],
															"query": [
																{
																	"key": "name",
																	"value": "{{Software_Name}}"
																},
																{
																	"key": "version",
																	"value": "{{Software-osx-released}}"
																},
																{
																	"key": "platform",
																	"value": "{{Software_Platform_osx}}"
																}
															]
														}
													},
													"response": []
												},
												{
													"name": "Scheduled-osx Code-204",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 204\", function () {\r",
																	"    pm.response.to.have.status(204);\r",
																	"});\r",
																	""
																],
																"type": "text/javascript",
																"packages": {}
															}
														}
													],
													"request": {
														"method": "PUT",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\r\n  \"release\": true,\r\n  \"releaseDate\": \"2025-07-02T16:15:44.3988046Z\"\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{Url_software}}software/{{Software_Name}}/{{Software-osx-released}}/{{Software_Platform_osx}}/release",
															"host": [
																"{{Url_software}}software"
															],
															"path": [
																"{{Software_Name}}",
																"{{Software-osx-released}}",
																"{{Software_Platform_osx}}",
																"release"
															]
														}
													},
													"response": []
												},
												{
													"name": "check scheduled-osx Code-200",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});\r",
																	""
																],
																"type": "text/javascript",
																"packages": {}
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{Url_software}}software?name={{Software_Name}}&version={{Software-osx-released}}&platform={{Software_Platform_osx}}",
															"host": [
																"{{Url_software}}software"
															],
															"query": [
																{
																	"key": "name",
																	"value": "{{Software_Name}}"
																},
																{
																	"key": "version",
																	"value": "{{Software-osx-released}}"
																},
																{
																	"key": "platform",
																	"value": "{{Software_Platform_osx}}"
																}
															]
														}
													},
													"response": []
												},
												{
													"name": "delete from db-osx Code-403",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 403\", function () {\r",
																	"    pm.response.to.have.status(403);\r",
																	"});\r",
																	""
																],
																"type": "text/javascript",
																"packages": {}
															}
														}
													],
													"request": {
														"method": "DELETE",
														"header": [],
														"url": {
															"raw": "https://dit-sds-software-webapp.azurewebsites.net/api/software/{{Software_Name}}/{{Software-osx-released}}/{{Software_Platform_osx}}",
															"protocol": "https",
															"host": [
																"dit-sds-software-webapp",
																"azurewebsites",
																"net"
															],
															"path": [
																"api",
																"software",
																"{{Software_Name}}",
																"{{Software-osx-released}}",
																"{{Software_Platform_osx}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "check deleted-osx Code-200",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});\r",
																	"\r",
																	""
																],
																"type": "text/javascript",
																"packages": {}
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{Url_software}}software?name={{Software_Name}}&version={{Software-osx-released}}&platform={{Software_Platform_osx}}",
															"host": [
																"{{Url_software}}software"
															],
															"query": [
																{
																	"key": "name",
																	"value": "{{Software_Name}}"
																},
																{
																	"key": "version",
																	"value": "{{Software-osx-released}}"
																},
																{
																	"key": "platform",
																	"value": "{{Software_Platform_osx}}"
																}
															]
														}
													},
													"response": []
												}
											]
										}
									]
								},
								{
									"name": "linux",
									"item": [
										{
											"name": "Software API_linux stagged",
											"item": [
												{
													"name": "new-software-linux Code-403",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 403\", function () {\r",
																	"    pm.response.to.have.status(403);\r",
																	"});\r",
																	""
																],
																"type": "text/javascript",
																"packages": {}
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [],
														"body": {
															"mode": "formdata",
															"formdata": [
																{
																	"key": "Name",
																	"value": "snst",
																	"type": "text"
																},
																{
																	"key": "Version",
																	"value": "{{Software_Version_linux}}",
																	"type": "text"
																},
																{
																	"key": "Platform",
																	"value": "{{Software_Platform_linux}}",
																	"type": "text"
																},
																{
																	"key": "Criticality",
																	"value": "{{criticality_Recommended}}",
																	"type": "text"
																},
																{
																	"key": "Description",
																	"value": "{{Description}}",
																	"type": "text"
																},
																{
																	"key": "releaseNotesUrl",
																	"value": "{{ReleaseNotesUrl}}",
																	"type": "text"
																},
																{
																	"key": "file",
																	"type": "file",
																	"src": "SecureNMCSystemTool_4.0.0.1_linux-x64 (2).tar.gz"
																},
																{
																	"key": "",
																	"value": "",
																	"type": "text"
																}
															]
														},
														"url": {
															"raw": "{{Url_software}}software",
															"host": [
																"{{Url_software}}software"
															]
														}
													},
													"response": []
												},
												{
													"name": "all software-linux Code-200",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});\r",
																	""
																],
																"type": "text/javascript",
																"packages": {}
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{Url_software}}software?name={{Software_Name}}",
															"host": [
																"{{Url_software}}software"
															],
															"query": [
																{
																	"key": "name",
																	"value": "{{Software_Name}}"
																}
															]
														}
													},
													"response": []
												},
												{
													"name": "single software-linux Code-200",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});\r",
																	"\r",
																	""
																],
																"type": "text/javascript",
																"packages": {}
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{Url_software}}software?name={{Software_Name}}&version={{Software-linux-stagged}}&platform={{Software_Platform_linux}}",
															"host": [
																"{{Url_software}}software"
															],
															"query": [
																{
																	"key": "name",
																	"value": "{{Software_Name}}"
																},
																{
																	"key": "version",
																	"value": "{{Software-linux-stagged}}"
																},
																{
																	"key": "platform",
																	"value": "{{Software_Platform_linux}}"
																}
															]
														}
													},
													"response": []
												},
												{
													"name": "criticality update-linux Code-204",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 403\", function () {\r",
																	"    pm.response.to.have.status(403);\r",
																	"});\r",
																	""
																],
																"type": "text/javascript",
																"packages": {}
															}
														}
													],
													"request": {
														"method": "PUT",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\r\n  \"criticality\": \"{{criticality_Optional}}\",\r\n  \"description\": \"{{Description}}\",\r\n  \"releaseNotesUrl\": \"{{ReleaseNotesUrl}}\"\r\n}\r\n",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{Url_software}}software/{{Software_Name}}/{{Software-linux-stagged}}/{{Software_Platform_linux}}",
															"host": [
																"{{Url_software}}software"
															],
															"path": [
																"{{Software_Name}}",
																"{{Software-linux-stagged}}",
																"{{Software_Platform_linux}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "download-linux Code-404",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 404\", function () {\r",
																	"    pm.response.to.have.status(404);\r",
																	"});\r",
																	"\r",
																	"// pm.test(\"Status is 200 and response time > 10s\", function () {\r",
																	"//     pm.expect(pm.response.code).to.eql(200);\r",
																	"//     pm.expect(pm.response.responseTime).to.be.above(10000); // 10,000 ms = 10 seconds\r",
																	"// });\r",
																	""
																],
																"type": "text/javascript",
																"packages": {}
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{Url_software}}software/{{Software_Name}}/{{Software-linux-stagged}}/{{Software_Platform_linux}}/download",
															"host": [
																"{{Url_software}}software"
															],
															"path": [
																"{{Software_Name}}",
																"{{Software-linux-stagged}}",
																"{{Software_Platform_linux}}",
																"download"
															]
														}
													},
													"response": []
												},
												{
													"name": "linux-delete Code-403",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 403\", function () {\r",
																	"    pm.response.to.have.status(403);\r",
																	"});\r",
																	""
																],
																"type": "text/javascript",
																"packages": {}
															}
														}
													],
													"request": {
														"method": "DELETE",
														"header": [],
														"url": {
															"raw": "https://dit-sds-software-webapp.azurewebsites.net/api/software/{{Software_Name}}/{{Software-linux-stagged}}/{{Software_Platform_linux}}",
															"protocol": "https",
															"host": [
																"dit-sds-software-webapp",
																"azurewebsites",
																"net"
															],
															"path": [
																"api",
																"software",
																"{{Software_Name}}",
																"{{Software-linux-stagged}}",
																"{{Software_Platform_linux}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "delete-check-linux Code-200",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});\r",
																	"\r",
																	""
																],
																"type": "text/javascript",
																"packages": {}
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{Url_software}}software?name={{Software_Name}}&version={{Software-linux-stagged}}&platform={{Software_Platform_linux}}",
															"host": [
																"{{Url_software}}software"
															],
															"query": [
																{
																	"key": "name",
																	"value": "{{Software_Name}}"
																},
																{
																	"key": "version",
																	"value": "{{Software-linux-stagged}}"
																},
																{
																	"key": "platform",
																	"value": "{{Software_Platform_linux}}"
																}
															]
														}
													},
													"response": []
												},
												{
													"name": "Scheduled_linux Code-204",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 204\", function () {\r",
																	"    pm.response.to.have.status(204);\r",
																	"});\r",
																	""
																],
																"type": "text/javascript",
																"packages": {}
															}
														}
													],
													"request": {
														"method": "PUT",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\r\n  \"release\": true,\r\n  \"releaseDate\": \"2025-08-02T16:15:44.3988046Z\"\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{Url_software}}software/{{Software_Name}}/{{Software-linux-stagged}}/{{Software_Platform_linux}}/release",
															"host": [
																"{{Url_software}}software"
															],
															"path": [
																"{{Software_Name}}",
																"{{Software-linux-stagged}}",
																"{{Software_Platform_linux}}",
																"release"
															]
														}
													},
													"response": []
												},
												{
													"name": "Scheduled check linux Code-200",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});\r",
																	""
																],
																"type": "text/javascript",
																"packages": {}
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{Url_software}}software?name={{Software_Name}}&version={{Software-linux-stagged}}&platform={{Software_Platform_linux}}",
															"host": [
																"{{Url_software}}software"
															],
															"query": [
																{
																	"key": "name",
																	"value": "{{Software_Name}}"
																},
																{
																	"key": "version",
																	"value": "{{Software-linux-stagged}}"
																},
																{
																	"key": "platform",
																	"value": "{{Software_Platform_linux}}"
																}
															]
														}
													},
													"response": []
												},
												{
													"name": "stagged-linux Code-204",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 204\", function () {\r",
																	"    pm.response.to.have.status(204);\r",
																	"});\r",
																	""
																],
																"type": "text/javascript",
																"packages": {}
															}
														}
													],
													"request": {
														"method": "PUT",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\r\n  \"release\": false\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{Url_software}}software/{{Software_Name}}/{{Software-linux-stagged}}/{{Software_Platform_linux}}/release",
															"host": [
																"{{Url_software}}software"
															],
															"path": [
																"{{Software_Name}}",
																"{{Software-linux-stagged}}",
																"{{Software_Platform_linux}}",
																"release"
															]
														}
													},
													"response": []
												},
												{
													"name": "check Stagged-linux Code-200",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});\r",
																	""
																],
																"type": "text/javascript",
																"packages": {}
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{Url_software}}software?name={{Software_Name}}&version={{Software-linux-stagged}}&platform={{Software_Platform_linux}}",
															"host": [
																"{{Url_software}}software"
															],
															"query": [
																{
																	"key": "name",
																	"value": "{{Software_Name}}"
																},
																{
																	"key": "version",
																	"value": "{{Software-linux-stagged}}"
																},
																{
																	"key": "platform",
																	"value": "{{Software_Platform_linux}}"
																}
															]
														}
													},
													"response": []
												},
												{
													"name": "remove from db-linux Code-204",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 403\", function () {\r",
																	"    pm.response.to.have.status(403);\r",
																	"});\r",
																	""
																],
																"type": "text/javascript",
																"packages": {}
															}
														}
													],
													"request": {
														"method": "DELETE",
														"header": [],
														"url": {
															"raw": "https://dit-sds-software-webapp.azurewebsites.net/api/software/{{Software_Name}}/{{Software-linux-stagged}}/{{Software_Platform_linux}}",
															"protocol": "https",
															"host": [
																"dit-sds-software-webapp",
																"azurewebsites",
																"net"
															],
															"path": [
																"api",
																"software",
																"{{Software_Name}}",
																"{{Software-linux-stagged}}",
																"{{Software_Platform_linux}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "check deleted-linux Code-404",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});\r",
																	""
																],
																"type": "text/javascript",
																"packages": {}
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{Url_software}}software?name={{Software_Name}}&version={{Software-linux-stagged}}&platform={{Software_Platform_linux}}",
															"host": [
																"{{Url_software}}software"
															],
															"query": [
																{
																	"key": "name",
																	"value": "{{Software_Name}}"
																},
																{
																	"key": "version",
																	"value": "{{Software-linux-stagged}}"
																},
																{
																	"key": "platform",
																	"value": "{{Software_Platform_linux}}"
																}
															]
														}
													},
													"response": []
												}
											]
										},
										{
											"name": "Software API_linux Released",
											"item": [
												{
													"name": "new-software-linux 403",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 403\", function () {\r",
																	"    pm.response.to.have.status(403);\r",
																	"});\r",
																	""
																],
																"type": "text/javascript",
																"packages": {}
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [],
														"body": {
															"mode": "formdata",
															"formdata": [
																{
																	"key": "Name",
																	"value": "snst",
																	"type": "text"
																},
																{
																	"key": "Version",
																	"value": "{{Software_Version_linux}}",
																	"type": "text"
																},
																{
																	"key": "Platform",
																	"value": "{{Software_Platform_linux}}",
																	"type": "text"
																},
																{
																	"key": "Criticality",
																	"value": "{{criticality_Recommended}}",
																	"type": "text"
																},
																{
																	"key": "Description",
																	"value": "{{Description}}",
																	"type": "text"
																},
																{
																	"key": "releaseNotesUrl",
																	"value": "{{ReleaseNotesUrl}}",
																	"type": "text"
																},
																{
																	"key": "file",
																	"type": "file",
																	"src": "SecureNMCSystemTool_4.0.0.1_linux-x64 (2).tar.gz"
																},
																{
																	"key": "",
																	"value": "",
																	"type": "text"
																}
															]
														},
														"url": {
															"raw": "{{Url_software}}software",
															"host": [
																"{{Url_software}}software"
															]
														}
													},
													"response": []
												},
												{
													"name": "all software-linux Code-200",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});\r",
																	""
																],
																"type": "text/javascript",
																"packages": {}
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{Url_software}}software?name={{Software_Name}}",
															"host": [
																"{{Url_software}}software"
															],
															"query": [
																{
																	"key": "name",
																	"value": "{{Software_Name}}"
																}
															]
														}
													},
													"response": []
												},
												{
													"name": "single software-linux Code-200",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});\r",
																	"\r",
																	""
																],
																"type": "text/javascript",
																"packages": {}
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{Url_software}}software?name={{Software_Name}}&version={{Software-linux-released}}&platform={{Software_Platform_linux}}",
															"host": [
																"{{Url_software}}software"
															],
															"query": [
																{
																	"key": "name",
																	"value": "{{Software_Name}}"
																},
																{
																	"key": "version",
																	"value": "{{Software-linux-released}}"
																},
																{
																	"key": "platform",
																	"value": "{{Software_Platform_linux}}"
																}
															]
														}
													},
													"response": []
												},
												{
													"name": "criticality update-linux Code-403",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 403\", function () {\r",
																	"    pm.response.to.have.status(403);\r",
																	"});\r",
																	""
																],
																"type": "text/javascript",
																"packages": {}
															}
														}
													],
													"request": {
														"method": "PUT",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\r\n  \"criticality\": \"{{criticality_Optional}}\",\r\n  \"description\": \"{{Description}}\",\r\n  \"releaseNotesUrl\": \"{{ReleaseNotesUrl}}\"\r\n}\r\n",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{Url_software}}software/{{Software_Name}}/{{Software-linux-released}}/{{Software_Platform_linux}}",
															"host": [
																"{{Url_software}}software"
															],
															"path": [
																"{{Software_Name}}",
																"{{Software-linux-released}}",
																"{{Software_Platform_linux}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "download-linux Code-200",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});\r",
																	"\r",
																	"// pm.test(\"Status is 200 and response time > 10s\", function () {\r",
																	"//     pm.expect(pm.response.code).to.eql(200);\r",
																	"//     pm.expect(pm.response.responseTime).to.be.above(10000); // 10,000 ms = 10 seconds\r",
																	"// });\r",
																	""
																],
																"type": "text/javascript",
																"packages": {}
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{Url_software}}software/{{Software_Name}}/{{Software-linux-released}}/{{Software_Platform_linux}}/download",
															"host": [
																"{{Url_software}}software"
															],
															"path": [
																"{{Software_Name}}",
																"{{Software-linux-released}}",
																"{{Software_Platform_linux}}",
																"download"
															]
														}
													},
													"response": []
												},
												{
													"name": "linux-delete Code-204",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 403\", function () {\r",
																	"    pm.response.to.have.status(403);\r",
																	"});\r",
																	""
																],
																"type": "text/javascript",
																"packages": {}
															}
														}
													],
													"request": {
														"method": "DELETE",
														"header": [],
														"url": {
															"raw": "https://dit-sds-software-webapp.azurewebsites.net/api/software/{{Software_Name}}/{{Software-linux-released}}/{{Software_Platform_linux}}",
															"protocol": "https",
															"host": [
																"dit-sds-software-webapp",
																"azurewebsites",
																"net"
															],
															"path": [
																"api",
																"software",
																"{{Software_Name}}",
																"{{Software-linux-released}}",
																"{{Software_Platform_linux}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "delete-check-linux Code-200",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});\r",
																	"\r",
																	""
																],
																"type": "text/javascript",
																"packages": {}
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{Url_software}}software?name={{Software_Name}}&version={{Software-linux-released}}&platform={{Software_Platform_linux}}",
															"host": [
																"{{Url_software}}software"
															],
															"query": [
																{
																	"key": "name",
																	"value": "{{Software_Name}}"
																},
																{
																	"key": "version",
																	"value": "{{Software-linux-released}}"
																},
																{
																	"key": "platform",
																	"value": "{{Software_Platform_linux}}"
																}
															]
														}
													},
													"response": []
												},
												{
													"name": "stagged-linux Code-204",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 204\", function () {\r",
																	"    pm.response.to.have.status(204);\r",
																	"});\r",
																	""
																],
																"type": "text/javascript",
																"packages": {}
															}
														}
													],
													"request": {
														"method": "PUT",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\r\n  \"release\": false\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{Url_software}}software/{{Software_Name}}/{{Software-linux-released}}/{{Software_Platform_linux}}/release",
															"host": [
																"{{Url_software}}software"
															],
															"path": [
																"{{Software_Name}}",
																"{{Software-linux-released}}",
																"{{Software_Platform_linux}}",
																"release"
															]
														}
													},
													"response": []
												},
												{
													"name": "check Stagged-linux Code-200",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});\r",
																	""
																],
																"type": "text/javascript",
																"packages": {}
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{Url_software}}software?name={{Software_Name}}&version={{Software-linux-released}}&platform={{Software_Platform_linux}}",
															"host": [
																"{{Url_software}}software"
															],
															"query": [
																{
																	"key": "name",
																	"value": "{{Software_Name}}"
																},
																{
																	"key": "version",
																	"value": "{{Software-linux-released}}"
																},
																{
																	"key": "platform",
																	"value": "{{Software_Platform_linux}}"
																}
															]
														}
													},
													"response": []
												},
												{
													"name": "Scheduled_linux Code-204",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 204\", function () {\r",
																	"    pm.response.to.have.status(204);\r",
																	"});\r",
																	""
																],
																"type": "text/javascript",
																"packages": {}
															}
														}
													],
													"request": {
														"method": "PUT",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\r\n  \"release\": true,\r\n  \"releaseDate\": \"2025-07-02T16:15:44.3988046Z\"\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{Url_software}}software/{{Software_Name}}/{{Software-linux-released}}/{{Software_Platform_linux}}/release",
															"host": [
																"{{Url_software}}software"
															],
															"path": [
																"{{Software_Name}}",
																"{{Software-linux-released}}",
																"{{Software_Platform_linux}}",
																"release"
															]
														}
													},
													"response": []
												},
												{
													"name": "Scheduled check linux Code-200",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});\r",
																	""
																],
																"type": "text/javascript",
																"packages": {}
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{Url_software}}software?name={{Software_Name}}&version={{Software-linux-released}}&platform={{Software_Platform_linux}}",
															"host": [
																"{{Url_software}}software"
															],
															"query": [
																{
																	"key": "name",
																	"value": "{{Software_Name}}"
																},
																{
																	"key": "version",
																	"value": "{{Software-linux-released}}"
																},
																{
																	"key": "platform",
																	"value": "{{Software_Platform_linux}}"
																}
															]
														}
													},
													"response": []
												},
												{
													"name": "remove from db-linux Code-204",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 403\", function () {\r",
																	"    pm.response.to.have.status(403);\r",
																	"});\r",
																	""
																],
																"type": "text/javascript",
																"packages": {}
															}
														}
													],
													"request": {
														"method": "DELETE",
														"header": [],
														"url": {
															"raw": "https://dit-sds-software-webapp.azurewebsites.net/api/software/{{Software_Name}}/{{Software-linux-released}}/{{Software_Platform_linux}}",
															"protocol": "https",
															"host": [
																"dit-sds-software-webapp",
																"azurewebsites",
																"net"
															],
															"path": [
																"api",
																"software",
																"{{Software_Name}}",
																"{{Software-linux-released}}",
																"{{Software_Platform_linux}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "check deleted-linux Code-404",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});\r",
																	""
																],
																"type": "text/javascript",
																"packages": {}
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{Url_software}}software?name={{Software_Name}}&version={{Software-linux-released}}&platform={{Software_Platform_linux}}",
															"host": [
																"{{Url_software}}software"
															],
															"query": [
																{
																	"key": "name",
																	"value": "{{Software_Name}}"
																},
																{
																	"key": "version",
																	"value": "{{Software-linux-released}}"
																},
																{
																	"key": "platform",
																	"value": "{{Software_Platform_linux}}"
																}
															]
														}
													},
													"response": []
												}
											]
										}
									]
								}
							]
						}
					],
					"auth": {
						"type": "apikey",
						"apikey": [
							{
								"key": "value",
								"value": "{{Api_key_User}}",
								"type": "string"
							},
							{
								"key": "key",
								"value": "Authorization",
								"type": "string"
							}
						]
					},
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"packages": {},
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"packages": {},
								"exec": [
									""
								]
							}
						}
					]
				}
			],
			"auth": {
				"type": "noauth"
			},
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"packages": {},
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"packages": {},
						"exec": [
							""
						]
					}
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "firmware",
			"value": ""
		},
		{
			"key": "federatedId ",
			"value": ""
		},
		{
			"key": "roles",
			"value": ""
		},
		{
			"key": "userroles",
			"value": ""
		},
		{
			"key": "federatedId",
			"value": ""
		},
		{
			"key": "appName",
			"value": ""
		},
		{
			"key": "appVersion",
			"value": ""
		}
	]
}